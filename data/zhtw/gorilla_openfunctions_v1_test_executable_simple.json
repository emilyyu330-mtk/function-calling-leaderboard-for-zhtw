{"id": "executable_simple_0", "question": "\u6211\u4e00\u76f4\u5728\u73a9\u4e00\u500b\u904a\u6232\uff0c\u5176\u4e2d\u64f2\u51fa\u516d\u9ede\u7684\u6a5f\u7387\u6bd4\u5e73\u5e38\u66f4\u9ad8\uff0c\u55ae\u6b21\u64f2\u51fa\u516d\u9ede\u7684\u6a5f\u7387\u70ba60\uff05\u3002\u6211\u5f88\u597d\u5947\uff0c\u5982\u679c\u6211\u64f2\u9ab0\u5b5020\u6b21\uff0c\u6211\u6703\u5f97\u5230\u6b63\u597d\u4e94\u500b\u516d\u9ede\u7684\u6a5f\u7387\u662f\u591a\u5c11\uff1f", "function": {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "float", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calc_binomial_probability(n=20, k=5, p=0.6)"]}
{"id": "executable_simple_1", "question": "\u5728\u6628\u665a\u7684\u7c43\u7403\u6bd4\u8cfd\u4e2d\uff0c\u5176\u4e2d\u4e00\u4f4d\u660e\u661f\u7403\u54e1\u8868\u73fe\u51fa\u8272\uff0c\u5617\u8a66\u4e86\u9a5a\u4eba\u768430\u6b21\u7f70\u7403\u3002\u4e00\u822c\u4eba\u90fd\u77e5\u9053\uff0c\u7f70\u7403\u7684\u5e73\u5747\u6210\u529f\u7387\u5927\u7d04\u572850%\u5de6\u53f3\u3002\u6211\u5f88\u597d\u5947\uff0c\u4ee5\u9019\u500b\u6210\u529f\u6a5f\u7387\u4f86\u8a08\u7b97\uff0c\u9019\u4f4d\u7403\u54e1\u5728\u90a330\u6b21\u5617\u8a66\u4e2d\u6070\u597d\u547d\u4e2d15\u6b21\u7684\u6a5f\u7387\u662f\u591a\u5c11\uff1f", "function": {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "float", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calc_binomial_probability(n=30, k=15, p=0.5)"]}
{"id": "executable_simple_2", "question": "\u6211\u76ee\u524d\u6b63\u5728\u8abf\u6574\u4e00\u500b\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\uff0c\u6211\u9700\u8981\u4e86\u89e3\u6211\u7684\u6578\u64da\u96c6\u4e2d\u5169\u500b\u7269\u4ef6\u4e4b\u9593\u7684\u76f8\u4f3c\u6027\u3002\u5b83\u5011\u7684\u7279\u5fb5\u88ab\u8868\u9054\u70ba\u7279\u5fb5\u5411\u91cf[0.5\uff0c0.7\uff0c0.2\uff0c0.9\uff0c0.1]\u548c[0.4\uff0c0.6\uff0c0.3\uff0c0.8\uff0c0.2]\u3002\u4f60\u80fd\u8a08\u7b97\u9019\u5169\u500b\u7279\u5fb5\u5411\u91cf\u4e4b\u9593\u7684\u9918\u5f26\u76f8\u4f3c\u5ea6\uff0c\u5e6b\u52a9\u6211\u78ba\u5b9a\u9019\u4e9b\u7269\u4ef6\u6709\u591a\u76f8\u4f3c\u55ce\uff1f", "function": {"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "dict", "properties": {"vectorA": {"type": "array", "items": {"type": "float"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "float"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])"]}
{"id": "executable_simple_3", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u9805\u76ee\uff0c\u6d89\u53ca\u6bd4\u8f03\u4e0d\u540c\u5be6\u9ad4\u7684\u5c6c\u6027\uff0c\u4ee5\u78ba\u5b9a\u5b83\u5011\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u6211\u6709\u5169\u500b\u4ee5\u6578\u503c\u9663\u5217\u8868\u793a\u7684\u5be6\u9ad4\uff0c\u6211\u9700\u8981\u4f7f\u7528\u9918\u5f26\u76f8\u4f3c\u5ea6\u4f5c\u70ba\u5b83\u5011\u4e4b\u9593\u76f8\u4f3c\u5ea6\u7684\u8861\u91cf\u6a19\u6e96\u3002\u7b2c\u4e00\u500b\u5be6\u9ad4\u7684\u5c6c\u6027\u662f[0.3, 0.8, 0.1, 0.6, 0.2]\uff0c\u7b2c\u4e8c\u500b\u5be6\u9ad4\u7684\u5c6c\u6027\u662f[0.5, 0.7, 0.4, 0.9, 0.3]\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u5169\u500b\u5411\u91cf\u7684\u9918\u5f26\u76f8\u4f3c\u5ea6\u55ce\uff1f", "function": {"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "dict", "properties": {"vectorA": {"type": "array", "items": {"type": "float"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "float"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_cosine_similarity(vectorA=[0.3, 0.8, 0.1, 0.6, 0.2], vectorB=[0.5, 0.7, 0.4, 0.9, 0.3])"]}
{"id": "executable_simple_4", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u7269\u7406\u5be6\u9a57\uff0c\u9700\u8981\u8a08\u7b97\u6211\u624b\u4e0a\u7269\u9ad4\u7684\u5bc6\u5ea6\u3002\u5b83\u91cd50\u516c\u65a4\uff0c\u4f54\u752810\u7acb\u65b9\u7c73\u7684\u7a7a\u9593\u3002\u4f60\u80fd\u5e6b\u6211\u7b97\u51fa\u5b83\u7684\u5bc6\u5ea6\u55ce\uff1f", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_density(mass=50.0, volume=10.0)"]}
{"id": "executable_simple_5", "question": "\u6211\u5011\u5728\u79d1\u5b78\u7814\u7a76\u4e2d\u767c\u73fe\u4e86\u9019\u500b\u5947\u602a\u7684\u7269\u9ad4\u3002\u5b83\u76f8\u7576\u6c89\u91cd\uff0c\u91cd\u91cf\u9054\u5230120\u516c\u65a4\uff0c\u4f54\u7528\u7d0430\u7acb\u65b9\u7c73\u7684\u7a7a\u9593\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u5b83\u7684\u5bc6\u5ea6\u55ce\uff1f", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_density(mass=120.0, volume=30.0)"]}
{"id": "executable_simple_6", "question": "\u5728\u6211\u5011\u7684\u9ad8\u7d1a\u7269\u7406\u5be6\u9a57\u4e2d\uff0c\u6211\u5011\u4e00\u76f4\u5728\u8ffd\u8e64\u9019\u500b\u7368\u7279\u7684\u7269\u9ad4\uff0c\u5b83\u6700\u521d\u7684\u79fb\u52d5\u901f\u5ea6\u70ba15\u7c73/\u79d2\u3002\u5b83\u4e00\u76f4\u4ee59.8\u7c73/\u79d2\u00b2\u7684\u52a0\u901f\u5ea6\u52a0\u901f\uff0c\u9019\u5df2\u7d93\u6301\u7e8c\u4e8610\u79d2\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u6bb5\u6642\u9593\u5167\u7269\u9ad4\u7684\u7e3d\u4f4d\u79fb\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_displacement(initial_velocity=15.0, acceleration=9.8, time=10)"]}
{"id": "executable_simple_7", "question": "\u5728\u9ad8\u901f\u8ffd\u9010\u4e2d\uff0c\u7576\u99d5\u99db\u52a0\u901f\u8eca\u8f1b\u6642\uff0c\u5b83\u6700\u521d\u7684\u901f\u5ea6\u70ba\u6bcf\u79d225\u7c73\u3002\u96a8\u8457\u7a81\u7136\u8e29\u4e0b\u6cb9\u9580\uff0c\u8eca\u5b50\u7684\u52a0\u901f\u5ea6\u70ba\u6bcf\u79d215\u7c73\u5e73\u65b9\uff0c\u4e26\u6301\u7e8c\u4e868\u79d2\u3002\u6211\u9700\u8981\u8a08\u7b97\u8a72\u6bb5\u6642\u9593\u5167\u8eca\u8f1b\u7684\u4f4d\u79fb\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u9019\u500b\u4fe1\u606f\u55ce\uff1f", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_displacement(initial_velocity=25.0, acceleration=15.0, time=8)"]}
{"id": "executable_simple_8", "question": "\u5728\u6211\u5011\u7684\u7269\u7406\u5be6\u9a57\u8ab2\u7a0b\u4e2d\uff0c\u6211\u5011\u6b63\u5728\u9032\u884c\u95dc\u65bc\u96fb\u5834\u53ca\u5176\u5c0d\u5e36\u96fb\u7c92\u5b50\u7684\u5f71\u97ff\u7684\u5be6\u9a57\u3002\u6211\u5011\u5c07\u4e00\u500b\u5e36\u67095\u5eab\u502b\u96fb\u8377\u7684\u7c92\u5b50\u653e\u7f6e\u5728\u4e00\u500b\u96fb\u58d3\u70ba10\u4f0f\u7279\u7684\u5834\u4e2d\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u7a2e\u60c5\u6cc1\u4e0b\u7684\u975c\u96fb\u52e2\u80fd\u3002\u4f60\u80fd\u5e6b\u6211\u7b97\u51fa\u4f86\u55ce\uff1f", "function": {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge of the object, in coulombs."}, "voltage": {"type": "float", "description": "The voltage of the object, in volts."}}, "required": ["charge", "voltage"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_electrostatic_potential_energy(charge=5.0, voltage=10.0)"]}
{"id": "executable_simple_9", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u7269\u7406\u6a21\u64ec\uff0c\u9019\u88e1\u6709\u4e00\u500b\u5e36\u96fb\u91cf\u70ba7.8\u5eab\u4f96\u7684\u5fae\u7c92\u5b50\u3002\u5b83\u88ab\u653e\u7f6e\u5728\u4e00\u500b\u96fb\u78c1\u5834\u4e2d\uff0c\u96fb\u58d3\u70ba15.2\u4f0f\u7279\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u9019\u500b\u7c92\u5b50\u5728\u7d66\u5b9a\u5834\u4e2d\u7684\u975c\u96fb\u52e2\u80fd\u55ce\uff1f", "function": {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge of the object, in coulombs."}, "voltage": {"type": "float", "description": "The voltage of the object, in volts."}}, "required": ["charge", "voltage"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_electrostatic_potential_energy(charge=7.8, voltage=15.2)"]}
{"id": "executable_simple_10", "question": "\u5728\u4e00\u6b21\u8a13\u7df4\u6f14\u7fd2\u4e2d\uff0c\u6211\u5011\u6b63\u5728\u5206\u6790\u4e00\u500b\u9ad8\u901f\u8ffd\u9010\u7684\u6a21\u64ec\uff0c\u5176\u4e2d\u4e00\u8f1b\u8eca\u5f9e\u975c\u6b62\u958b\u59cb\uff0c\u7136\u5f8c\u6301\u7e8c\u52a0\u901f\u3002\u6211\u5011\u6e2c\u91cf\u51fa\u52a0\u901f\u5ea6\u70ba\u6bcf\u79d29.8\u7c73\uff0c\u4e26\u4e14\u52a0\u901f\u6301\u7e8c\u4e8612\u79d2\u3002\u6211\u9700\u8981\u8a08\u7b97\u51fa\u5728\u9019\u6bb5\u6642\u9593\u7d50\u675f\u6642\u8eca\u8f1b\u7684\u6700\u7d42\u901f\u5ea6\u3002\u4f60\u80fd\u7d66\u6211\u9019\u500b\u6578\u5b57\u55ce\uff1f", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)"]}
{"id": "executable_simple_11", "question": "\u6211\u6709\u4e00\u500b\u7269\u7406\u5be6\u9a57\uff0c\u6211\u8981\u5f9e\u4e00\u5b9a\u7684\u9ad8\u5ea6\u6254\u4e0b\u4e00\u500b\u7403\uff0c\u6211\u77e5\u9053\u521d\u59cb\u901f\u5ea6\u662f\u96f6\uff0c\u56e0\u70ba\u6211\u8b93\u5b83\u81ea\u7531\u843d\u4e0b\u3002\u91cd\u529b\u5728\u9019\u88e1\u626e\u6f14\u84579.8\u7c73/\u79d2\u00b2\u7684\u89d2\u8272\u3002\u57287\u79d2\u5f8c\uff0c\u6211\u60f3\u8a08\u7b97\u6700\u7d42\u901f\u5ea6\u6703\u662f\u591a\u5c11\u3002\u6211\u5011\u53ef\u4ee5\u89e3\u6c7a\u9019\u500b\u554f\u984c\u55ce\uff1f", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=7)"]}
{"id": "executable_simple_12", "question": "\u6211\u5df2\u7d93\u5c075000\u7f8e\u5143\u5b58\u5165\u4e00\u500b\u63d0\u4f9b5\uff05\u5e74\u5229\u7387\u7684\u5b9a\u671f\u5b58\u6b3e\uff0c\u4e26\u8a08\u5283\u8b93\u5b83\u589e\u957710\u5e74\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u9805\u6295\u8cc7\u7684\u672a\u4f86\u50f9\u503c\u55ce\uff1f", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)"]}
{"id": "executable_simple_13", "question": "\u6211\u67098000\u7f8e\u5143\uff0c\u6253\u7b97\u5b58\u5165\u4e00\u500b\u5e74\u5229\u7387\u70ba4\uff05\u7684\u5132\u84c4\u5e33\u6236\u3002\u6211\u4e0d\u6703\u572815\u5e74\u5167\u52d5\u7528\u5b83\u3002\u6211\u5f88\u597d\u5947\u9019\u7b46\u6295\u8cc7\u5728\u90a3\u4e4b\u5f8c\u7684\u672a\u4f86\u50f9\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b\u55ce\uff1f", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_future_value(present_value=8000, interest_rate=0.04, periods=15)"]}
{"id": "executable_simple_14", "question": "\u4f5c\u70ba\u6211\u7684\u6578\u64da\u5206\u6790\u9805\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u6211\u88ab\u8981\u6c42\u6aa2\u67e5\u904e\u53bb\u4e00\u500b\u6708\u7684\u6eab\u5ea6\u8da8\u52e2\u3002\u6211\u5df2\u7d93\u6536\u96c6\u4e86\u4e00\u7d44\u6bcf\u65e5\u6eab\u5ea6\u8b80\u6578\uff0c\u9700\u8981\u9032\u884c\u89e3\u8b80\u3002\u6578\u64da\u96c6\u5305\u62ec\u5f9e\u651d\u6c0f22\u5ea6\u523080\u5ea6\u7684\u6eab\u5ea6\uff0c\u6bcf\u5929\u589e\u52a02\u5ea6\u3002\u70ba\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u6574\u9ad4\u6c23\u5019\u6a21\u5f0f\uff0c\u4f60\u80fd\u8a08\u7b97\u51fa\u9019\u6bb5\u6642\u9593\u7684\u5e73\u5747\u6eab\u5ea6\u55ce\uff1f", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])"]}
{"id": "executable_simple_15", "question": "\u6211\u6b63\u5728\u64b0\u5beb\u4e00\u4efd\u95dc\u65bc\u4e00\u4f4d\u7c43\u7403\u9078\u624b\u6574\u500b\u8cfd\u5b63\u5e73\u5747\u8868\u73fe\u7684\u5831\u544a\u3002\u6211\u6240\u64c1\u6709\u7684\u6578\u64da\u5305\u62ec\u4ed6\u5728\u6bcf\u5834\u6bd4\u8cfd\u4e2d\u5f97\u5206\uff1a15\u300120\u300125\u300130\u300135\u300140\u300145\u300150\u300155\u300160\u300165\u300170\u300175\u300180\u300185\u300190\u300195\u3001100\u3001105\u3001110\u3001115\u3001120\u3001125\u3001130\u3001135\u3001140\u3001145\u3001150\u3001155\u3001160\u3002\u70ba\u4e86\u5b8c\u6210\u6211\u7684\u5206\u6790\uff0c\u6211\u9700\u8981\u8a08\u7b97\u6bcf\u5834\u6bd4\u8cfd\u7684\u5e73\u5747\u5f97\u5206\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_mean(numbers=[15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])"]}
{"id": "executable_simple_16", "question": "\u6211\u6b63\u5728\u958b\u767c\u4e00\u500b\u65b0\u7684\u52a0\u5bc6\u6f14\u7b97\u6cd5\uff0c\u76ee\u524d\u6211\u5c08\u6ce8\u65bc\u6392\u5217\u65b9\u9762\u3002\u6211\u9700\u8981\u77e5\u9053\u5982\u679c\u6211\u5f9e\u6a19\u6e96\u7684\u82f1\u6587\u5b57\u6bcd\u8868\u4e2d\u53d6\u51fa5\u500b\u5b57\u5143\uff0c\u6709\u591a\u5c11\u7a2e\u7368\u7279\u7684\u6392\u5217\u65b9\u5f0f\u3002\u9019\u500b\u8a08\u7b97\u5c0d\u65bc\u7406\u89e3\u52a0\u5bc6\u7684\u8907\u96dc\u6027\u81f3\u95dc\u91cd\u8981\u3002\u4f60\u80fd\u7528\u9019\u4e9b\u503c\u9032\u884c\u6392\u5217\u8a08\u7b97\u55ce\uff1f", "function": {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_permutations(n=26, k=5)"]}
{"id": "executable_simple_17", "question": "\u5728\u6211\u76ee\u524d\u5c0d\u690d\u7269\u57fa\u56e0\u7684\u7814\u7a76\u4e2d\uff0c\u6211\u6b63\u5728\u63a2\u7d22\u7279\u5b9a\u7269\u7a2e\u5167\u7684\u907a\u50b3\u591a\u6a23\u6027\u3002\u9019\u662f\u4e00\u9805\u4ee4\u4eba\u8457\u8ff7\u7684\u5de5\u4f5c\uff0c\u6211\u5df2\u7d93\u6210\u529f\u5206\u96e2\u51fa30\u500b\u7368\u7279\u7684\u57fa\u56e0\u3002\u6211\u7814\u7a76\u7684\u4e0b\u4e00\u6b65\u662f\u627e\u51fa\u5982\u679c\u6211\u6bcf\u6b21\u9078\u64c77\u500b\u57fa\u56e0\u9032\u884c\u66f4\u8a73\u7d30\u7684\u5206\u6790\uff0c\u53ef\u80fd\u7684\u7d44\u5408\u65b9\u5f0f\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u5f9e\u7e3d\u6578\u70ba30\u7684\u57fa\u56e0\u4e2d\u9078\u64c77\u500b\u7684\u4e0d\u540c\u6392\u5217\u7d44\u5408\u6578\u55ce\uff1f", "function": {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_permutations(n=30, k=7)"]}
{"id": "executable_simple_18", "question": "\u70ba\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u8207\u9019\u652f\u7279\u5b9a\u80a1\u7968\u76f8\u95dc\u7684\u6ce2\u52d5\u6027\u548c\u98a8\u96aa\uff0c\u6211\u9700\u8981\u8a08\u7b97\u904e\u53bb10\u500b\u4ea4\u6613\u65e5\u7684\u6bcf\u65e5\u6536\u76e4\u50f9\u7684\u6a19\u6e96\u5dee\u3002\u4ee5\u4e0b\u662f\u6211\u6536\u96c6\u5230\u7684\u6578\u64da\uff1a1000\u30012000\u30013000\u30014000\u30015000\u30017000\u30019000\u300115000\u300120000\u548c30000\u3002\u4f60\u80fd\u63d0\u4f9b\u9019\u4e9b\u6536\u76e4\u50f9\u7684\u6a19\u6e96\u5dee\u55ce\uff1f", "function": {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])"]}
{"id": "executable_simple_19", "question": "\u6211\u4e00\u76f4\u8ffd\u8e64\u4e00\u4f4d\u7c43\u7403\u904b\u52d5\u54e1\u5728\u904e\u53bb12\u5834\u6bd4\u8cfd\u4e2d\u7684\u5f97\u5206\u8868\u73fe\uff0c\u4ee5\u7372\u5f97\u4ed6\u7684\u4e00\u81f4\u6027\u3002\u4ed6\u5728\u6bcf\u5834\u6bd4\u8cfd\u4e2d\u5f97\u5206\u5982\u4e0b\uff1a30\u300120\u300125\u300112\u300159\u300123\u300164\u300121\u300167\u300112\u300123\u548c43\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u4e9b\u5f97\u5206\u7684\u6a19\u6e96\u5dee\uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u4ed6\u7684\u8868\u73fe\u7684\u8b8a\u7570\u6027\u548c\u53ef\u9810\u6e2c\u6027\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_standard_deviation(numbers=[30,20,25,12,59,23,64,21,67,12,23,43])"]}
{"id": "executable_simple_20", "question": "\u6211\u76ee\u524d\u6b63\u5728\u5f9e\u4e8b\u4e00\u500b\u5efa\u7bc9\u9805\u76ee\uff0c\u6211\u5011\u6b63\u5728\u8a2d\u8a08\u4e00\u500b\u65b0\u7684\u4e09\u89d2\u5f62\u516c\u5712\u3002\u6211\u5011\u6700\u7d42\u78ba\u5b9a\u4e86\u5c3a\u5bf8\uff0c\u8a08\u5283\u5e95\u90e8\u9577\u5ea6\u70ba500\u7c73\uff0c\u9ad8\u5ea6\u70ba300\u7c73\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u500b\u516c\u5712\u7684\u9762\u7a4d\u55ce\uff1f", "function": {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base of the triangle, in meters."}, "height": {"type": "integer", "description": "The height of the triangle, in meters."}}, "required": ["base", "height"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_triangle_area(base=500, height=300)"]}
{"id": "executable_simple_21", "question": "\u6211\u6b63\u5728\u8a2d\u8a08\u4e00\u5ea7\u4e09\u89d2\u5f62\u7684\u6c34\u58e9\uff0c\u4e26\u4e14\u5df2\u7d93\u78ba\u5b9a\u4e86\u5c3a\u5bf8\u3002\u5e95\u90e8\u5c07\u662f700\u7c73\uff0c\u9ad8\u5ea6\u5c07\u662f450\u7c73\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u5ea7\u6c34\u58e9\u8868\u9762\u7684\u7e3d\u9762\u7a4d\u3002\u4f60\u80fd\u5e6b\u6211\u7b97\u51fa\u9019\u4e9b\u5c3a\u5bf8\u4e0b\u7684\u9762\u7a4d\u55ce\uff1f", "function": {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base of the triangle, in meters."}, "height": {"type": "integer", "description": "The height of the triangle, in meters."}}, "required": ["base", "height"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_triangle_area(base=700, height=450)"]}
{"id": "executable_simple_22", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u9805\u5373\u5c07\u9032\u884c\u7684\u5546\u696d\u4ea4\u6613\u7684\u8ca1\u52d9\u5206\u6790\uff0c\u6211\u9700\u8981\u5c075,000\u6b50\u5143\u8f49\u63db\u6210\u65e5\u5143\u3002\u60a8\u80fd\u5426\u63d0\u4f9b\u6211\u4f7f\u7528\u7576\u524d\u532f\u7387\u8f49\u63db\u5f8c\u7684\u91d1\u984d\uff1f", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')"]}
{"id": "executable_simple_23", "question": "\u6211\u6709\u4e00\u4f4d\u5ba2\u6236\u6e96\u5099\u524d\u5f80\u82f1\u570b\u5ea6\u5047\uff0c\u4ed6\u5011\u5df2\u7d93\u9810\u7559\u4e863000\u7f8e\u5143\u7684\u9810\u7b97\u3002\u4ed6\u5011\u8981\u6c42\u6211\u6e05\u695a\u5730\u77e5\u9053\u4ed6\u5011\u5c07\u6703\u6709\u591a\u5c11\u82f1\u938a\uff0c\u4ee5\u4fbf\u4ed6\u5011\u53ef\u4ee5\u76f8\u61c9\u5730\u8a08\u5283\u4ed6\u5011\u7684\u958b\u652f\u3002\u4f60\u80fd\u5e6b\u6211\u5c073000\u7f8e\u5143\u8f49\u63db\u6210\u82f1\u938a\u55ce\uff1f", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["convert_currency(amount=3000, from_currency='USD', to_currency='GBP')"]}
{"id": "executable_simple_24", "question": "\u5728\u8655\u7406\u6211\u7684\u7269\u7406\u4f5c\u696d\u6642\uff0c\u6211\u4e00\u76f4\u5728\u7814\u7a76\u4e00\u500b\u7c92\u5b50\u5728\u76f4\u7dda\u8ecc\u8de1\u4e0a\u7684\u904b\u52d5\u3002\u65b9\u7a0b\u5f0ff(x) = 3t^2 + 2t + 1\u4ee3\u8868\u4e86\u7c92\u5b50\u96a8\u6642\u9593\u7684\u4f4d\u7f6e\u8b8a\u5316\u3002\u70ba\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u7c92\u5b50\u7684\u884c\u70ba\uff0c\u6211\u9700\u8981\u8a08\u7b97\u51fa\u5b83\u57285\u79d2\u6642\u7684\u901f\u5ea6\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u51fa\u4f4d\u7f6e\u51fd\u6578\u7684\u5c0e\u6578\uff0c\u627e\u51fa\u90a3\u4e00\u523b\u7684\u901f\u5ea6\u55ce\uff1f", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of. This should be in the format of python lambda function."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["estimate_derivative(function='lambda x: 3*x**2 + 2*x + 1', x=5)"]}
{"id": "executable_simple_25", "question": "\u6211\u6b63\u5728\u70ba\u4e00\u5bb6\u516c\u53f8\u9032\u884c\u8ca1\u52d9\u5206\u6790\uff0c\u8a66\u5716\u7406\u89e3\u4ed6\u5011\u6536\u5165\u589e\u9577\u7684\u8907\u96dc\u6027\u3002\u6536\u5165\u96a8\u6642\u9593\u8b8a\u5316\u7684\u51fd\u6578\u53ef\u4ee5\u7528\u6578\u5b78\u51fd\u6578\u4f86\u63cf\u8ff0\uff0c\u5177\u9ad4\u70baf(x) = 4x^3 + 3x^2 + 2x + 1\u3002\u6211\u76ee\u524d\u7684\u4efb\u52d9\u662f\u78ba\u5b9a\u8a72\u516c\u53f8\u5728\u7b2c7\u5e74\u6642\u6536\u5165\u8b8a\u5316\u7684\u901f\u7387\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u6536\u5165\u51fd\u6578\u7684\u5c0e\u6578\u55ce\uff1f", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of.This should be in the format of python lambda function."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["estimate_derivative(function='lambda x: 4*x**3 + 3*x**2 + 2*x + 1', x=7)"]}
{"id": "executable_simple_26", "question": "\u6211\u4e00\u76f4\u5728\u589e\u52a0\u6211\u7684\u4fda\u8a9e\u8a5e\u5f59\uff0c\u800c\u4e14\u6211\u7d93\u5e38\u5728\u5c0d\u8a71\u4e2d\u807d\u5230\u300clit\u300d\u9019\u500b\u8a5e\u3002\u9019\u4e0d\u662f\u6211\u719f\u6089\u7684\u8a5e\u5f59\uff0c\u6211\u5f88\u597d\u5947\u5b83\u7684\u610f\u601d\u3002\u4f60\u80fd\u5e6b\u6211\u5728Urban Dictionary\u4e0a\u627e\u51fa\u300clit\u300d\u7684\u542b\u7fa9\u55ce\uff1f", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["find_term_on_urban_dictionary(term=\"lit\")"]}
{"id": "executable_simple_27", "question": "\u5728\u807d\u6700\u65b0\u7684\u563b\u54c8\u97f3\u6a02\u6642\uff0c\u6211\u6ce8\u610f\u5230\u6b4c\u8a5e\u4e2d\u7d93\u5e38\u51fa\u73fe\u300cflex\u300d\u9019\u500b\u8a5e\u3002\u5b83\u4f3c\u4e4e\u88ab\u7528\u5728\u4e00\u7a2e\u8207\u6211\u719f\u6089\u7684\u50b3\u7d71\u610f\u7fa9\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\u70ba\u4e86\u66f4\u597d\u5730\u7406\u89e3\u9019\u500b\u4fda\u8a9e\uff0c\u4f60\u80fd\u5e6b\u6211\u67e5\u4e00\u4e0b\u300cflex\u300d\u5728\u563b\u54c8\u6587\u5316\u4e2d\u7684\u610f\u601d\u55ce\uff1f\u53ef\u4ee5\u5728Urban Dictionary\u4e0a\u67e5\u4e00\u4e0b\u55ce\uff1f", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["find_term_on_urban_dictionary(term=\"flex\")"]}
{"id": "executable_simple_28", "question": "\u6211\u6b63\u5728\u8a08\u5283\u4e00\u500b\u65b0\u7684\u85dd\u8853\u9805\u76ee - \u5728\u5e02\u4e2d\u5fc3\u7246\u58c1\u4e0a\u7684\u4e00\u500b\u5713\u5f62\u58c1\u756b\u3002\u5b83\u5c07\u975e\u5e38\u5927\uff0c\u534a\u5f91\u70ba15\u82f1\u5c3a\u3002\u70ba\u4e86\u78ba\u4fdd\u6211\u8cfc\u8cb7\u8db3\u5920\u7684\u6cb9\u6f06\u800c\u4e0d\u8d85\u652f\uff0c\u6211\u9700\u8981\u8a08\u7b97\u51fa\u9019\u500b\u5713\u7684\u9762\u7a4d\u3002\u4f60\u53ef\u4ee5\u5e6b\u6211\u8a08\u7b97\u55ce\uff1f", "function": {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["geometry_area_circle(radius=15)"]}
{"id": "executable_simple_29", "question": "\u6211\u6b63\u5728\u70ba\u5ba2\u6236\u7684\u5713\u5f62\u82b1\u5712\u8a2d\u8a08\u5de5\u4f5c\uff0c\u6211\u9700\u8981\u8a08\u7b97\u9700\u8981\u8a02\u8cfc\u591a\u5c11\u8349\u76ae\u3002\u82b1\u5712\u7684\u534a\u5f91\u662f20\u82f1\u5c3a\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b\u9762\u7a4d\u55ce\uff1f", "function": {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["geometry_area_circle(radius=20)"]}
{"id": "executable_simple_30", "question": "\u6211\u6b63\u5728\u64b0\u5beb\u4e00\u7bc7\u95dc\u65bcCOVID-19\u60c5\u6cc1\u7684\u6587\u7ae0\uff0c\u91cd\u9ede\u662f\u5df4\u897f\u6301\u7e8c\u7684\u61c9\u5c0d\u63aa\u65bd\u4ee5\u53ca\u5b83\u5c0d\u7576\u5730\u4eba\u53e3\u7684\u5f71\u97ff\u3002\u6e96\u78ba\u7684\u6578\u64da\u5c0d\u6211\u7684\u5206\u6790\u81f3\u95dc\u91cd\u8981\u3002\u4f60\u80fd\u7d66\u6211\u5df4\u897f\u76ee\u524d\u6d3b\u8e8d\u7684COVID-19\u75c5\u4f8b\u6578\u64da\u55ce\uff1f", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='Brazil')"]}
{"id": "executable_simple_31", "question": "\u6211\u76ee\u524d\u6b63\u5728\u7de8\u5236\u4e00\u4efd\u6709\u95dc\u5404\u570bCOVID-19\u72c0\u6cc1\u7684\u5831\u544a\uff0c\u6211\u9700\u8981\u5305\u62ec\u897f\u73ed\u7259\u6700\u65b0\u7684\u6d3b\u8e8d\u75c5\u4f8b\u6578\u5b57\u3002\u4f60\u80fd\u5e6b\u6211\u53d6\u5f97\u897f\u73ed\u7259\u7684\u6700\u65b0\u6d3b\u8e8d\u75c5\u4f8b\u6578\u5b57\u55ce\uff1f", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='Spain')"]}
{"id": "executable_simple_32", "question": "\u6211\u76ee\u524d\u6b63\u5728\u7de8\u5236\u4e00\u4efd\u95dc\u65bc\u79d1\u6280\u884c\u696d\u5404\u4e3b\u8981\u53c3\u8207\u8005\u7684\u5831\u544a\uff0c\u4e26\u4e14\u6b63\u5728\u7814\u7a76\u4e00\u4e9b\u6700\u71b1\u9580\u80a1\u7968\u7684\u8d77\u6e90\u548c\u6240\u6709\u6b0a\u3002\u860b\u679c\u516c\u53f8\u7684\u80a1\u7968'AAPL'\u4e00\u76f4\u662f\u6211\u95dc\u6ce8\u7684\u7126\u9ede\uff0c\u5c0d\u65bc\u6211\u7684\u5206\u6790\u4f86\u8aaa\uff0c\u78ba\u8a8d\u8a72\u80a1\u7968\u4ee3\u78bc\u4e0b\u4ea4\u6613\u7684\u516c\u53f8\u7684\u6b63\u78ba\u540d\u7a31\u81f3\u95dc\u91cd\u8981\u3002\u60a8\u80fd\u63d0\u4f9b\u7d66\u6211'AAPL'\u7684\u516c\u53f8\u540d\u7a31\u55ce\uff1f", "function": {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_company_name_by_stock_name(stock_name='AAPL')"]}
{"id": "executable_simple_33", "question": "\u6211\u6b63\u5728\u64f4\u5927\u6211\u7684\u6295\u8cc7\u7d44\u5408\uff0c\u4e26\u5bc6\u5207\u95dc\u6ce8\u5e7e\u5bb6\u79d1\u6280\u80a1\u3002'GOOGL'\u986f\u793a\u51fa\u6709\u524d\u666f\u7684\u8da8\u52e2\uff0c\u6211\u6b63\u5728\u8003\u616e\u6295\u8cc7\u3002\u4f46\u662f\uff0c\u6211\u60f3\u8981\u5c0d\u6211\u7684\u7814\u7a76\u505a\u8db3\u5920\u7684\u6e96\u5099\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211'GOOGL'\u4ee3\u8868\u7684\u516c\u53f8\u540d\u7a31\u55ce\uff1f", "function": {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_company_name_by_stock_name(stock_name='GOOGL')"]}
{"id": "executable_simple_34", "question": "\u6211\u5011\u4e00\u76f4\u5728\u8ffd\u8e64\u53ef\u80fd\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u800c\u201c192.168.1.1\u201d\u5728\u6211\u5011\u7684\u65e5\u8a8c\u4e2d\u4e0d\u65b7\u51fa\u73fe\u3002\u6211\u9700\u8981\u627e\u51fa\u9019\u500bIP\u7684\u5730\u7406\u4f86\u6e90\u3002\u4f60\u80fd\u5920\u78ba\u5b9a\u9019\u500b\u5730\u5740\u7684\u7def\u5ea6\u548c\u7d93\u5ea6\u55ce\uff1f", "function": {"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_coordinate_by_ip_address(ip_address='192.168.1.1')"]}
{"id": "executable_simple_35", "question": "\u4f60\u80fd\u8ffd\u8e64\u9019\u500b\u6211\u64d4\u5fc3\u7684IP\u5730\u5740\u7684\u7def\u5ea6\u548c\u7d93\u5ea6\u55ce\uff1f\u5b83\u662f172.16.254.1\u3002\u6211\u4e00\u76f4\u5728\u76e3\u63a7\u7db2\u7d61\uff0c\u9019\u500bIP\u5730\u5740\u4e00\u76f4\u51fa\u73fe\u4e00\u4e9b\u5947\u602a\u7684\u6d3b\u52d5\u3002", "function": {"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_coordinate_by_ip_address(ip_address='172.16.254.1')"]}
{"id": "executable_simple_36", "question": "\u6211\u6709\u4e00\u4f4d\u5ba2\u6236\u8a08\u5283\u524d\u5f80\u5df4\u9ece\u65c5\u884c\uff0c\u4ed6\u5011\u975e\u5e38\u6ce8\u91cd\u7d30\u7bc0\u3002\u4ed6\u5011\u60f3\u8981\u77e5\u9053\u5df4\u9ece\u7684\u7cbe\u78ba\u7def\u5ea6\u548c\u7d93\u5ea6\uff0c\u4ee5\u4fbf\u7cbe\u78ba\u898f\u5283\u884c\u7a0b\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u8a62\u5df4\u9ece\u7684\u5730\u7406\u5ea7\u6a19\u55ce\uff1f", "function": {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "dict", "properties": {"city_name": {"type": "string", "description": "The name of the city, such as 'Rome'."}}, "required": ["city_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_coordinates_from_city(city_name='Paris')"]}
{"id": "executable_simple_37", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u9805\u91ce\u751f\u52d5\u7269\u7814\u7a76\u8a08\u5283\uff0c\u8a72\u8a08\u5283\u6d89\u53ca\u8ffd\u8e64\u4e00\u7a2e\u9ce5\u985e\u7684\u9077\u5f99\u6a21\u5f0f\uff0c\u9019\u7a2e\u9ce5\u985e\u5df2\u77e5\u6703\u7d93\u904e\u5404\u500b\u57ce\u5e02\u3002\u6211\u7684\u7814\u7a76\u7684\u4e0b\u4e00\u968e\u6bb5\u5c07\u805a\u7126\u65bc\u5b83\u5011\u5728\u958b\u7f85\u7684\u6d3b\u52d5\u3002\u70ba\u4e86\u78ba\u4fdd\u6211\u7684\u8ffd\u8e64\u8a2d\u5099\u7684\u7cbe\u78ba\u6027\uff0c\u6211\u9700\u8981\u958b\u7f85\u7684\u6e96\u78ba\u7def\u5ea6\u548c\u7d93\u5ea6\u5750\u6a19\u3002\u4f60\u80fd\u63d0\u4f9b\u958b\u7f85\u7684\u9019\u4e9b\u8a73\u7d30\u4fe1\u606f\u55ce\uff1f", "function": {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "dict", "properties": {"city_name": {"type": "string", "description": "The name of the city, such as 'Rome'."}}, "required": ["city_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_coordinates_from_city(city_name='Cairo')"]}
{"id": "executable_simple_38", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u9805\u95dc\u65bcCOVID-19\u5f71\u97ff\u7684\u7814\u7a76\uff0c\u4e26\u5c08\u6ce8\u65bc\u5df4\u897f\u7684\u60c5\u6cc1\u3002\u6211\u9700\u8981\u6700\u65b0\u7684\u6578\u64da\uff0c\u95dc\u65bc\u5df4\u897f\u56e0\u75c5\u6bd2\u6b7b\u4ea1\u7684\u7e3d\u6578\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u9019\u4e9b\u4fe1\u606f\u55ce\uff1f", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_covid_death_by_country(country='Brazil')"]}
{"id": "executable_simple_39", "question": "\u6211\u662f\u4e00\u540d\u6d41\u884c\u75c5\u5b78\u5bb6\uff0c\u6b63\u5728\u8ffd\u8e64COVID-19\u7684\u5f71\u97ff\uff0c\u76ee\u524d\u6211\u5c08\u6ce8\u65bc\u5370\u5ea6\u7684\u60c5\u6cc1\u3002\u6211\u9700\u8981\u6700\u65b0\u7684\u6b7b\u4ea1\u4eba\u6578\u6578\u64da\u3002\u4f60\u80fd\u7d66\u6211\u5370\u5ea6COVID\u6b7b\u4ea1\u7e3d\u4eba\u6578\u7684\u6700\u65b0\u6578\u64da\u55ce\uff1f", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_covid_death_by_country(country='India')"]}
{"id": "executable_simple_40", "question": "\u6211\u76ee\u524d\u6b63\u5728\u88fd\u4f5c\u4e00\u5f35\u8a73\u7d30\u7684\u57ce\u5e02\u5730\u5716\uff0c\u6211\u9700\u8981\u6e2c\u91cf\u5169\u500b\u95dc\u9375\u4f4d\u7f6e\u4e4b\u9593\u7684\u8ddd\u96e2\u3002\u7b2c\u4e00\u500b\u4f4d\u7f6e\u7684\u5ea7\u6a19\u662f(45.76, 4.85)\uff0c\u7b2c\u4e8c\u500b\u4f4d\u7f6e\u662f(48.85, 2.35)\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u51fa\u9019\u5169\u9ede\u4e4b\u9593\u7684\u8ddd\u96e2\u55ce\uff1f", "function": {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_distance(pointA=(45.76, 4.85), pointB=(48.85, 2.35))"]}
{"id": "executable_simple_41", "question": "\u5728\u6211\u5728\u68ee\u6797\u9032\u884c\u7530\u91ce\u8abf\u67e5\u671f\u9593\uff0c\u6211\u4e00\u76f4\u5728\u5bc6\u5207\u76e3\u6e2c\u67d0\u7a2e\u52d5\u7269\u7684\u79fb\u52d5\u6a21\u5f0f\u3002\u6700\u8fd1\uff0c\u6211\u6ce8\u610f\u5230\u5b83\u88ab\u767c\u73fe\u7684\u5169\u500b\u7279\u5b9a\u5730\u9ede\u3002\u7b2c\u4e00\u500b\u4f4d\u7f6e\u7684\u5750\u6a19\u70ba\uff0832.71\uff0c-117.16\uff09\uff0c\u7b2c\u4e8c\u500b\u4f4d\u7f6e\u70ba\uff0834.05\uff0c-118.25\uff09\u3002\u70ba\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u5b83\u7684\u6d3b\u52d5\u7bc4\u570d\uff0c\u6211\u9700\u8981\u8a08\u7b97\u5b83\u5728\u9019\u5169\u500b\u9ede\u4e4b\u9593\u79fb\u52d5\u7684\u8ddd\u96e2\u3002\u4f60\u80fd\u5e6b\u6211\u4f7f\u7528\u6211\u63d0\u4f9b\u7684\u5169\u500b\u4f4d\u7f6e\u7684\u5750\u6a19\u4f86\u78ba\u5b9a\u9019\u500b\u8ddd\u96e2\u55ce\uff1f", "function": {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_distance(pointA=(32.71, -117.16), pointB=(34.05, -118.25))"]}
{"id": "executable_simple_42", "question": "\u6211\u6b63\u5728\u6df1\u5165\u7814\u7a76\u8cbb\u6c0f\u6578\u5217\uff0c\u6211\u9700\u8981\u5206\u6790\u524d20\u500b\u6578\u5b57\u4ee5\u4f9b\u6211\u7684\u7814\u7a76\u4f7f\u7528\u3002\u4f60\u80fd\u70ba\u6211\u7522\u751f\u55ce\uff1f", "function": {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_fibonacci_sequence(n=20)"]}
{"id": "executable_simple_43", "question": "\u70ba\u4e86\u6211\u7684\u96fb\u8166\u79d1\u5b78\u5c08\u6848\uff0c\u6211\u9700\u8981\u7522\u751f\u8cbb\u6c0f\u6578\u5217\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u9019\u500b\u4efb\u52d9\u9700\u8981\u8a08\u7b97\u524d50\u500b\u6578\u5b57\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u55ce\uff1f", "function": {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_fibonacci_sequence(n=50)"]}
{"id": "executable_simple_44", "question": "\u6211\u88ab\u6307\u6d3e\u76e3\u63a7\u7af6\u722d\u5c0d\u624b\u7684\u50f9\u683c\uff0c\u6211\u9700\u8981\u5bc6\u5207\u95dc\u6ce8\u4e9e\u99ac\u905c\u4e0a\u5217\u51fa\u7684\u67d0\u500b\u7522\u54c1\u3002\u5b83\u7684ASIN\u662f'B08PPDJWC8'\u3002\u4f60\u80fd\u5e6b\u6211\u53d6\u5f97\u9019\u500b\u7522\u54c1\u7684\u6700\u65b0\u50f9\u683c\u55ce\uff1f", "function": {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_price_by_amazon_ASIN(ASIN='B08PPDJWC8')"]}
{"id": "executable_simple_45", "question": "\u6211\u8ca0\u8cac\u7ba1\u7406\u6211\u5011\u7db2\u4e0a\u5546\u5e97\u7684\u5eab\u5b58\uff0c\u800c\u4e14\u8981\u5bc6\u5207\u8ffd\u8e64\u6211\u5011\u7af6\u722d\u5c0d\u624b\u7684\u50f9\u683c\uff0c\u7279\u5225\u662f\u5728\u4e9e\u99ac\u905c\u4e0a\u3002\u6211\u5011\u76ee\u524d\u6b63\u5728\u92b7\u552e\u4e00\u6b3e\u4e5f\u5728\u90a3\u88e1\u4e0a\u67b6\u7684\u7522\u54c1\uff0c\u6211\u60f3\u78ba\u4fdd\u6211\u5011\u7684\u50f9\u683c\u5177\u6709\u7af6\u722d\u529b\u3002\u4f60\u80fd\u627e\u51fa\u4e9e\u99ac\u905c\u7522\u54c1ASIN\u70ba'B08PPDJWC8'\u7684\u6700\u65b0\u50f9\u683c\u55ce\uff1f", "function": {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_price_by_amazon_ASIN(ASIN='B08PPDJWC8')"]}
{"id": "executable_simple_46", "question": "\u6211\u6b63\u5728\u6e96\u5099\u660e\u5929\u7684\u6578\u5b78\u8ab2\uff0c\u4e3b\u984c\u662f\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u9700\u8981\u60f3\u51fa\u4e00\u4e9b\u6e05\u6670\u7684\u4f8b\u5b50\u3002\u4f60\u80fd\u5e6b\u6211\u628a4567\u9019\u500b\u6578\u5b57\u5206\u89e3\u6210\u5b83\u7684\u8cea\u56e0\u6578\u55ce\uff1f\u9019\u5c07\u662f\u5411\u5b78\u751f\u5c55\u793a\u9019\u500b\u6982\u5ff5\u7684\u597d\u65b9\u6cd5\u3002", "function": {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_prime_factors(number=4567)"]}
{"id": "executable_simple_47", "question": "\u6211\u6b63\u5728\u958b\u767c\u4e00\u500b\u65b0\u7684\u52a0\u5bc6\u6f14\u7b97\u6cd5\uff0c\u76ee\u524d\u7684\u91cd\u9ede\u662f\u8cea\u56e0\u6578\u5206\u89e3\u3002\u70ba\u4e86\u6e2c\u8a66\u6f14\u7b97\u6cd5\u7684\u6709\u6548\u6027\uff0c\u6211\u9700\u8981\u8a08\u7b97\u6578\u5b577891\u7684\u8cea\u56e0\u6578\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_prime_factors(number=7891)"]}
{"id": "executable_simple_48", "question": "\u6211\u6b63\u5728\u64b0\u5beb\u4e00\u7bc7\u7522\u54c1\u8a55\u8ad6\u6587\u7ae0\uff0c\u4e26\u4e14\u5c08\u6ce8\u65bc\u4e9e\u99ac\u905c\u4e0a\u7684\u4e00\u500b\u7279\u5b9a\u5546\u54c1\u3002\u5b83\u7684ASIN\u70ba'B08BHXG144'\u3002\u6211\u9700\u8981\u5728\u6587\u7ae0\u4e2d\u5305\u542b\u76ee\u524d\u7684\u50f9\u683c\uff0c\u6240\u4ee5\u4f60\u80fd\u5e6b\u6211\u67e5\u8a62\u5b83\u7684\u552e\u50f9\u55ce\uff1f", "function": {"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_product_name_by_amazon_ASIN(ASIN='B08BHXG144')"]}
{"id": "executable_simple_49", "question": "\u5728\u700f\u89bd\u4e9e\u99ac\u905c\u6642\uff0c\u6211\u9047\u5230\u4e86\u4e00\u6b3e\u5f15\u8d77\u6211\u7684\u8208\u8da3\u7684\u7522\u54c1\uff0c\u4f46\u6211\u6c92\u6709\u8a18\u4f4f\u5b83\u7684\u540d\u7a31\u3002ASIN\u662f'B07ZPKBL9V'\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u9019\u6b3e\u7522\u54c1\u7684\u540d\u7a31\u55ce\uff1f", "function": {"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_product_name_by_amazon_ASIN(ASIN='B07ZPKBL9V')"]}
{"id": "executable_simple_50", "question": "\u6211\u6b63\u5728\u8003\u616e\u5f9e\u4e9e\u99ac\u905c\u8cfc\u8cb7\u4e00\u4ef6\u7522\u54c1\uff0c\u5728\u505a\u51fa\u6c7a\u5b9a\u4e4b\u524d\uff0c\u6211\u60f3\u67e5\u770b\u5b83\u7684\u8a55\u5206\u3002\u8a72\u7522\u54c1\u7684ASIN\u70ba'B08BHXG144'\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u9019\u500b\u4fe1\u606f\u55ce\uff1f", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_rating_by_amazon_ASIN(ASIN='B08BHXG144')"]}
{"id": "executable_simple_51", "question": "\u6211\u6b63\u5728\u8003\u616e\u5728\u4e9e\u99ac\u905c\u8cfc\u8cb7\u4e00\u500b\u6211\u627e\u5230\u7684\u7522\u54c1\uff0c\u4f46\u6211\u60f3\u5728\u6211\u505a\u51fa\u6c7a\u5b9a\u4e4b\u524d\u78ba\u4fdd\u5b83\u53d7\u5230\u5176\u4ed6\u4eba\u7684\u597d\u8a55\u3002\u5b83\u7684ASIN\u70ba'B07ZPKBL9V'\u3002\u4f60\u80fd\u544a\u8a34\u6211\u9019\u500b\u5546\u54c1\u76ee\u524d\u7684\u5e73\u5747\u5ba2\u6236\u8a55\u5206\u662f\u591a\u5c11\u55ce\uff1f", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_rating_by_amazon_ASIN(ASIN='B07ZPKBL9V')"]}
{"id": "executable_simple_52", "question": "\u6211\u4e00\u76f4\u5728\u8ffd\u8e64\u860b\u679c\u80a1\u7968\u7684\u8868\u73fe\uff0c\u6211\u6709\u8208\u8da3\u6df1\u5165\u7814\u7a76\u5b83\u7684\u6b77\u53f2\u3002\u6211\u60f3\u770b\u770b\u6bcf\u6708\u7684\u8da8\u52e2\uff0c\u4e5f\u60f3\u6aa2\u67e5\u6700\u8fd1\u662f\u5426\u6709\u80a1\u7968\u62c6\u5206\u6216\u767c\u653e\u80a1\u606f\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u8a62AAPL\u7684\u6b77\u53f2\u8a18\u9304\u55ce\uff1f\u8acb\u6309\u6708\u9593\u9694\u5217\u51fa\u80a1\u7968\u62c6\u5206\u548c\u80a1\u606f\u4fe1\u606f\u3002", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='true')"]}
{"id": "executable_simple_53", "question": "\u6211\u9700\u8981\u5206\u6790\u5fae\u8edf\u904e\u53bb\u5e7e\u500b\u6708\u7684\u80a1\u7968\u8868\u73fe\uff0c\u4f46\u8981\u6392\u9664\u80a1\u606f\u6216\u80a1\u7968\u5206\u5272\u7684\u5e72\u64fe\u3002\u4f60\u80fd\u5426\u63d0\u4f9b\u80a1\u7968\u4ee3\u78bc\u70ba'MSFT'\u7684\u6bcf\u9031\u6b77\u53f2\u6578\u64da\uff0c\u4e26\u78ba\u4fdd\u5728\u6578\u64da\u96c6\u4e2d\u6392\u9664\u5206\u5272\u548c\u80a1\u606f\uff1f", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits='true')"]}
{"id": "executable_simple_54", "question": "\u6211\u9700\u8981\u67e5\u770b\u860b\u679c\u516c\u53f8\u80a1\u7968\u7684\u6700\u65b0\u50f9\u683c\u3002\u4f60\u80fd\u5e6b\u6211\u53d6\u5f97\u9019\u500b\u8cc7\u8a0a\u55ce\uff1f", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_stock_price_by_stock_name(stock_name='AAPL')"]}
{"id": "executable_simple_55", "question": "\u6211\u9700\u8981\u67e5\u8a62\u5fae\u8edf\u516c\u53f8\u80a1\u7968\u7684\u73fe\u50f9\u3002\u4f60\u80fd\u5e6b\u6211\u53d6\u5f97\u5fae\u8edf\u6700\u65b0\u7684\u80a1\u50f9\u55ce\uff1f", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_stock_price_by_stock_name(stock_name='MSFT')"]}
{"id": "executable_simple_56", "question": "\u6211\u76ee\u524d\u6b63\u6df1\u9677\u65bc\u4e00\u500b\u5730\u7406\u5c08\u6848\u4e2d\uff0c\u4e86\u89e3\u4e0d\u540c\u5ea7\u6a19\u7684\u6642\u5340\u662f\u81f3\u95dc\u91cd\u8981\u7684\u3002\u6211\u6709\u4e00\u500b\u7279\u5b9a\u7684\u4f4d\u7f6e\uff0c\u7d93\u5ea6\u70ba123.45\uff0c\u7def\u5ea6\u70ba-67.89\u3002\u6211\u9700\u8981\u78ba\u5b9a\u5b83\u6240\u5728\u7684\u6642\u5340\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_time_zone_by_coord(long='123.45', lat='-67.89')"]}
{"id": "executable_simple_57", "question": "\u6211\u6b63\u5728\u8ffd\u8e64\u4e00\u500b\u98a8\u66b4\u7cfb\u7d71\uff0c\u70ba\u4e86\u6211\u7684\u5929\u6c23\u5831\u544a\uff0c\u6211\u9700\u8981\u6839\u64da\u98a8\u66b4\u76ee\u524d\u6240\u5728\u5730\u7684\u7576\u5730\u6642\u9593\u63d0\u4f9b\u66f4\u65b0\u3002\u76ee\u524d\uff0c\u98a8\u66b4\u4f4d\u65bc\u7def\u5ea635.22\uff0c\u7d93\u5ea6-80.75\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u9019\u500b\u5730\u9ede\u7684\u6642\u5340\u55ce\uff1f", "function": {"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_time_zone_by_coord(long='-80.75', lat='35.22')"]}
{"id": "executable_simple_58", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u9805\u6c23\u5019\u7814\u7a76\uff0c\u5c08\u6ce8\u65bc\u5317\u6975\u5730\u5340\u7684\u6eab\u5ea6\u8b8a\u5316\uff0c\u6211\u9700\u8981\u5317\u6975\u7684\u6700\u65b0\u6eab\u5ea6\u8b80\u6578\u3002\u4f60\u80fd\u5426\u4f7f\u7528Open-Meteo API\u70ba\u6211\u53d6\u5f97\u7576\u524d\u7684\u5929\u6c23\u6578\u64da\uff0c\u7279\u5225\u662f\u572890.00\u7def\u5ea6\u548c0.00\u7d93\u5ea6\u7684\u4f4d\u7f6e\uff1f", "function": {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_weather_data(coordinates=[90.00, 0.00])"]}
{"id": "executable_simple_59", "question": "\u6211\u6b63\u5728\u7814\u7a76\u6492\u54c8\u62c9\u6c99\u6f20\u7684\u6c23\u5019\u8b8a\u5316\uff0c\u6211\u7684\u7814\u7a76\u7684\u4e00\u90e8\u5206\u9700\u8981\u5206\u6790\u7279\u5b9a\u4f4d\u7f6e\u7684\u5be6\u6642\u6eab\u5ea6\u6578\u64da\u3002\u6211\u9700\u8981\u8a2a\u554f\u7def\u5ea6\u70ba25.00\uff0c\u7d93\u5ea6\u70ba13.00\u7684\u6c99\u6f20\u67d0\u4e00\u9ede\u7684\u7576\u524d\u6eab\u5ea6\u3002\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u6211\u5011\u7684\u5929\u6c23\u6578\u64da\u6aa2\u7d22\u7cfb\u7d71\u5f9eOpen-Meteo API\u7372\u53d6\u9019\u4e9b\u5750\u6a19\u7684\u4fe1\u606f\u55ce\uff1f", "function": {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_weather_data(coordinates=[25.00, 13.00])"]}
{"id": "executable_simple_60", "question": "\u5728\u6211\u5c0d\u6700\u8fd1\u7684\u5b89\u5168\u6f0f\u6d1e\u9032\u884c\u8abf\u67e5\u6642\uff0c\u6211\u5df2\u7d93\u627e\u5230\u4e86\u4e00\u500b\u53ef\u7591\u7684IP\u5730\u5740\uff0c\u53ef\u80fd\u662f\u653b\u64ca\u7684\u4f86\u6e90\u3002\u8a72\u5730\u5740\u662f192.168.1.1\u3002\u70ba\u4e86\u7e2e\u5c0f\u6f5b\u5728\u99ed\u5ba2\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u6211\u9700\u8981\u627e\u51fa\u8207\u8a72IP\u76f8\u95dc\u806f\u7684\u90f5\u905e\u5340\u865f\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u9019\u4e9b\u4fe1\u606f\u55ce\uff1f", "function": {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_zipcode_by_ip_address(ip_address=\"192.168.1.1\")"]}
{"id": "executable_simple_61", "question": "\u6211\u6b63\u5728\u8ffd\u8e64\u6211\u5011\u516c\u53f8\u7db2\u8def\u4e0a\u7684\u4e00\u4e9b\u4e0d\u5c0b\u5e38\u7684\u6d3b\u52d5\uff0c\u6211\u9700\u8981\u627e\u51fa\u4f86\u6e90\u3002\u6709\u554f\u984c\u7684IP\u662f172.16.254.1\u3002\u4f60\u80fd\u627e\u51fa\u9019\u500bIP\u4f4d\u5740\u7684\u76f8\u95dc\u90f5\u905e\u5340\u865f\u55ce\uff1f", "function": {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_zipcode_by_ip_address(ip_address='172.16.254.1')"]}
{"id": "executable_simple_62", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u4e9b\u8cc7\u6599\u5206\u6790\uff0c\u9700\u8981\u5728\u904e\u7a0b\u4e2d\u9032\u884c\u77e9\u9663\u4e58\u6cd5\u3002\u6211\u624b\u4e0a\u6709\u7684\u77e9\u9663\u662f\uff1a\u7b2c\u4e00\u500b\u662f[[1, 2], [3, 4]]\uff0c\u7b2c\u4e8c\u500b\u662f[[5, 6], [7, 8]]\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u5169\u500b\u77e9\u9663\u7684\u4e58\u6cd5\u55ce\uff1f", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "dict", "properties": {"matA": {"type": "array", "description": "The first matrix.", "items": {"type": "array", "items": {"type": "integer"}}}, "matB": {"type": "array", "description": "The second matrix.", "items": {"type": "array", "items": {"type": "integer"}}}}, "required": ["matA", "matB"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])"]}
{"id": "executable_simple_63", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u500b\u8907\u96dc\u7684\u91cf\u5b50\u529b\u5b78\u6a21\u64ec\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u6d89\u53ca\u4e00\u4e9b\u7dda\u6027\u4ee3\u6578\u3002\u6211\u9700\u8981\u5c07\u5169\u500b\u77e9\u9663\u76f8\u4e58\u4f86\u9032\u884c\u6211\u7684\u8a08\u7b97\u3002\u7b2c\u4e00\u500b\u77e9\u9663\u662f[[2, 3], [4, 5]]\uff0c\u7b2c\u4e8c\u500b\u77e9\u9663\u662f[[6, 7], [8, 9]]\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u5169\u500b\u77e9\u9663\u76f8\u4e58\u7684\u7d50\u679c\u55ce\uff1f", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "dict", "properties": {"matA": {"type": "array", "description": "The first matrix.", "items": {"type": "array", "items": {"type": "integer"}}}, "matB": {"type": "array", "description": "The second matrix.", "items": {"type": "array", "items": {"type": "integer"}}}}, "required": ["matA", "matB"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["mat_mul(matA=[[2, 3], [4, 5]], matB=[[6, 7], [8, 9]])"]}
{"id": "executable_simple_64", "question": "\u6211\u6b63\u5728\u8655\u7406\u4e00\u500b\u7d44\u5408\u6578\u5b78\u554f\u984c\uff0c\u9047\u5230\u4e00\u500b\u9700\u8981\u8a08\u7b977\u7684\u968e\u4e58\u7684\u6b65\u9a5f\u3002\u4f60\u80fd\u5e6b\u6211\u5f97\u5230\u90a3\u500b\u7d50\u679c\u55ce\uff1f", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["math_factorial(n=7)"]}
{"id": "executable_simple_65", "question": "\u7576\u6211\u5728\u70ba\u6211\u7684\u7269\u7406\u8ab2\u63a2\u7a76\u4e00\u4e9b\u91cf\u5b50\u529b\u5b78\u554f\u984c\u6642\uff0c\u6211\u5076\u7136\u767c\u73fe\u4e86\u4e00\u500b\u7279\u5225\u5177\u6311\u6230\u6027\u7684\u65b9\u7a0b\u5f0f\u3002\u539f\u4f86\u6211\u9700\u8981\u8a08\u7b97\u6578\u5b5712\u7684\u968e\u4e58\u624d\u80fd\u7e7c\u7e8c\u6211\u7684\u8a08\u7b97\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b12\u7684\u968e\u4e58\u55ce\uff1f", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["math_factorial(n=12)"]}
{"id": "executable_simple_66", "question": "\u5728\u7814\u7a76\u53e4\u7f85\u99ac\u7684\u653f\u6cbb\u806f\u76df\u6642\uff0c\u6211\u767c\u73fe\u5728\u5169\u500b\u4e0d\u540c\u7684\u6642\u671f\uff0c\u53c3\u8b70\u9662\u7531450\u548c300\u540d\u6210\u54e1\u7d44\u6210\u3002\u70ba\u4e86\u9032\u4e00\u6b65\u5206\u6790\u6578\u64da\uff0c\u6211\u9700\u8981\u8a08\u7b97\u9019\u5169\u500b\u53c3\u8b70\u9662\u898f\u6a21\u7684\u6700\u5927\u516c\u7d04\u6578\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u9019\u4e9b\u6578\u5b57\u7684\u6700\u5927\u516c\u7d04\u6578\u55ce\uff1f", "function": {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["math_gcd(a=450, b=300)"]}
{"id": "executable_simple_67", "question": "\u5728\u9032\u884c\u57ce\u5e02\u898f\u5283\u9805\u76ee\u6642\uff0c\u6211\u6c7a\u5b9a\u4f7f\u7528\u7db2\u683c\u4f48\u5c40\u4f86\u8a2d\u8a08\u57ce\u5e02\u3002\u9019\u500b\u7db2\u683c\u662f\u57fa\u65bc\u8857\u5340\u7de8\u865f\uff0c\u9577\u5ea6\u8de8\u8d8a360\u500b\u8857\u5340\uff0c\u5bec\u5ea6\u8986\u84cb240\u500b\u8857\u5340\u3002\u70ba\u4e86\u78ba\u4fdd\u4f48\u5c40\u76e1\u53ef\u80fd\u9ad8\u6548\uff0c\u6211\u9700\u8981\u627e\u5230\u53ef\u4ee5\u5728\u5169\u500b\u7dad\u5ea6\u4e0a\u5747\u52fb\u4f7f\u7528\u7684\u6700\u5927\u8857\u5340\u5927\u5c0f\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u9019\u5169\u500b\u6578\u5b57\uff0c360\u548c240\u7684\u6700\u5927\u516c\u7d04\u6578\u55ce\uff1f\u9019\u5c07\u6709\u52a9\u65bc\u6211\u512a\u5316\u57ce\u5e02\u7684\u8857\u5340\u8a2d\u8a08\u3002", "function": {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["math_gcd(a=360, b=240)"]}
{"id": "executable_simple_68", "question": "\u5728\u5de5\u4f5c\u5ba4\u88e1\u70ba\u4e00\u9996\u65b0\u66f2\u5b50\u52aa\u529b\uff0c\u6211\u6709\u5169\u500b\u9f13\u5faa\u74b0\uff0c\u6211\u6b63\u5728\u8a66\u8457\u8b93\u5b83\u5011\u540c\u6b65\u3002\u5176\u4e2d\u4e00\u500b\u5faa\u74b0\u6bcf18\u62cd\u91cd\u8907\u4e00\u6b21\uff0c\u53e6\u4e00\u500b\u5247\u6bcf24\u62cd\u91cd\u8907\u4e00\u6b21\u3002\u6211\u9700\u8981\u627e\u51fa\u5b83\u5011\u5728\u591a\u5c11\u62cd\u5f8c\u6703\u5b8c\u7f8e\u5730\u5c0d\u9f4a\uff0c\u4ee5\u4fdd\u6301\u6b4c\u66f2\u4e2d\u7684\u7bc0\u594f\u4e00\u81f4\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u5169\u500b\u6578\u5b57\u7684\u6700\u5c0f\u516c\u500d\u6578\u55ce\uff1f", "function": {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["math_lcm(a=24, b=18)"]}
{"id": "executable_simple_69", "question": "\u6211\u76ee\u524d\u6b63\u5728\u70ba\u4e00\u500b\u7e41\u5fd9\u7684\u5341\u5b57\u8def\u53e3\u8a2d\u8a08\u4e00\u500b\u4ea4\u901a\u4fe1\u865f\u71c8\u7cfb\u7d71\uff0c\u6211\u5011\u6709\u5169\u500b\u71c8\u865f\u4f7f\u7528\u4e0d\u540c\u7684\u8a08\u6642\u5668\u3002\u5176\u4e2d\u4e00\u500b\u6bcf35\u79d2\u5faa\u74b0\u4e00\u6b21\uff0c\u53e6\u4e00\u500b\u6bcf45\u79d2\u5faa\u74b0\u4e00\u6b21\u3002\u70ba\u4e86\u6700\u4f73\u7684\u4ea4\u901a\u6d41\u91cf\uff0c\u6211\u9700\u8981\u540c\u6b65\u9019\u4e9b\u71c8\u865f\uff0c\u8b93\u5b83\u5011\u540c\u6642\u6539\u8b8a\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u5169\u500b\u5faa\u74b0\u6642\u9593\u7684\u6700\u5c0f\u516c\u500d\u6578\u55ce\uff1f", "function": {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["math_lcm(a=45, b=35)"]}
{"id": "executable_simple_70", "question": "\u6211\u76ee\u524d\u6b63\u5728\u8207\u4e00\u4f4d\u5ba2\u6236\u5408\u4f5c\uff0c\u4ed6\u6b63\u5728\u5c0b\u627e\u8cfc\u8cb7\u4ed6\u5011\u7684\u7b2c\u4e00\u5957\u623f\u5c4b\uff0c\u6211\u5011\u6b63\u5728\u8a66\u5716\u5236\u5b9a\u4ed6\u5011\u7684\u9810\u7b97\u3002\u4ed6\u5011\u7684\u76ee\u6a19\u662f\u4e00\u68df\u50f9\u503c35\u842c\u7f8e\u5143\u7684\u7f8e\u9e97\u90ca\u5340\u623f\u5c4b\u3002\u70ba\u4e86\u8cfc\u8cb7\u9019\u5957\u623f\u5c4b\uff0c\u4ed6\u5011\u6b63\u5728\u8003\u616e\u4e00\u500b30\u5e74\u671f\u7684\u6309\u63ed\u8cb8\u6b3e\uff0c\u5229\u7387\u7d04\u70ba3.5\uff05\u3002\u60a8\u80fd\u5e6b\u52a9\u6211\u5011\u6839\u64da\u9019\u4e9b\u7d30\u7bc0\u8a08\u7b97\u51fa\u4ed6\u5011\u7684\u6bcf\u6708\u4ed8\u6b3e\u91d1\u984d\u55ce\uff1f", "function": {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount of the loan."}, "interest_rate": {"type": "float", "description": "The interest rate of the loan, ranging from 0 to 1."}, "loan_period": {"type": "integer", "description": "The period of the loan, in years."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)"]}
{"id": "executable_simple_71", "question": "\u6211\u6b63\u5728\u8207\u4e00\u5c0d\u592b\u5a66\u5408\u4f5c\uff0c\u4ed6\u5011\u627e\u5230\u4e86\u4e00\u500b\u50f9\u503c\u70ba$500,000\u7684\u5922\u60f3\u5bb6\u5712\uff0c\u4e26\u6b63\u5728\u8003\u616e\u4ed6\u5011\u7684\u878d\u8cc7\u9078\u64c7\u3002\u70ba\u4e86\u5e6b\u52a9\u4ed6\u5011\uff0c\u6211\u9700\u8981\u8a08\u7b97\u4ed6\u5011\u7684\u6bcf\u6708\u6309\u63ed\u4ed8\u6b3e\u3002\u4ed6\u5011\u6b63\u5728\u8003\u616e\u4e00\u7b4625\u5e74\u671f\u30014.5%\u7684\u8cb8\u6b3e\u3002\u4f60\u80fd\u8a08\u7b97\u4e00\u4e0b\u4ed6\u5011\u57284.5%\u7684\u5229\u7387\u4e0b\uff0c25\u5e74\u671f\u9593\u8cb8\u6b3e$500,000\u7684\u6bcf\u6708\u4ed8\u6b3e\u91d1\u984d\u55ce\uff1f", "function": {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount of the loan."}, "interest_rate": {"type": "float", "description": "The interest rate of the loan, ranging from 0 to 1."}, "loan_period": {"type": "integer", "description": "The period of the loan, in years."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["mortgage_calculator(loan_amount=500000, interest_rate=0.045, loan_period=25)"]}
{"id": "executable_simple_72", "question": "\u6211\u6b63\u5728\u6e96\u5099\u660e\u5929\u7684\u4ee3\u6578\u8ab2\uff0c\u4e3b\u984c\u662f\u95dc\u65bc\u4e8c\u6b21\u65b9\u7a0b\u5f0f\uff0c\u6211\u60f3\u8981\u5411\u5b78\u751f\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u4e00\u500b\u4f8b\u5b50\u8a08\u7b97\u6839\u6578\u3002\u8b93\u6211\u5011\u4f7f\u7528\u65b9\u7a0b\u5f0f3x^2 + 7x - 10 = 0\u3002\u6211\u9700\u8981\u627e\u51fa\u9019\u500b\u65b9\u7a0b\u5f0f\u7684\u6839\u6578\uff0c\u4fc2\u6578\u70ba3\u7684a\u3001\u4fc2\u6578\u70ba7\u7684b\uff0c\u4ee5\u53ca\u4fc2\u6578\u70ba-10\u7684c\u3002\u6211\u5011\u53ef\u4ee5\u9032\u884c\u8a08\u7b97\u904e\u7a0b\u4f86\u5f97\u5230\u6839\u6578\u55ce\uff1f", "function": {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["quadratic_roots(a=3, b=7, c=-10)"]}
{"id": "executable_simple_73", "question": "\u6211\u6b63\u5728\u7814\u7a76\u4e00\u500b\u53ef\u4ee5\u89e3\u6c7a\u4e8c\u6b21\u65b9\u7a0b\u5f0f\u7684\u7a0b\u5f0f\uff0c\u6211\u9700\u8981\u6e2c\u8a66\u4e00\u500b\u8a08\u7b97\u6839\u7684\u51fd\u6578\u3002\u73fe\u5728\uff0c\u6211\u9700\u8981\u627e\u51fa\u65b9\u7a0b\u5f0f5x^2 - 8x + 2 = 0\u7684\u6839\u3002\u6211\u5c07\u4f7f\u7528\u4fc2\u65785\u4f5c\u70baa\uff0c-8\u4f5c\u70bab\uff0c2\u4f5c\u70bac\u3002\u6211\u5011\u53ef\u4ee5\u904b\u884c\u9019\u500b\u51fd\u6578\u4f86\u67e5\u770b\u6839\u662f\u4ec0\u9ebc\u55ce\uff1f", "function": {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["quadratic_roots(a=5, b=-8, c=2)"]}
{"id": "executable_simple_74", "question": "\u6211\u6b63\u5728\u6df1\u5165\u9032\u884c\u9019\u500b\u4eba\u53e3\u7d71\u8a08\u5206\u6790\u9805\u76ee\uff0c\u6211\u6709\u4e00\u5806\u90f5\u653f\u7de8\u78bc\u8981\u8655\u7406\u3002\u73fe\u5728\uff0c\u6211\u5c08\u6ce8\u65bc90210\uff0c\u6211\u9700\u8981\u5c07\u5b83\u8207\u5b83\u6240\u5c6c\u7684\u57ce\u5e02\u5339\u914d\u3002\u4f60\u80fd\u544a\u8a34\u621190210\u90f5\u653f\u7de8\u78bc\u5c0d\u61c9\u7684\u57ce\u5e02\u540d\u55ce\uff1f", "function": {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "dict", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the city."}}, "required": ["zipcode"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["retrieve_city_based_on_zipcode(zipcode='90210')"]}
{"id": "executable_simple_75", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u500b\u9805\u76ee\uff0c\u5206\u6790\u5404\u500b\u57ce\u5e02\u7684\u4eba\u53e3\u5206\u5e03\u6a21\u5f0f\u3002\u904e\u7a0b\u7684\u4e00\u90e8\u5206\u662f\u5c07\u90f5\u905e\u5340\u865f\u8207\u76f8\u61c9\u7684\u57ce\u5e02\u9032\u884c\u5339\u914d\u3002\u73fe\u5728\uff0c\u6211\u9700\u8981\u627e\u51fa\u90f5\u905e\u5340\u865f'10001'\u5c6c\u65bc\u54ea\u500b\u57ce\u5e02\u3002\u4f60\u80fd\u544a\u8a34\u6211\u9019\u500b\u90f5\u905e\u5340\u865f\u6240\u5c0d\u61c9\u7684\u57ce\u5e02\u540d\u7a31\u55ce\uff1f", "function": {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "dict", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the city."}}, "required": ["zipcode"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["retrieve_city_based_on_zipcode(zipcode='10001')"]}
{"id": "executable_simple_76", "question": "\u6211\u6b63\u5728\u7814\u7a76\u4e00\u500b\u95dc\u65bc\u4e0d\u540c\u570b\u5bb6\u5982\u4f55\u6176\u795d\u5047\u65e5\u4ee5\u53ca\u9019\u4e9b\u6176\u795d\u6d3b\u52d5\u5982\u4f55\u6f14\u8b8a\u7684\u9805\u76ee\u3002\u76ee\u524d\uff0c\u6211\u6b63\u5728\u5c08\u6ce8\u65bc\u6cd5\u570b\uff0c\u7279\u5225\u662f2010\u5e74\u3002\u6211\u9700\u8981\u4e00\u4efd\u5728\u90a3\u4e00\u5e74\u6cd5\u570b\u6240\u6709\u516c\u5171\u5047\u671f\u7684\u5217\u8868\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "dict", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["retrieve_holiday_by_year(year='2010', country='FR')"]}
{"id": "executable_simple_77", "question": "\u6211\u76ee\u524d\u6b63\u5728\u6df1\u5165\u7814\u7a76\u6b50\u6d32\u5404\u5730\u7684\u6587\u5316\u50b3\u7d71\uff0c\u4ee5\u9032\u884c\u6b77\u53f2\u6bd4\u8f03\uff0c\u91cd\u9ede\u653e\u57282005\u5e74\u3002\u5fb7\u570b\u6191\u85c9\u5176\u8c50\u5bcc\u7684\u6b77\u53f2\u548c\u591a\u6a23\u7684\u6176\u795d\u6d3b\u52d5\uff0c\u5438\u5f15\u4e86\u6211\u7684\u6ce8\u610f\u3002\u6211\u60f3\u77e5\u9053\u8a72\u5e74\u5fb7\u570b\u6709\u54ea\u4e9b\u5047\u671f\u3002\u4f60\u80fd\u7d66\u6211\u63d0\u4f9b\u4e00\u4efd2005\u5e74\u5fb7\u570b\u5047\u671f\u7684\u6e05\u55ae\u55ce\uff1f", "function": {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "dict", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["retrieve_holiday_by_year(year='2005', country='DE')"]}
{"id": "executable_simple_78", "question": "\u4f5c\u70ba\u4e00\u540d\u8cc7\u6599\u5206\u6790\u5e2b\uff0c\u6211\u6b63\u5728\u8655\u7406\u4e00\u500b\u9700\u8981\u6392\u5e8f\u7684\u6578\u64da\u96c6\uff0c\u4ee5\u4fbf\u9032\u884c\u5206\u6790\u3002\u6211\u6709\u9019\u4e9b\u6578\u5b57[34\u30012\u300156\u30017\u30019\u300112]\uff0c\u4f46\u662f\u70ba\u4e86\u6211\u6b63\u5728\u6e96\u5099\u7684\u5831\u544a\uff0c\u5b83\u5011\u9700\u8981\u6309\u964d\u5e8f\u6392\u5217\u3002\u4f60\u80fd\u5e6b\u6211\u5c0d\u9019\u500b\u6578\u7d44\u9032\u884c\u6392\u5e8f\u55ce\uff1f", "function": {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "dict", "properties": {"array": {"type": "array", "items": {"type": "integer"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order, i.e., descending order.", "default": false}}, "required": ["array"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)"]}
{"id": "executable_simple_79", "question": "\u6211\u76ee\u524d\u6b63\u5728\u8655\u7406\u4e00\u500b\u6578\u64da\u96c6\uff0c\u7528\u65bc\u6211\u7684\u5206\u6790\u9805\u76ee\uff0c\u9700\u8981\u5c07\u6578\u5b57\u6309\u5347\u5e8f\u6392\u5217\u3002\u6211\u73fe\u5728\u6b63\u5728\u4f7f\u7528\u7684\u6578\u64da\u96c6\u662f[1\uff0c2\uff0c2\uff0c7\uff0c7\uff0c10]\u3002\u4f60\u80fd\u5e6b\u6211\u5c0d\u9019\u500b\u6578\u7d44\u9032\u884c\u6392\u5e8f\u55ce\uff1f", "function": {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "dict", "properties": {"array": {"type": "array", "items": {"type": "integer"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order, i.e., descending order.", "default": false}}, "required": ["array"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["sort_array(array=[1, 2, 2, 7, 7, 10], reverse=False)"]}
{"id": "executable_simple_80", "question": "\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u5169\u500b\u4e8c\u9032\u5236\u6578\u5b57 '0011' \u548c '1100' \u7684\u7e3d\u548c\u55ce\uff1f", "function": {"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["add_binary_numbers(a='0011',b='1100')"]}
{"id": "executable_simple_81", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u5c0f\u9805\u76ee\uff0c\u9700\u8981\u9032\u884c\u4e8c\u9032\u5236\u8a08\u7b97\u3002\u4f60\u80fd\u5e6b\u6211\u628a\u4e8c\u9032\u5236\u6578\u5b57'10011'\u548c'1100'\u76f8\u52a0\u55ce\uff1f", "function": {"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["add_binary_numbers(a='10011',b='1100')"]}
{"id": "executable_simple_82", "question": "\u6211\u4e00\u76f4\u5728\u7e6a\u88fd\u4e00\u4e9b\u6578\u64da\uff0c\u770b\u8d77\u4f86\u6709\u4e00\u500b\u7dda\u6027\u8da8\u52e2\u3002\u6211\u6709\u9019\u4e9bx\u5750\u6a19[1\u30012\u30013]\u548c\u76f8\u61c9\u7684y\u503c[4\u30015\u30016]\u3002\u6211\u9700\u8981\u9810\u6e2c\u7576x\u70ba10\u6642\u7684y\u503c\u3002\u4f60\u80fd\u5c0d\u9019\u500b\u9032\u884c\u7dda\u6027\u56de\u6b78\uff0c\u4e26\u7d66\u6211\u90a3\u500b\u9810\u6e2c\u503c\u55ce\uff1f", "function": {"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "dict", "properties": {"x": {"type": "array", "items": {"type": "integer"}, "description": "The x coordinates of the points."}, "y": {"type": "array", "items": {"type": "integer"}, "description": "The y coordinates of the points."}, "point": {"type": "integer", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["linear_regression(x=[1,2,3],y=[4,5,6],point=10)"]}
{"id": "executable_simple_83", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u6578\u64da\u5206\u6790\u9805\u76ee\uff0c\u9700\u8981\u5efa\u7acb\u5169\u500b\u8b8a\u91cf\u4e4b\u9593\u7684\u95dc\u4fc2\u6a21\u578b\u3002\u6211\u6709\u4e00\u7d44\u6578\u64da\u9ede\uff0c\u5176\u4e2dx\u5750\u6a19\u70ba[1\uff0c2\uff0c-3]\uff0c\u76f8\u61c9\u7684y\u5750\u6a19\u70ba[4\uff0c-5\uff0c6]\u3002\u6211\u9700\u8981\u6839\u64da\u9019\u4e9b\u9ede\u5efa\u7acb\u4e00\u500b\u7dda\u6027\u56de\u6b78\u6a21\u578b\u3002\u4e00\u65e6\u6a21\u578b\u5efa\u7acb\u5b8c\u6210\uff0c\u6211\u60f3\u9810\u6e2c\u7576x\u70ba10\u6642\u7684y\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u505a\u5230\u55ce\uff1f", "function": {"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "dict", "properties": {"x": {"type": "array", "items": {"type": "integer"}, "description": "The x coordinates of the points."}, "y": {"type": "array", "items": {"type": "integer"}, "description": "The y coordinates of the points."}, "point": {"type": "integer", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)"]}
{"id": "executable_simple_84", "question": "\u6211\u9700\u8981\u5f9e\u4e00\u7d44\u5ea7\u6a19\u4e2d\u8b58\u5225\u5305\u542b\u6700\u591a\u9ede\u7684\u76f4\u7dda\u3002\u6211\u6b63\u5728\u67e5\u770b\u7684\u5ea7\u6a19\u662f[[1,1], [2,2], [3,4], [5,5]]\u3002\u4f60\u80fd\u5920\u78ba\u5b9a\u5f9e\u9019\u500b\u6578\u64da\u96c6\u4e2d\u5728\u4e00\u689d\u76f4\u7dda\u4e0a\u5c0d\u9f4a\u7684\u6700\u5927\u9ede\u6578\u55ce\uff1f", "function": {"name": "maxPoints", "description": "Finds the maximum number of points on a line.", "parameters": {"type": "dict", "properties": {"points": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "description": "A point represented by a 2 element list [x, y]."}, "description": "The list of points. Points are 2 element lists."}}, "required": ["points"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])"]}
{"id": "executable_simple_85", "question": "\u6211\u4e00\u76f4\u5728\u7814\u7a76\u4e00\u500b\u6f14\u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u8b58\u5225\u51fa\u5728\u4e00\u689d\u76f4\u7dda\u4e0a\u5c0d\u9f4a\u7684\u6700\u5927\u9ede\u96c6\u3002\u6211\u5df2\u7d93\u7e6a\u88fd\u4e86\u5e7e\u500b\u9ede\uff1a[[1,1], [2,3], [4,6], [5,5]]\u3002\u6211\u9700\u8981\u78ba\u5b9a\u5f9e\u9019\u500b\u96c6\u5408\u4e2d\u6700\u591a\u6709\u591a\u5c11\u9ede\u843d\u5728\u540c\u4e00\u689d\u76f4\u7dda\u4e0a\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "maxPoints", "description": "Finds the maximum number of points on a line.", "parameters": {"type": "dict", "properties": {"points": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "description": "A point represented by a 2 element list [x, y]."}, "description": "The list of points. Points are 2 element lists."}}, "required": ["points"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["maxPoints(points=[[1,1],[2,3],[4,6],[5,5]])"]}
{"id": "executable_simple_86", "question": "\u6211\u60f3\u8a55\u4f30\u6211\u7684\u6295\u8cc7\u7d44\u5408\u7684\u589e\u9577\u60c5\u6cc1\u3002\u6211\u5f9e$10,000\u958b\u59cb\uff0c\u6bcf\u5e74\u90fd\u6703\u589e\u52a0$1,000\u3002\u73fe\u5728\u5df2\u7d93\u904e\u4e86\u4e94\u5e74\uff0c\u6211\u7684\u6295\u8cc7\u7d44\u5408\u7684\u5e74\u5229\u7387\u70ba5%\u3002\u7136\u800c\uff0c\u6211\u77e5\u9053\u901a\u8ca8\u81a8\u8139\u53ef\u80fd\u6703\u5f71\u97ff\u6211\u7684\u9322\u7684\u5be6\u969b\u50f9\u503c\uff0c\u904e\u53bb\u4e94\u5e74\u7684\u901a\u8ca8\u81a8\u8139\u7387\u5206\u5225\u70ba1%\u30012%\u30013%\u30014%\u548c4%\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u6211\u7684\u6295\u8cc7\u76ee\u524d\u7684\u50f9\u503c\u55ce\uff1f", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=10000,annual_contribution=1000,years=5,annual_return=0.05,inflation_rate=[0.01,0.02,0.03,0.04,0.04])"]}
{"id": "executable_simple_87", "question": "\u6211\u5df2\u7d93\u6e96\u5099\u4e86100\u842c\u7f8e\u5143\u4f5c\u70ba\u521d\u59cb\u6295\u8cc7\uff0c\u4e26\u8a08\u5283\u6bcf\u5e74\u589e\u52a01000\u7f8e\u5143\u3002\u6211\u6253\u7b97\u57283\u5e74\u7684\u6642\u9593\u5167\u9032\u884c\u6295\u8cc7\uff0c\u9810\u8a08\u6bcf\u5e74\u7684\u56de\u5831\u7387\u7d04\u70ba10\uff05\u3002\u4f46\u662f\uff0c\u6211\u4e5f\u60f3\u8003\u616e\u9019\u4e9b\u5e74\u4efd\u7684\u901a\u8ca8\u81a8\u8139\u7387\uff0c\u6211\u9810\u6e2c\u5206\u5225\u70ba1\uff05\uff0c4\uff05\u548c4\uff05\u3002\u60a8\u80fd\u8a08\u7b97\u51fa\u8003\u616e\u901a\u8ca8\u81a8\u8139\u5f8c\uff0c\u6211\u7684\u6295\u8cc7\u5728\u6b64\u671f\u9593\u7d50\u675f\u6642\u7684\u50f9\u503c\u55ce\uff1f", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=1000000,annual_contribution=1000,years=3,annual_return=0.1,inflation_rate=[0.01,0.04,0.04])"]}
{"id": "executable_simple_88", "question": "\u6211\u4e00\u76f4\u5728\u52aa\u529b\u8abf\u6574\u6211\u7684\u98f2\u98df\u548c\u5065\u8eab\u8a08\u5283\uff0c\u6211\u771f\u7684\u9700\u8981\u628a\u6211\u7684\u71df\u990a\u9700\u6c42\u8abf\u6574\u597d\u3002\u6211\u662f\u4e00\u500b30\u6b72\u7684\u7537\u751f\uff0c\u9ad4\u91cd\u7d04100\u516c\u65a4\uff0c\u8eab\u9ad8170\u5398\u7c73\u3002\u6211\u4e0d\u662f\u6700\u6d3b\u8e8d\u7684\u4eba - \u6211\u7684\u6d3b\u52d5\u6c34\u5e73\u76f8\u7576\u4f4e\uff0c\u5927\u7d04\u70ba1\u3002\u6211\u60f3\u6e1b\u80a5\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u6211\u7684\u6bcf\u65e5\u71df\u990a\u651d\u5165\u91cf\u61c9\u8a72\u662f\u591a\u5c11\u55ce\uff1f", "function": {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "dict", "properties": {"weight": {"type": "float", "description": "The weight of the person in kilograms."}, "height": {"type": "float", "description": "The height of the person in centimeters."}, "age": {"type": "float", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "integer", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_nutritional_needs(weight=100,height=170,age=30,gender='male',activity_level=1,goal='lose')"]}
{"id": "executable_simple_89", "question": "\u6211\u6709\u4e00\u4f4d80\u6b72\u7684\u5973\u6027\u5ba2\u6236\uff0c\u8eab\u9ad8170\u516c\u5206\uff0c\u9ad4\u91cd59\u516c\u65a4\uff0c\u6d3b\u52d5\u91cf\u70ba4\uff0c\u975e\u5e38\u6d3b\u8e8d\u3002\u5979\u5e0c\u671b\u6e1b\u8f15\u9ad4\u91cd\u3002\u60a8\u80fd\u6839\u64da\u9019\u4e9b\u7d30\u7bc0\u8a08\u7b97\u5979\u6bcf\u5929\u7684\u71df\u990a\u9700\u6c42\u55ce\uff1f", "function": {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "dict", "properties": {"weight": {"type": "float", "description": "The weight of the person in kilograms."}, "height": {"type": "float", "description": "The height of the person in centimeters."}, "age": {"type": "float", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "integer", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='lose')"]}
{"id": "executable_simple_90", "question": "\u6211\u6b63\u5728\u8a08\u5283\u524d\u5f80\u7d10\u7d04\u7684\u5546\u52d9\u65c5\u884c\uff0c\u4e26\u6c7a\u5b9a\u5ef6\u9577\u6211\u7684\u505c\u7559\u6642\u9593\uff0c\u597d\u597d\u4eab\u53d7\u9019\u5ea7\u57ce\u5e02\u3002\u6211\u60f3\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u5ba2\u623f\uff0c\u4ee5\u4fbf\u5728\u6211\u7684\u65c5\u884c\u671f\u9593\u5165\u4f4f\u3002\u6211\u6240\u8003\u616e\u7684\u65e5\u671f\u662f\u5f9e2024\u5e748\u670811\u65e5\u52302024\u5e748\u670815\u65e5\u3002\u6211\u5df2\u7d93\u6e96\u5099\u597d\u9810\u7b97\u7528\u65bc\u4f4f\u5bbf\uff0c\u4e26\u9858\u610f\u82b1\u8cbb\u9ad8\u90541000\u7f8e\u5143\u4eab\u53d7\u8212\u9069\u7684\u4f4f\u5bbf\u3002\u6211\u7684\u5ba2\u6236\u7de8\u865f\u662f123\u3002\u4f60\u80fd\u5e6b\u6211\u9810\u8a02\u90a3\u9593\u5ba2\u623f\u55ce\uff1f", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='deluxe',price=1000,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]}
{"id": "executable_simple_91", "question": "\u6211\u60f3\u70ba\u4e00\u4f4dID\u70ba123\u7684\u5ba2\u6236\u9810\u8a02\u4e00\u9593\u7279\u5927\u5e8a\u623f\u3002\u9810\u8a02\u65e5\u671f\u5f9e2023\u5e7412\u670811\u65e5\u52302024\u5e748\u670815\u65e5\u3002\u50f9\u683c\u70ba$10,000\u3002\u6b64\u9810\u8a02\u4e0d\u9069\u7528\u4efb\u4f55\u6298\u6263\u4ee3\u78bc\u3002\u60a8\u80fd\u5e6b\u6211\u8655\u7406\u9019\u6b21\u9810\u8a02\u55ce\uff1f", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='king',price=10000,check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123')"]}
{"id": "executable_simple_92", "question": "\u6211\u4eca\u665a\u5728\u6211\u5bb6\u88e1\u8981\u8209\u8fa6\u4e00\u500b\u5c0f\u805a\u6703\uff0c\u6211\u60f3\u8981\u70ba\u5ba2\u4eba\u8a02\u8cfc\u4e00\u4e9b\u98df\u7269\u3002\u6211\u60f3\u898110\u500b\u6f22\u5821\uff0c\u6bcf\u500b\u50f9\u683c\u70ba$5\uff0c\u9084\u67097\u500b\u51b0\u6dc7\u6dcb\uff0c\u6bcf\u500b\u50f9\u683c\u70ba$2\u3002\u4f60\u80fd\u5e6b\u6211\u4e0b\u8a02\u55ae\u4e26\u544a\u8a34\u6211\u7e3d\u50f9\u662f\u591a\u5c11\u55ce\uff1f", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["order_food(item=['burger','ice cream'], quantity=[10,7], price=[5,2])"]}
{"id": "executable_simple_93", "question": "\u6211\u60f3\u8a02\u8cfc\u4e00\u4e9b\u98df\u7269\u3002\u4f60\u80fd\u5e6b\u6211\u62ff101\u500b\u6bcf\u500b0.1\u7f8e\u5143\u7684\u9903\u5b50\uff0c\u9084\u670920\u500b\u6bcf\u789710\u7f8e\u5143\u7684\u98ef\u7897\u55ce\uff1f\u8acb\u5e6b\u6211\u8a08\u7b97\u7e3d\u91d1\u984d\u3002", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])"]}
{"id": "executable_simple_94", "question": "\u6211\u6628\u665a\u548c\u670b\u53cb\u8a0e\u8ad6\u96fb\u5f71\uff0c\u6211\u5011\u958b\u59cb\u8ac7\u8ad6\u300a\u963f\u51e1\u9054\u300b\u3002\u6211\u610f\u8b58\u5230\u6211\u4e0d\u8a18\u5f97\u662f\u8ab0\u5c0e\u6f14\u7684\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u5c0e\u6f14\u7684\u540d\u5b57\u55ce\uff1f", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_director(movie_name='Avatar')"]}
{"id": "executable_simple_95", "question": "\u6211\u548c\u670b\u53cb\u6b63\u5728\u8faf\u8ad6\u6709\u95dc\u7d93\u5178\u96fb\u5f71\u7684\u8a71\u984c\uff0c\u81ea\u7136\u5730\uff0c\u300e\u4f4e\u4fd7\u5c0f\u8aaa\u300f\u4e5f\u88ab\u63d0\u53ca\u3002\u6211\u5011\u958b\u59cb\u8a0e\u8ad6\u9019\u90e8\u96fb\u5f71\u7368\u7279\u7684\u5c0e\u6f14\u98a8\u683c\uff0c\u4f46\u4ee4\u4eba\u5c37\u5c2c\u7684\u662f\uff0c\u6211\u5fd8\u8a18\u4e86\u5c0e\u6f14\u7684\u540d\u5b57\u3002\u4f60\u53ef\u4ee5\u5e6b\u5fd9\u67e5\u4e00\u4e0b\u662f\u8ab0\u5c0e\u6f14\u4e86\u300e\u4f4e\u4fd7\u5c0f\u8aaa\u300f\u55ce\uff1f", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_director(movie_name='Pulp Fiction')"]}
{"id": "executable_simple_96", "question": "\u6211\u6b63\u5728\u8003\u616e\u5728\u9019\u500b\u9031\u672b\u7684\u5bb6\u5ead\u96fb\u5f71\u4e4b\u591c\u4e0a\u64ad\u653e\u96fb\u5f71\u300a\u963f\u51e1\u9054\u300b\uff0c\u4f46\u6211\u9700\u8981\u78ba\u4fdd\u5b83\u9069\u5408\u6240\u6709\u5e74\u9f61\u5c64\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u4e00\u4e0b\u300a\u963f\u51e1\u9054\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Avatar')"]}
{"id": "executable_simple_97", "question": "\u4f60\u80fd\u67e5\u51fa\u300a\u4f4e\u4fd7\u5c0f\u8bf4\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f\u6211\u60f3\u6c7a\u5b9a\u9019\u90e8\u96fb\u5f71\u662f\u5426\u9069\u5408\u6211\u7684\u9752\u5c11\u5e74\u5b69\u5b50\u89c0\u770b\u3002", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Pulp Fiction')"]}
{"id": "executable_simple_98", "question": "\u6211\u6b63\u5728\u8655\u7406\u4e00\u4e9b\u571f\u5730\u6e2c\u91cf\u6578\u64da\uff0c\u9700\u8981\u8a08\u7b97\u4e00\u500b\u7279\u5b9a\u4e09\u89d2\u5f62\u5730\u584a\u7684\u9762\u7a4d\u3002\u6211\u5df2\u7d93\u6709\u9019\u500b\u4e09\u89d2\u5f62\u9802\u9ede\u7684\u5750\u6a19\uff0c\u5206\u5225\u70ba\uff081,2\uff09\u3001\uff083,4\uff09\u548c\uff081,3\uff09\u3002\u4f60\u80fd\u5e6b\u6211\u7528\u9019\u4e9b\u9ede\u4f86\u8a08\u7b97\u51fa\u9019\u500b\u4e09\u89d2\u5f62\u7684\u9762\u7a4d\u55ce\uff1f", "function": {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "dict", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["polygon_area(vertices=[[1,2],[3,4],[1,3]])"]}
{"id": "executable_simple_99", "question": "\u6211\u6b63\u5728\u56de\u9867\u5e7e\u4f55\u7684\u57fa\u790e\u77e5\u8b58\uff0c\u6700\u5f8c\u9047\u5230\u4e86\u4e00\u500b\u6311\u6230\uff0c\u8981\u8a08\u7b97\u4e00\u500b\u591a\u908a\u5f62\u7684\u9762\u7a4d\u3002\u9019\u500b\u591a\u908a\u5f62\u7531\u4ee5\u4e0b\u9802\u9ede\u5b9a\u7fa9\uff1a[[1,2],[3,4],[1,4],[3,7]]\u3002\u4f60\u80fd\u5e6b\u6211\u7528\u978b\u5e36\u516c\u5f0f\u8a08\u7b97\u51fa\u9019\u500b\u591a\u908a\u5f62\u7684\u9762\u7a4d\u55ce\uff1f", "function": {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "dict", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])"]}