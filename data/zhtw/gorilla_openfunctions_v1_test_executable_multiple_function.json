{"id": "executable_multiple_function_0", "question": "\u6211\u6b63\u5728\u73a9\u4e00\u500b\u9ab0\u5b50\u904a\u6232\uff0c\u60f3\u8981\u8a08\u7b97\u6211\u7684\u6a5f\u6703\u3002\u6211\u64f2\u9ab0\u5b5020\u6b21\uff0c\u6211\u60f3\u8981\u627e\u51fa\u5728\u901920\u6b21\u4e2d\u6070\u597d\u64f2\u51fa5\u6b216\u7684\u6a5f\u7387\uff0c\u8003\u616e\u5230\u6bcf\u6b21\u64f2\u9ab0\u5b50\u90fd\u6709\u516d\u5206\u4e4b\u4e00\u7684\u6a5f\u6703\u64f2\u51fa6\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u55ce\uff1f", "function": [{"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}}, {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "float", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calc_binomial_probability(n=20, k=5, p=1/6)"]}
{"id": "executable_multiple_function_1", "question": "\u6211\u6b63\u5728\u958b\u767c\u4e00\u500b\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\uff0c\u6bd4\u8f03\u5169\u500b\u7269\u4ef6\u7684\u7279\u5fb5\u3002\u9019\u4e9b\u7269\u4ef6\u7684\u7279\u5fb5\u5411\u91cf\u5206\u5225\u70ba\u7b2c\u4e00\u500b\u7269\u4ef6\u7684 [0.5, 0.7, 0.2, 0.9, 0.1] \u548c\u7b2c\u4e8c\u500b\u7269\u4ef6\u7684 [0.4, 0.6, 0.3, 0.8, 0.2]\u3002\u70ba\u4e86\u4e86\u89e3\u9019\u5169\u500b\u7269\u4ef6\u6709\u591a\u76f8\u4f3c\uff0c\u6211\u9700\u8981\u8a08\u7b97\u9019\u5169\u500b\u5411\u91cf\u4e4b\u9593\u7684\u9918\u5f26\u76f8\u4f3c\u5ea6\u3002\u4f60\u80fd\u5e6b\u6211\u505a\u9019\u500b\u55ce\uff1f", "function": [{"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "dict", "properties": {"vectorA": {"type": "array", "items": {"type": "float"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "float"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.4, 0.6, 0.3, 0.8, 0.2])"]}
{"id": "executable_multiple_function_2", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u500b\u7269\u7406\u5be6\u9a57\uff0c\u6211\u6709\u4e00\u500b\u91cd\u91cf\u70ba50\u516c\u65a4\uff0c\u4f54\u64da\u5927\u7d0410\u7acb\u65b9\u7c73\u7a7a\u9593\u7684\u7269\u9ad4\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u500b\u7269\u9ad4\u7684\u5bc6\u5ea6\u55ce\uff1f", "function": [{"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_density(mass=50, volume=10)"]}
{"id": "executable_multiple_function_3", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u7269\u7406\u5be6\u9a57\uff0c\u8ffd\u8e64\u4e00\u500b\u7279\u6b8a\u7269\u9ad4\u7684\u904b\u52d5\u3002\u5b83\u4e00\u958b\u59cb\u7684\u901f\u5ea6\u662f15\u7c73/\u79d2\uff0c\u6211\u5011\u4ee5\u6bcf\u79d29.8\u7c73\u7684\u901f\u5ea6\u52a0\u901f\u5b83\u3002\u6211\u9700\u8981\u8a08\u7b97\u5b83\u572810\u79d2\u5f8c\u6703\u79fb\u52d5\u591a\u9060\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u4e9b\u6578\u5b57\u55ce\uff1f", "function": [{"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "dict", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_displacement(initial_velocity=15.0, acceleration=9.8, time=10)"]}
{"id": "executable_multiple_function_4", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u6d89\u53ca\u5e36\u96fb\u7c92\u5b50\u548c\u96fb\u5834\u7684\u7269\u7406\u5be6\u9a57\u3002\u6211\u5df2\u7d93\u5c07\u4e00\u500b\u7c92\u5b50\u5f15\u5165\u4e86\u9019\u500b\u5834\u4e2d\uff0c\u5b83\u643a\u5e36\u8457\u4e00\u500b\u6070\u597d\u70ba5\u5eab\u4f96\u7684\u96fb\u8377\u3002\u96fb\u5834\u672c\u8eab\u5177\u670910\u4f0f\u7279\u7684\u96fb\u4f4d\u5dee\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u7a2e\u60c5\u6cc1\u4e0b\u7684\u975c\u96fb\u52e2\u80fd\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u55ce\uff1f", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge of the object, in coulombs."}, "voltage": {"type": "float", "description": "The voltage of the object, in volts."}}, "required": ["charge", "voltage"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_electrostatic_potential_energy(charge=5.0, voltage=10.0)"]}
{"id": "executable_multiple_function_5", "question": "\u5728\u4e00\u6b21\u9ad8\u901f\u8ffd\u9010\u7684\u6a21\u64ec\u4e2d\uff0c\u6211\u6b63\u5728\u8a66\u5716\u8a08\u7b97\u5acc\u7591\u4eba\u7684\u8eca\u5f9e\u975c\u6b62\u72c0\u614b\u958b\u59cb\u9023\u7e8c\u52a0\u901f12\u79d2\u5f8c\u6703\u9054\u5230\u7684\u901f\u5ea6\uff0c\u52a0\u901f\u5ea6\u70ba\u6bcf\u79d29.8\u7c73\u3002\u4f60\u80fd\u6839\u64da\u9019\u4e9b\u6578\u64da\u70ba\u6211\u8a08\u7b97\u6700\u7d42\u901f\u5ea6\u55ce\uff1f", "function": [{"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "dict", "properties": {"vectorA": {"type": "array", "items": {"type": "float"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "float"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount of the loan."}, "interest_rate": {"type": "float", "description": "The interest rate of the loan, ranging from 0 to 1."}, "loan_period": {"type": "integer", "description": "The period of the loan, in years."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object."}, "acceleration": {"type": "float", "description": "The acceleration of the object."}, "time": {"type": "float", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=12)"]}
{"id": "executable_multiple_function_6", "question": "\u6211\u6b63\u5728\u8003\u616e\u6211\u7684\u5132\u84c4\u7684\u9577\u671f\u589e\u9577\uff0c\u6211\u5df2\u7d93\u5c075000\u7f8e\u5143\u5b58\u5165\u4e00\u500b\u56fa\u5b9a\u5b58\u6b3e\uff0c\u4e26\u4e14\u6709\u4e00\u500b\u7a69\u5b9a\u7684\u5e74\u5229\u7387\u70ba5\uff05\u3002\u6211\u8a08\u5283\u8b93\u5b83\u653e\u7f6e\u5341\u5e74\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u6211\u6295\u8cc7\u5341\u5e74\u5f8c\u7684\u672a\u4f86\u50f9\u503c\u55ce\uff1f", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "dict", "properties": {"array": {"type": "array", "items": {"type": "float"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order, i.e., descending order.", "default": false}}, "required": ["array"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)"]}
{"id": "executable_multiple_function_7", "question": "\u4f5c\u70ba\u4e00\u540d\u8cc7\u6599\u5206\u6790\u5e2b\uff0c\u6211\u5df2\u7d93\u8ffd\u8e64\u4e86\u904e\u53bb\u4e00\u500b\u6708\u7279\u5b9a\u57ce\u5e02\u7684\u6bcf\u65e5\u6eab\u5ea6\u3002\u6211\u8a18\u9304\u7684\u6eab\u5ea6\u7bc4\u570d\u5f9e\u651d\u6c0f22\u5ea6\u523080\u5ea6\uff0c\u6bcf\u5929\u8b8a\u53162\u5ea6\u3002\u6211\u9700\u8981\u5f9e\u9019\u7d44\u6578\u64da\u4e2d\u8a08\u7b97\u51fa\u5e73\u5747\u6bcf\u6708\u6eab\u5ea6\uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u6c23\u5019\u8da8\u52e2\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "integer"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])"]}
{"id": "executable_multiple_function_8", "question": "\u6211\u6b63\u5728\u958b\u767c\u4e00\u500b\u52a0\u5bc6\u6f14\u7b97\u6cd5\uff0c\u5b83\u6d89\u53ca\u5f9e\u82f1\u6587\u5b57\u6bcd\u4e2d\u5275\u5efa\u6392\u5217\u3002\u6211\u9700\u8981\u77e5\u9053\u5f9e26\u500b\u5b57\u6bcd\u4e2d\u9078\u64c75\u500b\u5b57\u6bcd\u7684\u4e0d\u540c\u6392\u5217\u65b9\u5f0f\u7684\u6578\u91cf\u3002\u4f60\u53ef\u4ee5\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b\u55ce\uff1f", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_permutations(n=26, k=5)"]}
{"id": "executable_multiple_function_9", "question": "\u6211\u4e00\u76f4\u8ffd\u8e64\u7279\u5b9a\u80a1\u7968\u904e\u53bb10\u500b\u4ea4\u6613\u65e5\u7684\u6536\u76e4\u50f9\uff0c\u70ba\u4e86\u4e00\u4efd\u95dc\u65bc\u5e02\u5834\u6ce2\u52d5\u6027\u7684\u5831\u544a\u3002\u6211\u8a18\u9304\u7684\u6578\u5b57\u5206\u5225\u662f1000\u30012000\u30013000\u30014000\u30015000\u30017000\u30019000\u300115000\u300120000\u548c30000\u3002\u70ba\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u9019\u652f\u80a1\u7968\u7684\u50f9\u683c\u6ce2\u52d5\u548c\u76f8\u95dc\u98a8\u96aa\uff0c\u6211\u9700\u8981\u8a08\u7b97\u9019\u4e9b\u6536\u76e4\u50f9\u7684\u6a19\u6e96\u5dee\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u9019\u500b\u7d71\u8a08\u6578\u64da\u55ce\uff1f", "function": [{"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "integer"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_standard_deviation(numbers=[1000,2000,3000,4000,5000,7000,9000,15000,20000,30000])"]}
{"id": "executable_multiple_function_10", "question": "\u6211\u6b63\u5728\u70ba\u4e00\u500b\u65b0\u516c\u5712\u7684\u5efa\u7bc9\u9805\u76ee\u5de5\u4f5c\uff0c\u8a2d\u8a08\u4e2d\u5305\u62ec\u4e00\u500b\u4e09\u89d2\u5f62\u5340\u57df\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u500b\u4e09\u89d2\u5f62\u7684\u9762\u7a4d\uff0c\u4ee5\u4fbf\u7e7c\u7e8c\u9032\u884c\u6211\u7684\u898f\u5283\u3002\u6211\u624b\u4e0a\u6709\u7684\u5c3a\u5bf8\u662f500\u7c73\u7684\u5e95\u908a\u548c300\u7c73\u7684\u9ad8\u5ea6\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u51fa\u9019\u4e9b\u5c3a\u5bf8\u7684\u7e3d\u9762\u7a4d\u55ce\uff1f", "function": [{"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base of the triangle, in meters."}, "height": {"type": "integer", "description": "The height of the triangle, in meters."}}, "required": ["base", "height"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_triangle_area(base=500, height=300)"]}
{"id": "executable_multiple_function_11", "question": "\u6211\u9700\u8981\u70ba\u4e00\u4f4d\u8a08\u5283\u5728\u65e5\u672c\u9032\u884c\u5546\u696d\u4ea4\u6613\u7684\u5ba2\u6236\u6e96\u5099\u4e00\u4efd\u5831\u544a\u3002\u4ed6\u5011\u5e0c\u671b\u5c075,000\u6b50\u5143\u8f49\u63db\u70ba\u65e5\u5143\u3002\u70ba\u4e86\u78ba\u4fdd\u5831\u544a\u6e96\u78ba\uff0c\u6211\u9700\u8981\u4f7f\u7528\u7576\u524d\u7684\u532f\u7387\u5c07\u91d1\u984d\u8f49\u63db\u70ba\u65e5\u5143\u3002\u6211\u5c07\u4f7f\u7528\u7684\u8ca8\u5e63\u4ee3\u78bc\u662f\u201cEUR\u201d\u4ee3\u8868\u6b50\u5143\u548c\u201cJPY\u201d\u4ee3\u8868\u65e5\u5143\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u76f8\u61c9\u7684\u65e5\u5143\u91d1\u984d\u55ce\uff1f", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default to false"}}, "required": ["stock_name", "interval"]}}], "execution_result_type": ["real_time_match"], "ground_truth": ["convert_currency(amount=5000, from_currency='EUR', to_currency='JPY')"]}
{"id": "executable_multiple_function_12", "question": "\u5728\u6211\u7684\u7269\u7406\u8ab2\u4e0a\uff0c\u6211\u5011\u6b63\u5728\u63a2\u8a0e\u904b\u52d5\u5b78\uff0c\u6211\u88ab\u6307\u6d3e\u5206\u6790\u4e00\u500b\u7c92\u5b50\u7684\u904b\u52d5\u3002\u65b9\u7a0b\u5f0ff(x) = 3t^2 + 2t + 1\u63cf\u8ff0\u4e86\u5b83\u96a8\u6642\u9593\u7684\u4f4d\u7f6e\u3002\u6211\u9700\u8981\u78ba\u5b9a\u7576t\u70ba5\u79d2\u6642\uff0c\u9019\u500b\u7c92\u5b50\u7684\u901f\u5ea6\u3002\u901f\u5ea6\u662f\u4f4d\u7f6e\u51fd\u6578\u5c0d\u6642\u9593\u7684\u7b2c\u4e00\u500b\u5c0e\u6578\uff0c\u6240\u4ee5\u6211\u9700\u8981\u8a08\u7b97\u5b83\u3002\u4f60\u80fd\u5e6b\u6211\u4f7f\u7528\u9069\u7576\u7684\u51fd\u6578\u627e\u5230\u901f\u5ea6\u55ce\uff1f", "function": [{"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of. This should be the string literal of lambda function"}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["estimate_derivative(function='lambda x: 3*x**2 + 2*x + 1', x=5)"]}
{"id": "executable_multiple_function_13", "question": "\u6211\u6700\u8fd1\u7d93\u5e38\u807d\u5230\u4e00\u500b\u4fda\u8a9e\u300clit\u300d\uff0c\u9019\u5f15\u8d77\u4e86\u6211\u7684\u597d\u5947\u5fc3\u3002\u6211\u4e0d\u592a\u78ba\u5b9a\u5b83\u7684\u610f\u601d\uff0c\u6240\u4ee5\u6211\u60f3\u627e\u4e00\u500b\u5b9a\u7fa9\u4f86\u4e86\u89e3\u5b83\u7684\u7528\u6cd5\u548c\u542b\u7fa9\u3002\u4f60\u80fd\u5e6b\u6211\u5728Urban Dictionary\u4e0a\u627e\u51fa\u300clit\u300d\u7684\u610f\u601d\u55ce\uff1f", "function": [{"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["find_term_on_urban_dictionary(term=\"lit\")"]}
{"id": "executable_multiple_function_14", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u793e\u5340\u85dd\u8853\u9805\u76ee\uff0c\u8a08\u5283\u5728\u516c\u5171\u7a7a\u9593\u88fd\u4f5c\u4e00\u5e45\u5927\u578b\u5713\u5f62\u58c1\u756b\u3002\u70ba\u4e86\u78ba\u5b9a\u6211\u9700\u8981\u8cfc\u8cb7\u591a\u5c11\u6cb9\u6f06\uff0c\u6211\u9700\u8981\u8a08\u7b97\u6211\u5c07\u8981\u7e6a\u756b\u7684\u5713\u5f62\u7684\u9762\u7a4d\u3002\u6211\u88ab\u5206\u914d\u7684\u7246\u9762\u6709\u4e00\u500b\u5b8c\u7f8e\u7684\u5713\u5f62\u5340\u57df\uff0c\u534a\u5f91\u70ba15\u82f1\u5c3a\u3002\u4f60\u80fd\u5e6b\u6211\u78ba\u5b9a\u9019\u500b\u5713\u5f62\u7684\u9762\u7a4d\u55ce\uff1f", "function": [{"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge of the object, in coulombs."}, "voltage": {"type": "float", "description": "The voltage of the object, in volts."}}, "required": ["charge", "voltage"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["geometry_area_circle(radius=15)"]}
{"id": "executable_multiple_function_15", "question": "\u6211\u6b63\u5728\u64b0\u5beb\u4e00\u7bc7\u6df1\u5165\u5831\u5c0e\uff0c\u6db5\u84cb\u5df4\u897f\u76ee\u524d\u7684COVID-19\u75ab\u60c5\uff0c\u78ba\u4fdd\u6211\u63d0\u4f9b\u7684\u8cc7\u8a0a\u662f\u771f\u5be6\u4e14\u6700\u65b0\u7684\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u6211\u9700\u8981\u5305\u62ec\u8a72\u570b\u76ee\u524d\u7684\u6d3b\u8e8dCOVID-19\u75c5\u4f8b\u6578\u91cf\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u5df4\u897f\u6700\u65b0\u7684\u6d3b\u8e8d\u75c5\u4f8b\u6578\u91cf\u55ce\uff1f", "function": [{"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}], "execution_result_type": ["real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='Brazil')"]}
{"id": "executable_multiple_function_16", "question": "\u5728\u9032\u884c\u4e00\u4e9b\u8ca1\u52d9\u5206\u6790\u6642\uff0c\u6211\u4e00\u76f4\u5728\u7814\u7a76\u67d0\u4e9b\u80a1\u7968\u7684\u8a73\u7d30\u60c5\u6cc1\uff0c\u800c'AAPL'\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\u3002\u6211\u60f3\u77e5\u9053\u5b83\u4ee3\u8868\u54ea\u5bb6\u516c\u53f8\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u8207\u80a1\u7968\u4ee3\u78bc'AAPL'\u76f8\u95dc\u7684\u516c\u53f8\u540d\u7a31\u55ce\uff1f", "function": [{"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "dict", "properties": {"matA": {"type": "array", "description": "The first matrix.", "items": {"type": "array", "items": {"type": "integer"}}}, "matB": {"type": "array", "description": "The second matrix.", "items": {"type": "array", "items": {"type": "integer"}}}}, "required": ["matA", "matB"]}}, {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_company_name_by_stock_name(stock_name='AAPL')"]}
{"id": "executable_multiple_function_17", "question": "\u6211\u76ee\u524d\u6b63\u5728\u8abf\u67e5\u4e00\u500b\u5b89\u5168\u8b66\u5831\uff0c\u8a72\u8b66\u5831\u6a19\u8a18\u4e86\u6211\u5011\u7db2\u7d61\u4e2d\u7684\u4e00\u4e9b\u4e0d\u5c0b\u5e38\u7684\u6d3b\u52d5\u3002\u65e5\u8a8c\u4e2d\u8b58\u5225\u51faIP\u5730\u5740'192.168.1.1'\uff0c\u6211\u61f7\u7591\u5b83\u53ef\u80fd\u8207\u5165\u4fb5\u6709\u95dc\u3002\u70ba\u4e86\u4e86\u89e3\u9019\u500b\u6f5b\u5728\u5a01\u8105\u7684\u4f86\u6e90\uff0c\u6211\u9700\u8981\u78ba\u5b9a\u9019\u500bIP\u7684\u5730\u7406\u5750\u6a19\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211IP\u5730\u5740'192.168.1.1'\u7684\u7def\u5ea6\u548c\u7d93\u5ea6\u55ce\uff1f", "function": [{"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_coordinate_by_ip_address(ip_address='192.168.1.1')"]}
{"id": "executable_multiple_function_18", "question": "\u6211\u6709\u4e00\u4f4d\u5ba2\u6236\u6b63\u5728\u8a08\u5283\u524d\u5f80\u5df4\u9ece\u65c5\u884c\uff0c\u4ed6\u5011\u6b63\u5728\u5c0b\u627e\u4e00\u4e9b\u8a73\u7d30\u7684\u65c5\u884c\u8a08\u5283\u3002\u6211\u5011\u53ef\u4ee5\u70ba\u6b64\u76ee\u7684\u627e\u51fa\u5df4\u9ece\u7684\u7cbe\u78ba\u7def\u5ea6\u548c\u7d93\u5ea6\u55ce\uff1f\u4ed6\u5011\u975e\u5e38\u6ce8\u91cd\u7d30\u7bc0\uff0c\u4e26\u4e14\u6703\u5f88\u611f\u6fc0\u80fd\u5920\u7372\u5f97\u4ed6\u5011\u500b\u4eba\u884c\u7a0b\u7684\u5ea7\u6a19\u3002", "function": [{"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default to false"}}, "required": ["stock_name", "interval"]}}, {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "dict", "properties": {"city_name": {"type": "string", "description": "The name of the city, such as 'Rome'."}}, "required": ["city_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_coordinates_from_city(city_name='Paris')"]}
{"id": "executable_multiple_function_19", "question": "\u6211\u76ee\u524d\u6b63\u5728\u7814\u7a76COVID-19\u7684\u5f71\u97ff\uff0c\u6211\u7684\u91cd\u9ede\u662f\u5df4\u897f\u3002\u6211\u9700\u8981\u8a72\u570b\u6700\u65b0\u7684\u6b7b\u4ea1\u7e3d\u6578\uff0c\u4ee5\u5206\u6790\u8a72\u5730\u5340\u75ab\u60c5\u7684\u56b4\u91cd\u7a0b\u5ea6\u3002\u4f60\u80fd\u63d0\u4f9b\u9019\u500b\u4fe1\u606f\u7d66\u6211\u55ce\uff1f", "function": [{"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge of the object, in coulombs."}, "voltage": {"type": "float", "description": "The voltage of the object, in volts."}}, "required": ["charge", "voltage"]}}, {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "dict", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}], "execution_result_type": ["real_time_match"], "ground_truth": ["get_covid_death_by_country(country='Brazil')"]}
{"id": "executable_multiple_function_20", "question": "\u4eca\u5929\u6211\u5728\u66f4\u65b0\u4e00\u5f35\u57ce\u5e02\u5730\u5716\u6642\uff0c\u6211\u9700\u8981\u5f04\u6e05\u695a\u5169\u500b\u5730\u6a19\u4e4b\u9593\u6709\u591a\u9060\u3002\u7b2c\u4e00\u500b\u9ede\u7684\u5ea7\u6a19\u662f\uff0845.76\uff0c4.85\uff09\uff0c\u7b2c\u4e8c\u500b\u9ede\u7684\u5ea7\u6a19\u662f\uff0848.85\uff0c2.35\uff09\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b\u9019\u5169\u500b\u9ede\u4e4b\u9593\u7684\u8ddd\u96e2\u55ce\uff1f", "function": [{"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_distance(pointA=(45.76, 4.85), pointB=(48.85, 2.35))"]}
{"id": "executable_multiple_function_21", "question": "\u6211\u76ee\u524d\u6b63\u5728\u7814\u7a76\u8cbb\u6c0f\u6578\u5217\uff0c\u6211\u60f3\u8981\u6aa2\u67e5\u524d20\u500b\u6578\u5b57\u3002\u4f60\u80fd\u5e6b\u6211\u751f\u6210\u55ce\uff1f", "function": [{"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_fibonacci_sequence(n=20)"]}
{"id": "executable_multiple_function_22", "question": "\u6211\u6b63\u5728\u76e3\u7763\u4e00\u500b\u65b0\u9805\u76ee\uff0c\u6211\u5011\u6b63\u5728\u76e3\u63a7\u4e9e\u99ac\u905c\u4e0a\u7684\u7af6\u722d\u5c0d\u624b\u5b9a\u50f9\uff0c\u4ee5\u4fdd\u6301\u7af6\u722d\u529b\u3002\u6709\u4e00\u500b\u7279\u5b9a\u7684\u7522\u54c1\u6211\u5011\u4e00\u76f4\u5728\u95dc\u6ce8\uff0c\u6211\u9700\u8981\u5b83\u7684\u6700\u65b0\u50f9\u683c\u3002\u8a72\u7522\u54c1\u7684ASIN\u70ba'B08PPDJWC8'\u3002\u4f60\u80fd\u5f9e\u4e9e\u99ac\u905c\u70ba\u6211\u53d6\u5f97\u9019\u500bASIN\u7684\u7576\u524d\u50f9\u683c\u55ce\uff1f", "function": [{"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_price_by_amazon_ASIN(ASIN='B08PPDJWC8')"]}
{"id": "executable_multiple_function_23", "question": "\u6211\u662f\u4e00\u4f4d\u6578\u5b78\u8001\u5e2b\uff0c\u76ee\u524d\u6b63\u5728\u88fd\u5b9a\u6211\u7684\u8cea\u56e0\u6578\u5206\u89e3\u8ab2\u7a0b\u8a08\u5283\u3002\u660e\u5929\u7684\u8ab2\u5802\u4e0a\uff0c\u6211\u9078\u64c7\u4e864567\u4f5c\u70ba\u4e00\u500b\u5be6\u969b\u4f8b\u5b50\uff0c\u4f86\u5411\u6211\u7684\u5b78\u751f\u89e3\u91cb\u9019\u500b\u6982\u5ff5\u3002\u6211\u9700\u8981\u5c07\u5b83\u5206\u89e3\u70ba\u5b83\u7684\u8cea\u56e0\u6578\u3002", "function": [{"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount of the loan."}, "interest_rate": {"type": "float", "description": "The interest rate of the loan."}, "loan_period": {"type": "float", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "dict", "properties": {"city_name": {"type": "string", "description": "The name of the city, such as 'Rome'."}}, "required": ["city_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_prime_factors(number=4567)"]}
{"id": "executable_multiple_function_24", "question": "\u6211\u6b63\u5728\u64b0\u5beb\u4e00\u7bc7\u7522\u54c1\u8a55\u8ad6\u6587\u7ae0\uff0c\u6211\u9700\u8981\u4e00\u4e9b\u95dc\u65bc\u5728\u4e9e\u99ac\u905c\u4e0a\u92b7\u552e\u7684\u5546\u54c1\u7684\u8cc7\u8a0a\u3002\u6211\u552f\u4e00\u77e5\u9053\u7684\u7d30\u7bc0\u662fASIN\uff1a'B08BHXG144'\u3002\u6211\u9700\u8981\u627e\u51fa\u8207\u9019\u500bASIN\u76f8\u95dc\u7684\u7522\u54c1\u540d\u7a31\uff0c\u4ee5\u4fbf\u5728\u6211\u7684\u6587\u7ae0\u4e2d\u52a0\u5165\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u9019\u500b\u7522\u54c1\u7684\u540d\u7a31\u55ce\uff1f", "function": [{"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_product_name_by_amazon_ASIN(ASIN='B08BHXG144')"]}
{"id": "executable_multiple_function_25", "question": "\u5728\u700f\u89bd\u4e9e\u99ac\u905c\u6642\uff0c\u6211\u5076\u7136\u767c\u73fe\u4e86\u4e00\u500b\u8b93\u6211\u975e\u5e38\u611f\u8208\u8da3\u7684\u7522\u54c1\u3002\u7136\u800c\uff0c\u6211\u5c0d\u5546\u54c1\u7684\u8cea\u91cf\u548c\u4e00\u822c\u5171\u8b58\u90fd\u975e\u5e38\u6311\u5254\uff0c\u5728\u8003\u616e\u5c07\u5b83\u5011\u52a0\u5165\u8cfc\u7269\u8eca\u4e4b\u524d\uff0c\u6211\u60f3\u77e5\u9053\u9019\u500b\u7522\u54c1\u7684\u5e73\u5747\u5ba2\u6236\u8a55\u5206\u662f\u591a\u5c11\u3002\u5b83\u7684ASIN\u70ba'B07ZPKBL9V'\uff0c\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u9019\u500b\u4fe1\u606f\u55ce\uff1f", "function": [{"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}, {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_rating_by_amazon_ASIN(ASIN='B07ZPKBL9V')"]}
{"id": "executable_multiple_function_26", "question": "\u6211\u76ee\u524d\u6b63\u5728\u5206\u6790\u4e0d\u540c\u7684\u6295\u8cc7\u9078\u64c7\uff0c\u4e26\u5c0d\u860b\u679c\u516c\u53f8\u8868\u73fe\u51fa\u7279\u5225\u7684\u8208\u8da3\u3002\u6211\u60f3\u8981\u67e5\u770b\u8a72\u516c\u53f8\u904e\u53bb\u4e00\u500b\u6708\u7684\u80a1\u7968\u8868\u73fe\u3002\u6b64\u5916\uff0c\u6211\u60f3\u77e5\u9053\u5728\u9019\u6bb5\u6642\u9593\u5167\u662f\u5426\u6709\u80a1\u7968\u62c6\u5206\u6216\u80a1\u606f\u3002\u4f60\u80fd\u5426\u67e5\u8a62\u860b\u679c\u516c\u53f8\u80a1\u7968\u7684\u6708\u5ea6\u6b77\u53f2\u8a18\u9304\uff0c\u4e26\u78ba\u4fdd\u4fe1\u606f\u5305\u62ec\u4efb\u4f55\u62c6\u5206\u6216\u80a1\u606f\uff1f", "function": [{"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default to false"}}, "required": ["stock_name", "interval"]}}, {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}], "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='true')"]}
{"id": "executable_multiple_function_27", "question": "\u6211\u6b63\u5728\u9032\u884c\u6295\u8cc7\u7d44\u5408\u5206\u6790\uff0c\u6211\u7684\u5ba2\u6236\u5c0d\u860b\u679c\u516c\u53f8\u80a1\u7968\u7684\u6700\u65b0\u8868\u73fe\u7279\u5225\u611f\u8208\u8da3\u3002\u70ba\u4e86\u63d0\u4f9b\u7d66\u4ed6\u5011\u6700\u65b0\u7684\u8cc7\u8a0a\uff0c\u6211\u9700\u8981\u67e5\u770b\u860b\u679c\u516c\u53f8\u76ee\u524d\u7684\u80a1\u50f9\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u8a62\u6700\u65b0\u7684\u6578\u64da\u55ce\uff1f", "function": [{"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "integer", "description": "The amount of the loan."}, "interest_rate": {"type": "integer", "description": "The interest rate of the loan."}, "loan_period": {"type": "integer", "description": "The period of the loan."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "execution_result_type": ["real_time_match"], "ground_truth": ["get_stock_price_by_stock_name(stock_name='AAPL')"]}
{"id": "executable_multiple_function_28", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u500b\u5730\u7406\u5b78\u9805\u76ee\uff0c\u6d89\u53ca\u7e6a\u88fd\u5168\u7403\u4e0d\u540c\u5730\u9ede\u7684\u6642\u5340\u5730\u5716\u3002\u4f5c\u70ba\u9019\u500b\u9805\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u6211\u9700\u8981\u77e5\u9053\u7279\u5b9a\u5ea7\u6a19\u7684\u6642\u5340\u3002\u4f60\u80fd\u63d0\u4f9b\u6211\u7d93\u5ea6123.45\uff0c\u7def\u5ea6-67.89\u7684\u4f4d\u7f6e\u7684\u6642\u5340\u55ce\uff1f", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_time_zone_by_coord(long='123.45', lat='-67.89')"]}
{"id": "executable_multiple_function_29", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u9805\u6c23\u5019\u7814\u7a76\uff0c\u91cd\u9ede\u662f\u95dc\u6ce8\u5317\u6975\u7684\u6eab\u5ea6\u8b8a\u5316\uff0c\u6211\u9700\u8981\u5317\u6975\u7684\u6700\u65b0\u6eab\u5ea6\u8b80\u6578\u3002\u5177\u9ad4\u800c\u8a00\uff0c\u6211\u6b63\u5728\u67e5\u770b\u5ea7\u6a19\u70ba90.00\u7def\u5ea6\u548c0.00\u7d93\u5ea6\u7684\u9ede\u3002\u6211\u9700\u8981\u4f7f\u7528Open-Meteo API\u8a2a\u554f\u6b64\u7cbe\u78ba\u4f4d\u7f6e\u7684\u7576\u524d\u6eab\u5ea6\u6578\u64da\u3002\u4f60\u80fd\u5e6b\u6211\u7372\u53d6\u9019\u4e9b\u4fe1\u606f\u55ce\uff1f", "function": [{"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "integer", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}}], "execution_result_type": ["structural_match"], "ground_truth": ["get_weather_data(coordinates=[90.00, 0.00])"]}
{"id": "executable_multiple_function_30", "question": "\u6211\u76ee\u524d\u6b63\u8655\u65bc\u4e00\u500b\u7db2\u7d61\u5b89\u5168\u8abf\u67e5\u7684\u4e2d\u9593\u968e\u6bb5\uff0c\u6211\u5011\u767c\u73fe\u4e86\u4e00\u500b\u53ef\u7591\u7684IP\u5730\u5740\uff0c\u6211\u5011\u61f7\u7591\u5b83\u53ef\u80fd\u662f\u6700\u8fd1\u4e00\u6b21\u7db2\u7d61\u653b\u64ca\u7684\u4f86\u6e90\u3002\u8a72IP\u5730\u5740\u662f192.168.1.1\uff0c\u6211\u9700\u8981\u8ffd\u8e64\u5b83\u6240\u95dc\u806f\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u7e7c\u7e8c\u8abf\u67e5\u3002\u9996\u5148\uff0c\u4f60\u80fd\u627e\u51fa\u9019\u500bIP\u5730\u5740\u8a3b\u518a\u7684\u90f5\u905e\u5340\u865f\u55ce\uff1f", "function": [{"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "dict", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the city."}}, "required": ["zipcode"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_zipcode_by_ip_address(ip_address=\"192.168.1.1\")"]}
{"id": "executable_multiple_function_31", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u6578\u64da\u5206\u6790\u9805\u76ee\uff0c\u5176\u4e2d\u6211\u9700\u8981\u5c0d\u5169\u500b\u77e9\u9663\u9032\u884c\u4e58\u6cd5\u904b\u7b97\u3002\u6211\u9700\u8981\u8655\u7406\u7684\u7b2c\u4e00\u500b\u77e9\u9663\u662f[[1, 2], [3, 4]]\uff0c\u7b2c\u4e8c\u500b\u77e9\u9663\u662f[[5, 6], [7, 8]]\u3002\u6211\u9700\u8981\u8a08\u7b97\u9019\u5169\u500b\u77e9\u9663\u7684\u4e58\u7a4d\uff0c\u4ee5\u4fbf\u7e7c\u7e8c\u9032\u884c\u6211\u7684\u5206\u6790\u3002\u4f60\u80fd\u5e6b\u6211\u505a\u9019\u500b\u8a08\u7b97\u55ce\uff1f", "function": [{"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "dict", "properties": {"matA": {"type": "array", "description": "The first matrix.", "items": {"type": "array", "items": {"type": "integer"}}}, "matB": {"type": "array", "description": "The second matrix.", "items": {"type": "array", "items": {"type": "integer"}}}}, "required": ["matA", "matB"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["mat_mul(matA=[[1, 2], [3, 4]], matB=[[5, 6], [7, 8]])"]}
{"id": "executable_multiple_function_32", "question": "\u5728\u89e3\u6c7a\u4e00\u500b\u7d44\u5408\u6578\u5b78\u554f\u984c\u7684\u904e\u7a0b\u4e2d\uff0c\u6211\u9047\u5230\u4e86\u4e00\u500b\u9700\u8981\u8a08\u7b977\u7684\u968e\u4e58\u7684\u6b65\u9a5f\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["math_factorial(n=7)"]}
{"id": "executable_multiple_function_33", "question": "\u4f5c\u70ba\u4e00\u4f4d\u7814\u7a76\u53e4\u7f85\u99ac\u653f\u6cbb\u806f\u76df\u7684\u6b77\u53f2\u5b78\u5bb6\uff0c\u6211\u9047\u5230\u4e86\u4e00\u500b\u6709\u8da3\u7684\u6578\u5b78\u6311\u6230\u3002\u6211\u9700\u8981\u78ba\u5b9a\u5169\u500b\u4e0d\u540c\u6642\u671f\u7684\u53c3\u8b70\u54e1\u4eba\u6578\u7684\u6700\u5927\u516c\u7d04\u6578\uff0c\u4e00\u500b\u662f450\u540d\u53c3\u8b70\u54e1\uff0c\u53e6\u4e00\u500b\u662f300\u540d\u3002\u9019\u5c07\u5e6b\u52a9\u6211\u4e86\u89e3\u4ed6\u5011\u653f\u6cbb\u7d50\u69cb\u7684\u5171\u540c\u9ede\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b\u55ce\uff1f", "function": [{"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["math_gcd(a=450, b=300)"]}
{"id": "executable_multiple_function_34", "question": "\u6211\u6b63\u5728\u88fd\u4f5c\u4e00\u9996\u65b0\u7684\u66f2\u76ee\uff0c\u6211\u6709\u5169\u500b\u9f13\u5faa\u74b0\uff0c\u6211\u6b63\u5728\u8a66\u5716\u5c07\u5b83\u5011\u540c\u6b65\u3002\u7b2c\u4e00\u500b\u5faa\u74b0\u6bcf18\u62cd\u91cd\u8907\u4e00\u6b21\uff0c\u800c\u7b2c\u4e8c\u500b\u5faa\u74b0\u6bcf24\u62cd\u56de\u5230\u539f\u9ede\u3002\u6211\u9700\u8981\u5b83\u5011\u5b8c\u7f8e\u5730\u5c0d\u9f4a\uff0c\u4ee5\u4fbf\u5728\u6b4c\u66f2\u4e2d\u5275\u9020\u51fa\u7121\u7e2b\u7684\u7bc0\u594f\u3002\u4f60\u80fd\u8a08\u7b97\u51fa18\u548c24\u62cd\u7684\u6700\u5c0f\u516c\u500d\u6578\uff0c\u627e\u51fa\u5b83\u5011\u5c07\u5728\u591a\u5c11\u62cd\u5f8c\u540c\u6b65\u55ce\uff1f", "function": [{"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["math_lcm(a=24, b=18)"]}
{"id": "executable_multiple_function_35", "question": "\u6211\u6b63\u5728\u5354\u52a9\u4e00\u4f4d\u6b63\u5728\u8cfc\u8cb7\u623f\u5c4b\u7684\u5ba2\u6236\u3002\u4ed6\u5011\u6b63\u5728\u8003\u616e\u8cb8\u6b3e\u91d1\u984d\u70ba$350,000\u3002\u4ed6\u5011\u6240\u5f97\u5230\u7684\u5229\u7387\u662f3.5%\uff0c\u4e26\u8a08\u5283\u572830\u5e74\u5167\u511f\u9084\u3002\u6211\u9700\u8981\u70ba\u4ed6\u5011\u63d0\u4f9b\u6bcf\u6708\u4ed8\u6b3e\u7684\u4f30\u8a08\u3002\u4f60\u80fd\u5e6b\u6211\u7b97\u4e00\u4e0b\u55ce\uff1f", "function": [{"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount of the loan."}, "interest_rate": {"type": "float", "description": "The interest rate of the loan, ranging from 0 to 1."}, "loan_period": {"type": "integer", "description": "The period of the loan, in years."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)"]}
{"id": "executable_multiple_function_36", "question": "\u5728\u6211\u7684\u4e0b\u4e00\u5802\u4ee3\u6578\u8ab2\u4e2d\uff0c\u6211\u8a08\u5283\u8b1b\u89e3\u4e8c\u6b21\u65b9\u7a0b\u5f0f\u7684\u4e3b\u984c\u3002\u6211\u60f3\u63d0\u4f9b\u4e00\u500b\u5be6\u969b\u7684\u4f8b\u5b50\u4f86\u5e6b\u52a9\u6211\u7684\u5b78\u751f\u7406\u89e3\u5c0b\u627e\u6839\u7684\u6982\u5ff5\u3002\u56e0\u6b64\uff0c\u6211\u9078\u64c7\u4e86\u65b9\u7a0b\u5f0f3x^2 + 7x - 10 = 0\u4f86\u8207\u73ed\u4e0a\u4e00\u8d77\u89e3\u6c7a\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u9019\u500b\u7279\u5b9a\u65b9\u7a0b\u5f0f\u7684\u6839\u55ce\uff1f", "function": [{"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}, {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["quadratic_roots(a=3, b=7, c=-10)"]}
{"id": "executable_multiple_function_37", "question": "\u6211\u6b63\u5728\u5206\u6790\u4e00\u500b\u9805\u76ee\u7684\u4eba\u53e3\u7d71\u8a08\u6578\u64da\uff0c\u9700\u8981\u6839\u64da\u90f5\u653f\u7de8\u78bc\u4ea4\u53c9\u53c3\u8003\u4e00\u4e9b\u4fe1\u606f\u3002\u6211\u6709\u4e00\u500b\u7279\u5b9a\u7684\u90f5\u653f\u7de8\u78bc\uff0c\u6bd4\u5982\u8aaa90210\uff0c\u6211\u9700\u8981\u627e\u51fa\u5b83\u5c0d\u61c9\u7684\u57ce\u5e02\u662f\u54ea\u500b\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u9019\u500b\u90f5\u653f\u7de8\u78bc\u5c0d\u61c9\u7684\u57ce\u5e02\u540d\u7a31\u55ce\uff1f", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "dict", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the city."}}, "required": ["zipcode"]}}, {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["retrieve_city_based_on_zipcode(zipcode='90210')"]}
{"id": "executable_multiple_function_38", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u9805\u7814\u7a76\uff0c\u9700\u8981\u6211\u8abf\u67e5\u4e0d\u540c\u6587\u5316\u4e2d\u6176\u795d\u7684\u7bc0\u65e5\u4ee5\u53ca\u5b83\u5011\u5982\u4f55\u96a8\u8457\u5e74\u4ee3\u7684\u8b8a\u9077\u800c\u6f14\u8b8a\u3002\u4f5c\u70ba\u9019\u9805\u7814\u7a76\u7684\u4e00\u90e8\u5206\uff0c\u6211\u6b63\u5728\u5f59\u7de8\u5404\u500b\u570b\u5bb6\u7279\u5b9a\u5e74\u4efd\u7684\u570b\u5b9a\u5047\u65e5\u7684\u8cc7\u6599\u3002\u76ee\u524d\uff0c\u6211\u6b63\u5728\u5c08\u6ce8\u65bc\u6cd5\u570b\u3002\u6211\u9700\u8981\u77e5\u90532010\u5e74\u6cd5\u570b\u89c0\u5bdf\u7684\u5047\u65e5\u6e05\u55ae\u3002\u4f60\u80fd\u63d0\u4f9b\u9019\u4e9b\u8cc7\u8a0a\u7d66\u6211\u55ce\uff1f", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "dict", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["retrieve_holiday_by_year(year='2010', country='FR')"]}
{"id": "executable_multiple_function_39", "question": "\u6211\u9019\u88e1\u6709\u4e00\u500b\u6578\u64da\u96c6\uff0c\u9700\u8981\u6309\u7167\u5f9e\u9ad8\u5230\u4f4e\u7684\u503c\u6392\u5e8f\u3002\u6211\u6b63\u5728\u8655\u7406\u7684\u6578\u5b57\u662f34\u30012\u300156\u30017\u30019\u548c12\u3002\u4f60\u80fd\u5e6b\u6211\u628a\u5b83\u5011\u6309\u7167\u964d\u5e8f\u6392\u5e8f\u55ce\uff1f", "function": [{"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default to false"}}, "required": ["stock_name", "interval"]}}, {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "dict", "properties": {"array": {"type": "array", "items": {"type": "float"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order, i.e., descending order.", "default": false}}, "required": ["array"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["sort_array(array=[34, 2, 56, 7, 9, 12], reverse=True)"]}
{"id": "executable_multiple_function_40", "question": "\u6211\u9700\u8981\u8a08\u7b97\u4e8c\u9032\u5236\u6578\u5b57 '10011' \u548c '1100' \u7684\u7e3d\u548c\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, {"name": "convert_binary_to_decimal", "description": "Converts a binary number to a decimal number.", "parameters": {"type": "dict", "properties": {"binary": {"type": "string", "description": "The binary number to convert."}}, "required": ["binary"]}}, {"name": "convert_decimal_to_hex", "description": "Converts a decimal number to a hexadecimal number.", "parameters": {"type": "dict", "properties": {"decimal": {"type": "integer", "description": "The decimal number to convert."}}, "required": ["decimal"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["add_binary_numbers(a='10011',b='1100')"]}
{"id": "executable_multiple_function_41", "question": "\u6211\u4e00\u76f4\u5728\u9032\u884c\u4e00\u4e9b\u6578\u64da\u5206\u6790\uff0c\u9700\u8981\u64ec\u5408\u4e00\u500b\u7dda\u6027\u56de\u6b78\u6a21\u578b\u3002\u6211\u6709\u9019\u4e9b\u6578\u64da\u9ede\uff0cx\u5750\u6a19\u70ba[1\uff0c2\uff0c-3]\uff0c\u76f8\u61c9\u7684y\u5750\u6a19\u70ba[4\uff0c-5\uff0c6]\u3002\u6211\u60f3\u8981\u4e86\u89e3\u9019\u4e9b\u8b8a\u91cf\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u4e26\u4e14\u5c0dx\u70ba10\u6642\u9032\u884c\u9810\u6e2c\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "dict", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "integer"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "integer"}}, "point": {"type": "integer", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, {"name": "calculate_slope", "description": "Calculates the slope of the linear regression line from a set of points.", "parameters": {"type": "dict", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "integer"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "integer"}}}, "required": ["x", "y"]}}, {"name": "calculate_intercept", "description": "Calculates the y-intercept of the linear regression line from a set of points and a given slope.", "parameters": {"type": "dict", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "integer"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "integer"}}, "slope": {"type": "integer", "description": "The slope of the linear regression line."}}, "required": ["x", "y", "slope"]}}, {"name": "predict_value", "description": "Predicts the value of y given the slope, intercept, and an x value.", "parameters": {"type": "dict", "properties": {"slope": {"type": "integer", "description": "The slope of the linear regression line."}, "intercept": {"type": "integer", "description": "The y-intercept of the linear regression line."}, "x": {"type": "integer", "description": "The x value to predict the y for."}}, "required": ["slope", "intercept", "x"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["linear_regression(x=[1,2,-3],y=[4,-5,6],point=10)"]}
{"id": "executable_multiple_function_42", "question": "\u6211\u4e00\u76f4\u5728\u8a08\u5283\u6211\u7684\u8ca1\u52d9\u672a\u4f86\uff0c\u4e26\u6c7a\u5b9a\u9032\u884c\u4e00\u7b46\u521d\u59cb\u6295\u8cc7\uff0c\u91d1\u984d\u70ba10,000\u7f8e\u5143\uff0c\u96a8\u5f8c\u6bcf\u5e74\u518d\u6295\u51651,000\u7f8e\u5143\u3002\u6211\u7684\u6295\u8cc7\u8a08\u5283\u5c07\u6301\u7e8c5\u5e74\uff0c\u4e26\u9810\u671f\u6bcf\u5e74\u56de\u5831\u7387\u70ba5\uff05\u3002\u7136\u800c\uff0c\u6211\u4e5f\u610f\u8b58\u5230\u901a\u8ca8\u81a8\u8139\u53ef\u80fd\u6703\u5f71\u97ff\u6211\u7684\u6295\u8cc7\u50f9\u503c\uff0c\u56e0\u6b64\u6211\u9810\u8a08\u6bcf\u5e74\u7684\u901a\u8ca8\u81a8\u8139\u7387\u6703\u6709\u6240\u8b8a\u5316\uff1a\u7b2c\u4e00\u5e74\u70ba1\uff05\uff0c\u7b2c\u4e8c\u5e74\u70ba2\uff05\uff0c\u4f9d\u6b64\u985e\u63a8\uff0c\u6700\u5f8c\u5169\u5e74\u70ba4\uff05\u3002\u6211\u9700\u8981\u8a08\u7b97\u8003\u616e\u9019\u4e9b\u901a\u8ca8\u81a8\u8139\u7387\u5f8c\u7684\u6295\u8cc7\u5be6\u969b\u50f9\u503c\u3002\u60a8\u80fd\u63d0\u4f9b\u6211\u5728\u90195\u5e74\u671f\u9593\u8abf\u6574\u5f8c\u7684\u6295\u8cc7\u50f9\u503c\u55ce\uff1f", "function": [{"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, {"name": "compound_interest", "description": "Calculates compound interest over time.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The principal amount."}, "rate": {"type": "float", "description": "The annual interest rate."}, "times_compounded": {"type": "integer", "description": "The number of times the interest is compounded per year."}, "years": {"type": "integer", "description": "The number of years to calculate the compound interest for."}}, "required": ["principal", "rate", "times_compounded", "years"]}}, {"name": "inflation_adjustment", "description": "Adjusts an amount for inflation.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount to adjust for inflation."}, "inflation_rate": {"type": "float", "description": "The annual inflation float."}, "years": {"type": "integer", "description": "The number of years to adjust for inflation."}}, "required": ["amount", "inflation_rate", "years"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=10000, annual_contribution=1000, years=5, annual_return=0.05, inflation_rate=[0.01,0.02,0.03,0.04,0.04])"]}
{"id": "executable_multiple_function_43", "question": "\u6211\u5df2\u7d93\u6e96\u5099\u4e86100\u842c\u7f8e\u5143\u4f5c\u70ba\u521d\u59cb\u6295\u8cc7\uff0c\u4e26\u8a08\u5283\u6bcf\u5e74\u589e\u52a01000\u7f8e\u5143\u3002\u6211\u6b63\u5728\u8003\u616e\u672a\u4f86\u4e09\u5e74\u7684\u6f5b\u5728\u5e74\u5229\u7387\u70ba10\uff05\u3002\u7136\u800c\uff0c\u6211\u4e5f\u60f3\u8003\u616e\u901a\u8ca8\u81a8\u8139\u7387\uff0c\u6211\u9810\u8a08\u7b2c\u4e00\u5e74\u70ba1\uff05\uff0c\u63a5\u4e0b\u4f86\u5169\u5e74\u70ba4\uff05\u3002\u6211\u9700\u8981\u8a08\u7b97\u8003\u616e\u9019\u4e9b\u901a\u8ca8\u81a8\u8139\u7387\u5f8c\uff0c\u6295\u8cc7\u5728\u4e09\u5e74\u5f8c\u7684\u50f9\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment with periodic contributions.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_contribution": {"type": "integer", "description": "The amount contributed to the investment annually."}, "years": {"type": "integer", "description": "The number of years the investment will grow."}, "rate_of_return": {"type": "float", "description": "The annual rate of return on the investment."}}, "required": ["present_value", "annual_contribution", "years", "rate_of_return"]}}, {"name": "adjust_for_inflation", "description": "Adjusts the investment value for inflation for each year.", "parameters": {"type": "dict", "properties": {"investment_value": {"type": "float", "description": "The value of the investment to adjust."}, "inflation_rates": {"type": "array", "items": {"type": "float"}, "description": "The inflation rates for each year."}}, "required": ["investment_value", "inflation_rates"]}}, {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.10, inflation_rate=[0.01, 0.04, 0.04])"]}
{"id": "executable_multiple_function_44", "question": "\u6211\u4e00\u76f4\u5728\u5e6b\u52a9\u6211\u7684\u7956\u6bcd\u904e\u4e0a\u66f4\u5065\u5eb7\u7684\u751f\u6d3b\u3002\u5979\u5df2\u7d9380\u6b72\u4e86\uff0c\u6211\u5011\u6700\u8fd1\u4e00\u76f4\u5f88\u6d3b\u8e8d\u3002\u5979\u8eab\u9ad8170\u5398\u7c73\uff0c\u9ad4\u91cd59\u516c\u65a4\u3002\u8003\u616e\u5230\u6211\u5011\u7dad\u6301\u4e86\u4f60\u63d0\u4f9b\u7684\u6d3b\u52d5\u6c34\u5e734\uff0c\u6211\u5011\u7684\u76ee\u6a19\u662f\u6e1b\u91cd\u3002\u80fd\u5426\u6839\u64da\u9019\u4e9b\u7d30\u7bc0\u8a08\u7b97\u5979\u7684\u71df\u990a\u9700\u6c42\uff1f", "function": [{"name": "calculate_basal_metabolic_rate", "description": "Calculates the Basal Metabolic Rate (BMR) of a person.", "parameters": {"type": "dict", "properties": {"weight": {"type": "float", "description": "The weight of the person in kilograms."}, "height": {"type": "float", "description": "The height of the person in centimeters."}, "age": {"type": "float", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}}, "required": ["weight", "height", "age", "gender"]}}, {"name": "calculate_daily_energy_expenditure", "description": "Calculates the daily energy expenditure based on BMR and activity level.", "parameters": {"type": "dict", "properties": {"basal_metabolic_rate": {"type": "float", "description": "The BMR of the person."}, "activity_level": {"type": "float", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}}, "required": ["basal_metabolic_rate", "activity_level"]}}, {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "dict", "properties": {"weight": {"type": "float", "description": "The weight of the person in kilograms."}, "height": {"type": "float", "description": "The height of the person in centimeters."}, "age": {"type": "float", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "float", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_nutritional_needs(weight=59,height=170,age=80,gender='female',activity_level=4,goal='lose')"]}
{"id": "executable_multiple_function_45", "question": "\u6211\u60f3\u8981\u70ba\u4e00\u4f4d\u5ba2\u6236\uff08ID\u70ba123\uff09\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u623f\u9593\u3002\u4ed6\u5011\u5c07\u65bc2024\u5e748\u670811\u65e5\u81f38\u670815\u65e5\u5165\u4f4f\u3002\u623f\u9593\u7684\u6bcf\u665a\u50f9\u683c\u70ba1000\u7f8e\u5143\u3002\u4f60\u80fd\u5e6b\u6211\u8655\u7406\u9810\u8a02\u55ce\uff1f", "function": [{"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "dict", "description": "The room type to book."}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY."}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, {"name": "calculate_total_price", "description": "Calculates the total price of the room booking.", "parameters": {"type": "dict", "properties": {"room_price": {"type": "float", "description": "The price per night of the room."}, "nights": {"type": "integer", "description": "The number of nights for the booking."}, "discount": {"type": "float", "description": "The discount amount (if any).", "default": 0}}, "required": ["room_price", "nights"]}}, {"name": "confirm_booking", "description": "Confirms the room booking and sends a confirmation to the customer.", "parameters": {"type": "dict", "properties": {"customer_id": {"type": "string", "description": "The customer ID."}, "room_number": {"type": "string", "description": "The room number assigned to the booking."}, "total_price": {"type": "float", "description": "The total price for the booking."}}, "required": ["customer_id", "room_number", "total_price"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='deluxe',price=1000,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]}
{"id": "executable_multiple_function_46", "question": "\u6211\u6253\u7b97\u4eca\u665a\u4e3b\u8fa6\u4e00\u500b\u665a\u5bb4\uff0c\u60f3\u8981\u6e96\u5099\u4e00\u4e9b\u7f8e\u5473\u7684\u9903\u5b50\u548c\u98ef\u7897\u3002\u6211\u9700\u8981\u8a02\u8cfc101\u500b\u9903\u5b50\uff0c\u6bcf\u500b\u9903\u5b500.1\u7f8e\u5143\uff0c\u4ee5\u53ca20\u500b\u98ef\u7897\uff0c\u6bcf\u500b\u98ef\u789710\u7f8e\u5143\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u7b46\u8a02\u55ae\u7684\u7e3d\u50f9\u683c\u55ce\uff1f", "function": [{"name": "order_food", "description": "Orders food for a customer. Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string"}, "description": "the name of the product."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "the number of the product purchased."}, "price": {"type": "array", "items": {"type": "float"}, "description": "the price of the product."}}, "required": ["item", "quantity", "price"]}}, {"name": "calculate_total", "description": "Calculates the total price of an order given the quantities and prices.", "parameters": {"type": "dict", "properties": {"quantities": {"type": "array", "items": {"type": "integer"}, "description": "The quantities of each product."}, "prices": {"type": "array", "items": {"type": "float"}, "description": "The price of each product."}}, "required": ["quantities", "prices"]}}, {"name": "apply_discount", "description": "Applies a discount to the total price.", "parameters": {"type": "dict", "properties": {"total": {"type": "float", "description": "The original total price."}, "discount": {"type": "float", "description": "The discount percentage to apply."}}, "required": ["total", "discount"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["order_food(item=['dumplings','rice bowl'], quantity=[101,20], price=[0.1,10])"]}
{"id": "executable_multiple_function_47", "question": "\u6211\u525b\u525b\u91cd\u65b0\u89c0\u770b\u4e86\u300a\u4f4e\u4fd7\u5c0f\u8aaa\u300b\uff0c\u5c0d\u65bc\u9019\u90e8\u96fb\u5f71\u80cc\u5f8c\u7684\u6307\u5c0e\u5927\u5e2b\u5f88\u611f\u8208\u8da3\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u9019\u90e8\u6a19\u8a8c\u6027\u96fb\u5f71\u7684\u5c0e\u6f14\u662f\u8ab0\u55ce\uff1f", "function": [{"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, {"name": "calculate_interest_rate", "description": "Calculates the interest rate for a given principal, rate, and time.", "parameters": {"type": "dict", "properties": {"principal": {"type": "float", "description": "The initial amount of money."}, "rate": {"type": "float", "description": "The interest rate per period."}, "time": {"type": "float", "description": "The time the money is invested or borrowed for."}}, "required": ["principal", "rate", "time"]}}, {"name": "convert_temperature", "description": "Converts temperature from Celsius to Fahrenheit or vice versa.", "parameters": {"type": "dict", "properties": {"temperature": {"type": "float", "description": "The temperature to convert."}, "unit_from": {"type": "string", "description": "The current unit of the temperature (Celsius or Fahrenheit)."}, "unit_to": {"type": "string", "description": "The unit to convert the temperature to (Celsius or Fahrenheit)."}}, "required": ["temperature", "unit_from", "unit_to"]}}, {"name": "generate_random_number", "description": "Generates a random number within a specified range.", "parameters": {"type": "dict", "properties": {"min": {"type": "integer", "description": "The minimum value of the range."}, "max": {"type": "integer", "description": "The maximum value of the range."}}, "required": ["min", "max"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_director(movie_name='Pulp Fiction')"]}
{"id": "executable_multiple_function_48", "question": "\u6211\u6b63\u5728\u8a08\u5283\u9019\u500b\u9031\u672b\u70ba\u6211\u7684\u5bb6\u4eba\u8209\u8fa6\u4e00\u500b\u96fb\u5f71\u4e4b\u591c\uff0c\u6211\u60f3\u78ba\u4fdd\u9019\u90e8\u96fb\u5f71\u9069\u5408\u6240\u6709\u5e74\u9f61\u5c64\u89c0\u770b\u3002\u6211\u5011\u5df2\u7d93\u6c7a\u5b9a\u8981\u770b\u300a\u963f\u51e1\u9054\u300b\uff0c\u4f46\u6211\u9700\u8981\u78ba\u8a8d\u5b83\u7684\u5e74\u9f61\u5206\u7d1a\u624d\u80fd\u7e7c\u7e8c\u3002\u4f60\u80fd\u5e6b\u5fd9\u67e5\u8a62\u4e00\u4e0b\u96fb\u5f71\u300a\u963f\u51e1\u9054\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": [{"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, {"name": "get_movie_genre", "description": "Retrieves the genre of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie to retrieve the genre for."}}, "required": ["movie_name"]}}, {"name": "get_director_by_movie_name", "description": "Gets the director of a movie.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The movie to find the director of."}}, "required": ["movie_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Avatar')"]}
{"id": "executable_multiple_function_49", "question": "\u6211\u6709\u4e00\u7d44\u9802\u9ede\uff1a[[1,2],[3,4],[1,4],[3,7]]\uff0c\u6211\u5f88\u597d\u5947\u9019\u4e9b\u9ede\u9023\u63a5\u8d77\u4f86\u5f8c\u6240\u5f62\u6210\u7684\u591a\u908a\u5f62\u7684\u9762\u7a4d\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4e00\u4e0b\u9019\u500b\u591a\u908a\u5f62\u7684\u9762\u7a4d\u55ce\uff1f", "function": [{"name": "convert_coordinates", "description": "Converts a list of tuples into a list of lists.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "tuple", "items": {"type": "float"}, "description": "A single coordinate represented by a tuple (x, y)."}, "description": "The coordinates to be converted, where each coordinate is a tuple (x, y)."}}, "required": ["coordinates"]}}, {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "dict", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "float"}, "minItems": 2, "maxItems": 2, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, {"name": "validate_polygon", "description": "Checks if the given vertices form a valid polygon.", "parameters": {"type": "dict", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "float"}, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])"]}