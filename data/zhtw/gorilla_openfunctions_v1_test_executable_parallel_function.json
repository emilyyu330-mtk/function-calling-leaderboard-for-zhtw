{"id": "executable_parallel_function_0", "question": "\u6211\u6b63\u5728\u8a66\u8457\u4e86\u89e3\u5728\u4e00\u5834\u6bcf\u56de\u5408\u670930%\u52dd\u7387\u7684\u904a\u6232\u4e2d\uff0c\u6211\u6709\u591a\u5c11\u6a5f\u6703\u80fd\u8d0f\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u572810\u56de\u5408\u4e2d\u6070\u597d\u8d0f3\u6b21\u7684\u6982\u7387\u55ce\uff1f\u540c\u6642\uff0c\u6211\u4e5f\u60f3\u77e5\u9053\u572815\u56de\u5408\u4e2d\u8d0f5\u6b21\u548c\u572820\u56de\u5408\u4e2d\u8d0f7\u6b21\u7684\u6a5f\u7387\u3002", "function": {"name": "calc_binomial_probability", "description": "Calculates the probability of getting k successes in n trials.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of trials."}, "k": {"type": "integer", "description": "The number of successes."}, "p": {"type": "float", "description": "The probability of success."}}, "required": ["n", "k", "p"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calc_binomial_probability(n=10, k=3, p=0.3)", "calc_binomial_probability(n=15, k=5, p=0.3)", "calc_binomial_probability(n=20, k=7, p=0.3)"]}
{"id": "executable_parallel_function_1", "question": "\u6211\u6b63\u5728\u6539\u5584\u6211\u7684\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u4e2d\u7684\u6578\u64da\u9ede\uff0c\u9700\u8981\u6bd4\u8f03\u5e7e\u7d44\u5411\u91cf\u5c0d\u7684\u76f8\u4f3c\u5ea6\u4f86\u5fae\u8abf\u7cfb\u7d71\u3002\u4f60\u53ef\u4ee5\u8a08\u7b97\u4ee5\u4e0b\u5e7e\u7d44\u5c0d\u7684\u9918\u5f26\u76f8\u4f3c\u5ea6\u55ce\uff1f\u7b2c\u4e00\u7d44\u5c0d\u662f[0.5\uff0c0.7\uff0c0.2\uff0c0.9\uff0c0.1]\u548c[0.3\uff0c0.6\uff0c0.2\uff0c0.8\uff0c0.1]\u3002\u7b2c\u4e8c\u7d44\u5c0d\u662f[0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0]\u548c[1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2]\u3002\u6700\u5f8c\uff0c\u6211\u9084\u6709[0.1\uff0c0.2\uff0c0.3\uff0c0.4\uff0c0.5]\u548c[0.5\uff0c0.4\uff0c0.3\uff0c0.2\uff0c0.1]\u8981\u6bd4\u8f03\u3002", "function": {"name": "calculate_cosine_similarity", "description": "Calculates the cosine similarity of two vectors.", "parameters": {"type": "dict", "properties": {"vectorA": {"type": "array", "items": {"type": "float"}, "description": "The first vector."}, "vectorB": {"type": "array", "items": {"type": "float"}, "description": "The second vector."}}, "required": ["vectorA", "vectorB"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_cosine_similarity(vectorA=[0.5, 0.7, 0.2, 0.9, 0.1], vectorB=[0.3, 0.6, 0.2, 0.8, 0.1])", "calculate_cosine_similarity(vectorA=[0.2, 0.4, 0.6, 0.8, 1.0], vectorB=[1.0, 0.8, 0.6, 0.4, 0.2])", "calculate_cosine_similarity(vectorA=[0.1, 0.2, 0.3, 0.4, 0.5], vectorB=[0.5, 0.4, 0.3, 0.2, 0.1])"]}
{"id": "executable_parallel_function_2", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u5be6\u9a57\uff0c\u4f7f\u7528\u56db\u7a2e\u4e0d\u540c\u6750\u6599\u7684\u7269\u9ad4\uff0c\u6211\u9700\u8981\u8a08\u7b97\u5b83\u5011\u7684\u5bc6\u5ea6\u3002\u6211\u5df2\u7d93\u6e2c\u91cf\u4e86\u5b83\u5011\u7684\u8cea\u91cf\u548c\u9ad4\u7a4d\u3002\u91d1\u5c6c\u7acb\u65b9\u9ad4\u91cd500\u514b\uff0c\u4f54\u7528100\u7acb\u65b9\u5398\u7c73\uff0c\u5851\u6599\u7403\u9ad4\u91cd200\u514b\uff0c\u4f54\u752850\u7acb\u65b9\u5398\u7c73\uff0c\u6728\u584a\u91cd300\u514b\uff0c\u9ad4\u7a4d\u70ba75\u7acb\u65b9\u5398\u7c73\uff0c\u6700\u5f8c\uff0c\u73bb\u7483\u5713\u67f1\u9ad4\u91cd400\u514b\uff0c\u9ad4\u7a4d\u70ba80\u7acb\u65b9\u5398\u7c73\u3002\u6211\u60f3\u8981\u78ba\u5b9a\u6bcf\u500b\u7269\u9ad4\u7684\u5bc6\u5ea6\u3002", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_density(mass=0.5, volume=0.0001)", "calculate_density(mass=0.2, volume=0.00005)", "calculate_density(mass=0.3, volume=0.000075)", "calculate_density(mass=0.4, volume=0.00008)"]}
{"id": "executable_parallel_function_3", "question": "\u6211\u4e00\u76f4\u5728\u9032\u884c\u95dc\u65bc\u629b\u5c04\u904b\u52d5\u7684\u5be6\u9a57\uff0c\u4e26\u5f9e\u6700\u8fd1\u4e00\u7d44\u8a66\u9a57\u4e2d\u6536\u96c6\u4e86\u4e00\u4e9b\u6578\u64da\u3002\u6211\u4f7f\u7528\u4e86\u4e00\u500b\u5f48\u5f13\u4f86\u767c\u5c04\u4e09\u7a2e\u4e0d\u540c\u7684\u7269\u9ad4\uff0c\u4e26\u8a18\u9304\u4e86\u5b83\u5011\u7684\u521d\u59cb\u901f\u5ea6\u548c\u7a7a\u4e2d\u505c\u7559\u7684\u6642\u9593\u3002\u9019\u662f\u6211\u7684\u6578\u64da\uff1a\u4e00\u584a\u521d\u59cb\u901f\u5ea6\u70ba20\u7c73/\u79d2\u7684\u77f3\u982d\uff0c\u4e00\u500b\u521d\u59cb\u901f\u5ea6\u70ba30\u7c73/\u79d2\u7684\u6a61\u76ae\u7403\uff0c\u548c\u4e00\u500b\u521d\u59cb\u901f\u5ea6\u70ba25\u7c73/\u79d2\u7684\u91d1\u5c6c\u7403\u3002\u6240\u6709\u7269\u9ad4\u90fd\u56e0\u91cd\u529b\u800c\u7d93\u6b77\u4e86-9.8\u7c73/\u79d2\u00b2\u7684\u52a0\u901f\u5ea6\uff0c\u4e26\u5728\u904b\u52d5\u4e865\u79d2\u5f8c\u505c\u6b62\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u6bcf\u500b\u7269\u9ad4\u5728\u90195\u79d2\u5f8c\u7684\u4f4d\u79fb\u55ce\uff1f", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_displacement(initial_velocity=20, acceleration=-9.8, time=5)", "calculate_displacement(initial_velocity=30, acceleration=-9.8, time=5)", "calculate_displacement(initial_velocity=25, acceleration=-9.8, time=5)"]}
{"id": "executable_parallel_function_4", "question": "\u6211\u6b63\u5728\u5f9e\u4e8b\u4e00\u9805\u95dc\u65bc\u975c\u96fb\u76f8\u4e92\u4f5c\u7528\u7684\u7814\u7a76\uff0c\u76ee\u524d\u6b63\u5728\u5206\u6790\u4e0d\u540c\u5e36\u96fb\u7269\u9ad4\u5728\u4e0d\u540c\u96fb\u58d3\u4e0b\u7684\u884c\u70ba\u3002\u5c0d\u65bc\u6211\u7684\u5be6\u9a57\uff0c\u6211\u6709\u4e00\u500b\u5e36\u67091.6 x 10^-19 \u5e93\u4ed1\u7684\u8d28\u5b50\u5728500\u4f0f\u7279\u7684\u5834\u4e2d\uff0c\u4e00\u500b\u5e36\u6709-1.6 x 10^-19 \u5e93\u4ed1\u7684\u96fb\u5b50\u57281000\u4f0f\u7279\u7684\u5834\u4e2d\uff0c\u4ee5\u53ca\u4e00\u500b\u57fa\u672c\u4e0a\u6c92\u6709\u96fb\u8377\u7684\u4e2d\u5b50\u57282000\u4f0f\u7279\u7684\u5834\u4e2d\u3002\u6211\u9700\u8981\u8a08\u7b97\u6bcf\u7a2e\u60c5\u6cc1\u4e0b\u7684\u975c\u96fb\u52e2\u80fd\u3002\u6211\u5011\u53ef\u4ee5\u9032\u884c\u9019\u4e9b\u8a08\u7b97\u55ce\uff1f", "function": {"name": "calculate_electrostatic_potential_energy", "description": "Calculates the electrostatic potential energy.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge of the object, in coulombs."}, "voltage": {"type": "float", "description": "The voltage of the object, in volts."}}, "required": ["charge", "voltage"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_electrostatic_potential_energy(charge=1.6e-19, voltage=500)", "calculate_electrostatic_potential_energy(charge=-1.6e-19, voltage=1000)", "calculate_electrostatic_potential_energy(charge=0, voltage=2000)"]}
{"id": "executable_parallel_function_5", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u7269\u7406\u5be6\u9a57\uff0c\u4ee5\u4e86\u89e3\u904b\u52d5\u7684\u539f\u7406\uff0c\u5be6\u9a57\u7684\u4e00\u90e8\u5206\u662f\u8ffd\u8e64\u4e0d\u540c\u7269\u9ad4\u7684\u901f\u5ea6\u3002\u6211\u9019\u88e1\u6709\u6e2c\u91cf\u6578\u64da\uff0c\u6211\u9700\u8981\u8a08\u7b97\u6700\u7d42\u901f\u5ea6\u3002\u5c0d\u65bc\u6c7d\u8eca\uff0c\u5b83\u8d77\u59cb\u901f\u5ea6\u70ba\u6bcf\u79d25\u7c73\uff0c\u4e26\u4ee5\u6bcf\u79d2\u5e73\u65b92\u7c73\u7684\u901f\u7387\u52a0\u901f\uff0c\u7e3d\u8a08\u6301\u7e8c10\u79d2\u3002\u81ea\u884c\u8eca\u7684\u8d77\u59cb\u901f\u5ea6\u70ba\u6bcf\u79d22\u7c73\uff0c\u52a0\u901f\u5ea6\u70ba\u6bcf\u79d2\u5e73\u65b91\u7c73\uff0c\u6301\u7e8c15\u79d2\u3002\u6700\u5f8c\uff0c\u6ed1\u677f\u8d77\u59cb\u901f\u5ea6\u70ba\u6bcf\u79d21\u7c73\uff0c\u52a0\u901f\u5ea6\u70ba\u6bcf\u79d2\u5e73\u65b90.5\u7c73\uff0c\u6301\u7e8c20\u79d2\u3002\u4f60\u80fd\u8a08\u7b97\u9019\u4e9b\u6578\u5b57\u4e26\u7d66\u6211\u6c7d\u8eca\u3001\u81ea\u884c\u8eca\u548c\u6ed1\u677f\u7684\u6700\u7d42\u901f\u5ea6\u55ce\uff1f", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object."}, "acceleration": {"type": "float", "description": "The acceleration of the object."}, "time": {"type": "float", "description": "The time the object has been moving."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_final_velocity(initial_velocity=5, acceleration=2, time=10)", "calculate_final_velocity(initial_velocity=2, acceleration=1, time=15)", "calculate_final_velocity(initial_velocity=1, acceleration=0.5, time=20)"]}
{"id": "executable_parallel_function_6", "question": "\u6211\u76ee\u524d\u6b63\u5728\u8a55\u4f30\u4e00\u4e9b\u6295\u8cc7\u9078\u64c7\uff0c\u6211\u60f3\u4e86\u89e3\u5b83\u5011\u96a8\u8457\u6642\u9593\u7684\u6f5b\u5728\u589e\u9577\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u6bcf\u500b\u9078\u9805\u7684\u672a\u4f86\u50f9\u503c\u55ce\uff1f\u4ee5\u4e0b\u662f\u8a73\u7d30\u8cc7\u8a0a\uff1a\n\n1. \u5c0d\u65bc\u4e00\u7b46\u521d\u59cb\u6295\u8cc7\u70ba$5000\u3001\u5e74\u5229\u7387\u70ba5%\u3001\u671f\u9650\u70ba10\u5e74\u7684\u50b5\u5238\u3002\n2. \u5c0d\u65bc\u4e00\u500b\u4ee5$2000\u8d77\u59cb\u3001\u5e74\u589e\u9577\u7387\u70ba7%\u3001\u6301\u670915\u5e74\u7684\u5171\u540c\u57fa\u91d1\u3002\n3. \u5c0d\u65bc\u4e00\u500b\u4ee5$1000\u8d77\u59cb\u3001\u5e74\u589e\u9577\u7387\u70ba10%\u3001\u6301\u670920\u5e74\u7684\u80a1\u7968\u3002\n\n\u6211\u9700\u8981\u4e86\u89e3\u672a\u4f86\u50f9\u503c\u4ee5\u505a\u51fa\u660e\u667a\u7684\u6c7a\u5b9a\u3002", "function": {"name": "calculate_future_value", "description": "Calculates the future value of an investment.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "float", "description": "The present value of the investment, in dollars."}, "interest_rate": {"type": "float", "description": "The interest rate of the investment, ranging from 0 to 1."}, "periods": {"type": "integer", "description": "The number of periods, in years."}}, "required": ["present_value", "interest_rate", "periods"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_future_value(present_value=5000, interest_rate=0.05, periods=10)", "calculate_future_value(present_value=2000, interest_rate=0.07, periods=15)", "calculate_future_value(present_value=1000, interest_rate=0.1, periods=20)"]}
{"id": "executable_parallel_function_7", "question": "\u6211\u4e00\u76f4\u5728\u8ffd\u8e64\u5e7e\u9805\u4e0d\u540c\u7684\u7d71\u8a08\u6578\u64da\uff0c\u6211\u9700\u8981\u8a08\u7b97\u4e00\u4e9b\u5e73\u5747\u503c\u4f86\u5206\u6790\u8da8\u52e2\u3002\u9996\u5148\uff0c\u6709\u4e00\u4f4d\u7c43\u7403\u904b\u52d5\u54e1\u5728\u904e\u53bb\u7684\u4e94\u5834\u6bd4\u8cfd\u4e2d\u5f97\u5206\u5206\u5225\u70ba35\u300140\u300145\u300150\u548c55\u5206\u3002\u6211\u5c0d\u4ed6\u7684\u5e73\u5747\u8868\u73fe\u5f88\u611f\u8208\u8da3\u3002\u63a5\u4e0b\u4f86\uff0c\u6211\u8a18\u9304\u4e86\u904e\u53bb\u4e00\u5468\u7684\u6eab\u5ea6\uff1a\u83ef\u6c0f72\u300175\u300178\u300180\u300182\u548c85\u5ea6\u3002\u6211\u9700\u8981\u9031\u5e73\u5747\u6eab\u5ea6\u3002\u6700\u5f8c\uff0c\u6211\u6ce8\u610f\u5230\u9019\u500b\u6708\u4e00\u6253\u96de\u86cb\u7684\u50f9\u683c\u6709\u6240\u6ce2\u52d5\u3002\u50f9\u683c\u5206\u5225\u70ba1.50\u7f8e\u5143\u30011.55\u7f8e\u5143\u30011.60\u7f8e\u5143\u30011.65\u7f8e\u5143\u548c1.70\u7f8e\u5143\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u5e73\u5747\u50f9\u683c\u55ce\uff1f", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_mean(numbers=[35, 40, 45, 50, 55])", "calculate_mean(numbers=[72, 75, 78, 80, 82, 85])", "calculate_mean(numbers=[1.50, 1.55, 1.60, 1.65, 1.70])"]}
{"id": "executable_parallel_function_8", "question": "\u6211\u6b63\u5728\u70ba\u6211\u7684\u7d71\u8a08\u8ab2\u7a0b\u505a\u5e7e\u500b\u6982\u7387\u554f\u984c\uff0c\u6211\u9700\u8981\u8a08\u7b97\u4e00\u4e9b\u6392\u5217\u7d44\u5408\u3002\u4f60\u53ef\u4ee5\u5e6b\u6211\u8a08\u7b97\u4ee5\u4e0b\u5e7e\u500b\u554f\u984c\u55ce\uff1a\n\n1. \u5982\u679c\u6211\u670920\u672c\u66f8\u53ef\u4f9b\u9078\u64c7\uff0c\u6709\u591a\u5c11\u7a2e\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u5c075\u672c\u66f8\u6392\u5217\u5728\u66f8\u67b6\u4e0a\u3002\n2. \u5c0d\u65bc\u6211\u7684\u7c43\u7403\u968a\u5c08\u6848\uff0c\u6211\u9700\u8981\u77e5\u9053\u572812\u540d\u7403\u54e1\u4e2d\uff0c\u6709\u591a\u5c11\u7a2e\u4e0d\u540c\u7684\u9663\u5bb9\u53ef\u4ee5\u5728\u7403\u5834\u4e0a\u4f7f\u75285\u540d\u7403\u54e1\u3002\n3. \u6700\u5f8c\uff0c\u5c0d\u65bc\u6211\u6b63\u5728\u8a08\u5283\u7684\u665a\u5bb4\u6d3b\u52d5\uff0c\u6211\u60f3\u77e5\u9053\u5f9e\u83dc\u55ae\u4e0a\u768410\u9053\u4e3b\u83dc\u4e2d\u9078\u64c73\u9053\u7684\u4e0d\u540c\u7d44\u5408\u6709\u591a\u5c11\u7a2e\u3002\n\n\u8acb\u63d0\u4f9b\u9019\u4e9b\u6392\u5217\u7d44\u5408\u7684\u8a08\u7b97\u7d50\u679c\u3002", "function": {"name": "calculate_permutations", "description": "Calculates the number of permutations of k elements from a set of n elements.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of elements in the set."}, "k": {"type": "integer", "description": "The number of elements to choose."}}, "required": ["n", "k"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_permutations(n=20, k=5)", "calculate_permutations(n=12, k=5)", "calculate_permutations(n=10, k=3)"]}
{"id": "executable_parallel_function_9", "question": "\u6211\u6709\u4e09\u7d44\u4e0d\u540c\u7684\u6578\u64da\u96c6\u6b63\u5728\u9032\u884c\u5206\u6790\u3002\u9996\u5148\uff0c\u6211\u6709\u4e00\u4efd\u6700\u8fd1\u8abf\u67e5\u4e2d\u7684\u5e74\u9f61\u5217\u8868\uff0c\u5305\u62ec23\u6b72\u300134\u6b72\u300145\u6b72\u300156\u6b72\u300167\u6b72\u300178\u6b72\u548c89\u6b72\u3002\u63a5\u4e0b\u4f86\uff0c\u6709\u672c\u9031\u6211\u5011\u5546\u5e97\u5eab\u5b58\u7684\u50f9\u683c\u6578\u64da\uff1a$10\u3001$20\u3001$30\u3001$40\u3001$50\u548c$60\u3002\u6700\u5f8c\uff0c\u6211\u6b63\u5728\u67e5\u770b\u6211\u5011\u7c43\u7403\u968a\u4e0a\u500b\u8cfd\u5b63\u7684\u5f97\u5206\uff1a90\u5206\u300180\u5206\u300170\u5206\u300160\u5206\u300150\u5206\u548c40\u5206\u3002\u5c0d\u65bc\u6bcf\u7d44\u6578\u64da\uff0c\u6211\u9700\u8981\u8a08\u7b97\u6a19\u6e96\u5dee\u4ee5\u4e86\u89e3\u6bcf\u7d44\u5167\u7684\u8b8a\u7570\u6027\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": {"name": "calculate_standard_deviation", "description": "Calculates the standard deviation of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_standard_deviation(numbers=[23, 34, 45, 56, 67, 78, 89])", "calculate_standard_deviation(numbers=[10, 20, 30, 40, 50, 60])", "calculate_standard_deviation(numbers=[90, 80, 70, 60, 50, 40])"]}
{"id": "executable_parallel_function_10", "question": "\u6211\u9700\u8981\u8a08\u7b97\u4e09\u500b\u4e0d\u540c\u4e09\u89d2\u5f62\u7684\u9762\u7a4d\uff0c\u9019\u662f\u6211\u6b63\u5728\u9032\u884c\u7684\u4e00\u500b\u5efa\u7bc9\u9805\u76ee\u3002\u7b2c\u4e00\u500b\u4e09\u89d2\u5f62\u7684\u5e95\u70ba15\u7c73\uff0c\u9ad8\u70ba20\u7c73\uff0c\u7b2c\u4e8c\u500b\u4e09\u89d2\u5f62\u7684\u5e95\u70ba25\u82f1\u5c3a\uff0c\u9ad8\u70ba30\u82f1\u5c3a\uff0c\u6700\u5f8c\u4e00\u500b\u4e09\u89d2\u5f62\u7684\u5e95\u548c\u9ad8\u5206\u5225\u70ba35\u82f1\u5bf8\u548c40\u82f1\u5bf8\u3002\u4f60\u80fd\u7d66\u6211\u6bcf\u500b\u4e09\u89d2\u5f62\u7684\u9762\u7a4d\u55ce\uff1f", "function": {"name": "calculate_triangle_area", "description": "Calculates the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base of the triangle, in meters."}, "height": {"type": "integer", "description": "The height of the triangle, in meters."}}, "required": ["base", "height"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_triangle_area(base=15, height=20)", "calculate_triangle_area(base=25, height=30)", "calculate_triangle_area(base=35, height=40)"]}
{"id": "executable_parallel_function_11", "question": "\u6211\u6b63\u5728\u8a08\u5283\u4e00\u6b21\u8de8\u570b\u65c5\u884c\uff0c\u9700\u8981\u5728\u4e0d\u540c\u8ca8\u5e63\u4e2d\u9810\u7b97\u6211\u7684\u958b\u652f\u3002\u6211\u67095000\u65e5\u5143\u9700\u8981\u8f49\u63db\u6210\u7f8e\u5143\u3001\u6b50\u5143\u548c\u6fb3\u5143\uff0c\u4ee5\u4e86\u89e3\u6211\u5728\u6bcf\u500b\u5730\u5340\u53ef\u4ee5\u82b1\u591a\u5c11\u9322\u3002\u6b64\u5916\uff0c\u6211\u9084\u6709100\u52a0\u5143\uff0c\u6211\u5f88\u597d\u5947\u5b83\u5728\u745e\u58eb\u6cd5\u90ce\u4e2d\u7684\u50f9\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u4e9b\u8f49\u63db\u55ce\uff1f", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["convert_currency(amount=5000, from_currency='JPY', to_currency='USD')", "convert_currency(amount=300, from_currency='JPY', to_currency='EUR')", "convert_currency(amount=2000, from_currency='JPY', to_currency='AUD')", "convert_currency(amount=100, from_currency='CAD', to_currency='CHF')"]}
{"id": "executable_parallel_function_12", "question": "\u6211\u6b63\u5728\u8655\u7406\u4e00\u4e9b\u5fae\u7a4d\u5206\u554f\u984c\uff0c\u9700\u8981\u4e00\u4e9b\u5c0e\u6578\u65b9\u9762\u7684\u5e6b\u52a9\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u9700\u8981\u5728\u7279\u5b9a\u9ede\u4e0a\u7684\u4e00\u7d44\u51fd\u6578\u7684\u5c0e\u6578\u4f30\u8a08\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u8655\u7406\u4ee5\u4e0b\u554f\u984c\u55ce\uff1f\n\n1. \u5728x = 4\u6642\uff0c\u627e\u51faf(x) = 3x^2 + 2x - 1\u7684\u5c0e\u6578\u3002\n2. \u7576x\u70ba-2\u6642\uff0c\u8a08\u7b97\u5c0e\u6578\uff0cg(x) = 5x^3 - 3x^2 + 2x + 1\u3002\n3. \u78ba\u5b9ah(x) = 2x^4 - 3x^3 + 2x^2 - x + 1\u5728x = 0\u6642\u7684\u5c0e\u6578\u3002\n4. \u5728x = 1\u6642\uff0c\u7372\u5f97i(x) = x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1\u7684\u5c0e\u6578\u3002\n\n\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u4e9b\u55ce\uff1f", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["estimate_derivative(function='lambda x: 3*x**2 + 2*x - 1', x=4)", "estimate_derivative(function='lambda x: 5*x**3 - 3*x**2 + 2*x + 1', x=-2)", "estimate_derivative(function='lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1', x=0)", "estimate_derivative(function='lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1', x=1)"]}
{"id": "executable_parallel_function_13", "question": "\u6211\u6700\u8fd1\u9047\u5230\u4e86\u4e00\u4e9b\u8fa6\u516c\u5ba4\u5e74\u8f15\u4eba\u5e38\u7528\u7684\u4fda\u8a9e\uff0c\u6211\u611f\u89ba\u6709\u9ede\u8ddf\u4e0d\u4e0a\u3002\u4f60\u80fd\u5e6b\u6211\u7406\u89e3\u5b83\u5011\u7684\u610f\u601d\u55ce\uff1f\u6211\u60f3\u77e5\u9053\u300cLit\u300d\u3001\u300cSavage\u300d\u548c\u300cYOLO\u300d\u5728Urban Dictionary\u4e0a\u7684\u5b9a\u7fa9\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u4e00\u4e0b\u55ce\uff1f\u6211\u5011\u4e00\u6b21\u67e5\u4e00\u500b\uff0c\u5148\u5f9e\u300cLit\u300d\u958b\u59cb\u3002", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["find_term_on_urban_dictionary(term='Lit')", "find_term_on_urban_dictionary(term='Savage')", "find_term_on_urban_dictionary(term='YOLO')"]}
{"id": "executable_parallel_function_14", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u9805\u76ee\uff0c\u9700\u8981\u8a2d\u8a08\u5e7e\u500b\u4e0d\u540c\u5927\u5c0f\u7684\u5713\u5f62\u96f6\u4ef6\u3002\u6839\u64da\u88fd\u9020\u898f\u683c\uff0c\u6211\u9700\u8981\u77e5\u9053\u9019\u4e9b\u5713\u5f62\u7684\u78ba\u5207\u9762\u7a4d\u3002\u4f60\u80fd\u8a08\u7b97\u534a\u5f91\u5206\u5225\u70ba5\u55ae\u4f4d\u300110\u55ae\u4f4d\u300115\u55ae\u4f4d\u548c20\u55ae\u4f4d\u7684\u5713\u5f62\u7684\u9762\u7a4d\u55ce\uff1f\u9019\u4e9b\u8a08\u7b97\u5c07\u5e6b\u52a9\u6211\u4f30\u7b97\u6bcf\u500b\u96f6\u4ef6\u7684\u6750\u6599\u6210\u672c\u3002", "function": {"name": "geometry_area_circle", "description": "Calculates the area of a circle.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle, in feet."}}, "required": ["radius"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["geometry_area_circle(radius=5)", "geometry_area_circle(radius=10)", "geometry_area_circle(radius=15)", "geometry_area_circle(radius=20)"]}
{"id": "executable_parallel_function_15", "question": "\u96a8\u8457\u75ab\u60c5\u4ecd\u7136\u6301\u7e8c\uff0c\u6211\u6b63\u5728\u52aa\u529b\u4fdd\u6301\u5c0d\u5168\u7403COVID-19\u60c5\u6cc1\u7684\u6700\u65b0\u4e86\u89e3\u3002\u6211\u5c24\u5176\u95dc\u6ce8\u5e7e\u500b\u570b\u5bb6\u76ee\u524d\u7684\u6d3b\u8e8d\u75c5\u4f8b\u6578\u3002\u4f60\u80fd\u63d0\u4f9b\u6cd5\u570b\u6700\u65b0\u7684\u6d3b\u8e8dCOVID-19\u75c5\u4f8b\u6578\u5b57\u55ce\uff1f\u4e4b\u5f8c\uff0c\u6211\u4e5f\u60f3\u4e86\u89e3\u610f\u5927\u5229\u3001\u7f8e\u570b\u548c\u4e2d\u570b\u7684\u6700\u65b0\u60c5\u6cc1\u3002", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"]}
{"id": "executable_parallel_function_16", "question": "\u6211\u76ee\u524d\u6b63\u5728\u5206\u6790\u4e00\u4e9b\u80a1\u7968\uff0c\u9700\u8981\u5c07\u5b83\u5011\u8207\u76f8\u61c9\u7684\u516c\u53f8\u5339\u914d\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u80a1\u7968\u4ee3\u78bc\u70ba\u201cAAPL\u201d\u3001\u201cGOOGL\u201d\u3001\u201cAMZN\u201d\u548c\u201cMSFT\u201d\u7684\u516c\u53f8\u540d\u7a31\u55ce\uff1f\u6211\u9700\u8981\u70ba\u6211\u7684\u8ca1\u52d9\u5831\u544a\u7814\u7a76\u6bcf\u4e00\u500b\u516c\u53f8\u3002", "function": {"name": "get_company_name_by_stock_name", "description": "Finds the company name of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_company_name_by_stock_name(stock_name='AAPL')", "get_company_name_by_stock_name(stock_name='GOOGL')", "get_company_name_by_stock_name(stock_name='AMZN')", "get_company_name_by_stock_name(stock_name='MSFT')"]}
{"id": "executable_parallel_function_17", "question": "\u6211\u6b63\u5728\u70ba\u6211\u53c3\u8207\u7684\u4e00\u500b\u9805\u76ee\u8ffd\u8e64\u67d0\u4e9b\u7db2\u7d61\u8acb\u6c42\u7684\u5730\u7406\u4f4d\u7f6e\u3002\u4f60\u53ef\u4ee5\u5148\u63d0\u4f9bIP\u5730\u5740'192.168.1.1'\u7684\u7def\u5ea6\u548c\u7d93\u5ea6\u55ce\uff1f\u4e4b\u5f8c\uff0c\u6211\u9084\u9700\u8981\u76f8\u540c\u7684\u4fe1\u606f\u4f86\u81ea'172.16.254.1'\u3002\u6700\u5f8c\uff0c\u8b93\u6211\u5011\u4e5f\u627e\u5230'10.0.0.1'\u548c'192.0.2.1'\u7684\u5750\u6a19\u3002", "function": {"name": "get_coordinate_by_ip_address", "description": "Finds the latitude and longitude of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_coordinate_by_ip_address(ip_address='192.168.1.1')", "get_coordinate_by_ip_address(ip_address='172.16.254.1')", "get_coordinate_by_ip_address(ip_address='10.0.0.1')", "get_coordinate_by_ip_address(ip_address='192.0.2.1')"]}
{"id": "executable_parallel_function_18", "question": "\u6211\u6b63\u5728\u8a08\u5283\u4e00\u6b21\u7a7f\u8d8a\u7f8e\u570b\u7684\u516c\u8def\u65c5\u884c\uff0c\u4e26\u4e14\u6211\u5df2\u7d93\u6e96\u5099\u4e86\u4e00\u5f35\u5730\u5716\uff0c\u6a19\u51fa\u4e86\u6cbf\u9014\u7684\u6240\u6709\u4e3b\u8981\u505c\u7559\u9ede\u3002\u4f60\u80fd\u7d66\u6211\u7d10\u7d04\u7684\u5ea7\u6a19\u55ce\uff1f\u5b8c\u6210\u5f8c\uff0c\u6211\u9084\u9700\u8981\u6d1b\u6749\u78ef\u7684\u7def\u5ea6\u548c\u7d93\u5ea6\uff0c\u63a5\u8457\u662f\u829d\u52a0\u54e5\u548c\u4f11\u58eb\u9813\u7684\u5ea7\u6a19\uff0c\u6309\u7167\u9019\u500b\u9806\u5e8f\u3002\u9019\u4e9b\u6578\u64da\u5c07\u5e6b\u52a9\u6211\u4f30\u8a08\u65c5\u884c\u6642\u9593\u548c\u8ddd\u96e2\u3002", "function": {"name": "get_coordinates_from_city", "description": "Fetches the latitude and longitude of a given city name using the Maps.co Geocoding API.", "parameters": {"type": "dict", "properties": {"city_name": {"type": "string", "description": "The name of the city, such as 'Rome'."}}, "required": ["city_name"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_coordinates_from_city(city_name='New York')", "get_coordinates_from_city(city_name='Los Angeles')", "get_coordinates_from_city(city_name='Chicago')", "get_coordinates_from_city(city_name='Houston')"]}
{"id": "executable_parallel_function_19", "question": "\u6211\u6b63\u5728\u7de8\u64b0\u4e00\u4efd\u6709\u95dcCOVID-19\u5f71\u97ff\u7684\u5831\u544a\uff0c\u9700\u8981\u5e7e\u500b\u7279\u5b9a\u570b\u5bb6\u6700\u65b0\u7684\u6b7b\u4ea1\u4eba\u6578\u3002\u4f60\u80fd\u5426\u63d0\u4f9b\u5df4\u897f\u3001\u5370\u5ea6\u3001\u4fc4\u7f85\u65af\u548c\u6cd5\u570b\u7684\u7e3d\u6b7b\u4ea1\u4eba\u6578\u7d66\u6211\uff1f\u8acb\u78ba\u4fdd\u6578\u64da\u76e1\u53ef\u80fd\u6700\u65b0\u3002", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='France')"]}
{"id": "executable_parallel_function_20", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u5c08\u6848\uff0c\u9700\u8981\u8a08\u7b97\u4e8c\u7dad\u5e73\u9762\u4e0a\u5e7e\u5c0d\u9ede\u4e4b\u9593\u7684\u8ddd\u96e2\u3002\u6211\u9700\u8981\u8a08\u7b97(3, 4)\u548c(7, 9)\u4e4b\u9593\u7684\u8ddd\u96e2\uff0c\u63a5\u8457\u662f(1, 2)\u548c(5, 6)\u4e4b\u9593\u7684\u8ddd\u96e2\uff0c\u7136\u5f8c\u662f(0, 0)\u548c(8, 15)\u4e4b\u9593\u7684\u8ddd\u96e2\uff0c\u6700\u5f8c\u662f(10, 12)\u548c(20, 25)\u4e4b\u9593\u7684\u8ddd\u96e2\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u4e9b\u8ddd\u96e2\u55ce\uff1f", "function": {"name": "get_distance", "description": "Calculates the distance between two 2D points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "tuple", "description": "The first point.", "items": {"type": "float"}}, "pointB": {"type": "tuple", "description": "The second point.", "items": {"type": "float"}}}, "required": ["pointA", "pointB"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_distance(pointA=(3, 4), pointB=(7, 9))", "get_distance(pointA=(1, 2), pointB=(5, 6))", "get_distance(pointA=(0, 0), pointB=(8, 15))", "get_distance(pointA=(10, 12), pointB=(20, 25))"]}
{"id": "executable_parallel_function_21", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u8207\u6578\u5217\u53ca\u5176\u61c9\u7528\u76f8\u95dc\u7684\u9805\u76ee\uff0c\u800c\u8cbb\u6c0f\u6578\u5217\u5f15\u8d77\u4e86\u6211\u7684\u8208\u8da3\u3002\u6211\u9700\u8981\u6bd4\u8f03\u5e7e\u500b\u4e0d\u540c\u9577\u5ea6\u7684\u6578\u5217\u4f86\u9032\u884c\u5206\u6790\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u524d10\u500b\u8cbb\u6c0f\u6578\u5217\u7684\u6578\u5b57\u55ce\uff1f\u4e4b\u5f8c\uff0c\u6211\u9084\u9700\u8981\u524d20\u500b\u6578\u5b57\u3002\u6700\u5f8c\uff0c\u8acb\u63d0\u4f9b\u6578\u5217\u7684\u524d5\u500b\u6578\u5b57\u4f86\u5b8c\u6210\u6211\u7684\u6578\u64da\u96c6\u3002", "function": {"name": "get_fibonacci_sequence", "description": "Calculates the n numbers of the Fibonacci.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number of Fibonacci numbers to calculate."}}, "required": ["n"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["get_fibonacci_sequence(n=10)", "get_fibonacci_sequence(n=20)", "get_fibonacci_sequence(n=5)"]}
{"id": "executable_parallel_function_22", "question": "\u6211\u6b63\u5728\u5c0b\u627e\u5e7e\u4ef6\u6211\u5728\u4e9e\u99ac\u905c\u4e0a\u770b\u5230\u7684\u5546\u54c1\u7684\u50f9\u683c\u6bd4\u8f03\uff0c\u6211\u5df2\u7d93\u6e96\u5099\u597d\u5b83\u5011\u7684ASIN\u3002\u4f60\u80fd\u5e6b\u6211\u6aa2\u67e5\u9019\u4e9b\u7522\u54c1\u7684\u50f9\u683c\u55ce\uff1f\u9019\u88e1\u662fASIN\uff1a'B08PPDJWC8'\uff0c'B07ZPKBL9V'\uff0c'B08BHXG144'\u548c'B075H2B962'\u3002\u5982\u679c\u4f60\u80fd\u63d0\u4f9b\u9019\u4e9b\u5546\u54c1\u7684\u7576\u524d\u50f9\u683c\uff0c\u6211\u6703\u975e\u5e38\u611f\u6fc0\u3002", "function": {"name": "get_price_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_price_by_amazon_ASIN(ASIN='B08PPDJWC8')", "get_price_by_amazon_ASIN(ASIN='B07ZPKBL9V')", "get_price_by_amazon_ASIN(ASIN='B08BHXG144')", "get_price_by_amazon_ASIN(ASIN='B075H2B962')"]}
{"id": "executable_parallel_function_23", "question": "\u6211\u9700\u8981\u5c07\u5e7e\u500b\u6578\u5b57\u5206\u89e3\u70ba\u5b83\u5011\u7684\u8cea\u56e0\u6578\uff0c\u4ee5\u4fbf\u7528\u65bc\u6211\u6b63\u5728\u958b\u767c\u7684\u52a0\u5bc6\u6f14\u7b97\u6cd5\u3002\u4f60\u53ef\u4ee5\u5148\u627e\u51fa456\u7684\u8cea\u56e0\u6578\u55ce\uff1f\u5b8c\u6210\u5f8c\uff0c\u6211\u9084\u9700\u8981789\u7684\u8cea\u56e0\u6578\uff0c\u63a5\u8457\u662f321\uff0c\u6700\u5f8c\u662f654\u3002", "function": {"name": "get_prime_factors", "description": "Calculates the prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to calculate the prime factors of."}}, "required": ["number"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_prime_factors(number=456)", "get_prime_factors(number=789)", "get_prime_factors(number=321)", "get_prime_factors(number=654)"]}
{"id": "executable_parallel_function_24", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u4e9b\u5e02\u5834\u8abf\u67e5\uff0c\u6211\u6709\u4e00\u500b\u6211\u611f\u8208\u8da3\u7684\u7522\u54c1\u7684\u4e9e\u99ac\u905c\u6a19\u6e96\u8b58\u5225\u865f\uff08ASIN\uff09\u7684\u5217\u8868\u3002\u6211\u9700\u8981\u5c07\u9019\u4e9bASIN\u8207\u5b83\u5011\u7684\u7522\u54c1\u540d\u7a31\u5339\u914d\uff0c\u4ee5\u4fbf\u7c21\u5316\u6211\u7684\u5206\u6790\u3002\u9019\u662f\u6211\u6b63\u5728\u4f7f\u7528\u7684ASIN\uff1a'B075H2B962'\uff0c'B08BHXG144'\uff0c'B07ZPKBL9V'\u548c'B08PPDJWC8'\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u627e\u9019\u4e9bASIN\u7684\u7522\u54c1\u540d\u7a31\u55ce\uff1f", "function": {"name": "get_product_name_by_amazon_ASIN", "description": "Finds the price of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_product_name_by_amazon_ASIN(ASIN='B075H2B962')", "get_product_name_by_amazon_ASIN(ASIN='B08BHXG144')", "get_product_name_by_amazon_ASIN(ASIN='B07ZPKBL9V')", "get_product_name_by_amazon_ASIN(ASIN='B08PPDJWC8')"]}
{"id": "executable_parallel_function_25", "question": "\u6211\u6b63\u5728\u5c0d\u4e9e\u99ac\u905c\u4e0a\u7684\u4e0d\u540c\u7522\u54c1\u9032\u884c\u6bd4\u8f03\u5206\u6790\uff0c\u5ba2\u6236\u8a55\u7d1a\u662f\u6211\u7814\u7a76\u7684\u95dc\u9375\u56e0\u7d20\u3002\u6211\u6709\u4e00\u500b\u7531\u5176\u7368\u7279ASIN\u4ee3\u78bc\u8b58\u5225\u7684\u7522\u54c1\u6e05\u55ae\uff0c\u6211\u9700\u8981\u70ba\u6bcf\u500b\u7522\u54c1\u7372\u53d6\u8a55\u7d1a\u3002\u4f60\u53ef\u4ee5\u5148\u627e\u5230ASIN\u70ba'B08PPDJWC8'\u7684\u7522\u54c1\u7684\u8a55\u7d1a\u55ce\uff1f\u4e4b\u5f8c\uff0c\u6211\u9084\u9700\u8981ASIN\u70ba'B07ZPKBL9V'\u3001'B075H2B962'\u548c'B08BHXG144'\u7684\u8a55\u7d1a\u3002", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_rating_by_amazon_ASIN(ASIN='B08PPDJWC8')", "get_rating_by_amazon_ASIN(ASIN='B07ZPKBL9V')", "get_rating_by_amazon_ASIN(ASIN='B075H2B962')", "get_rating_by_amazon_ASIN(ASIN='B08BHXG144')"]}
{"id": "executable_parallel_function_26", "question": "\u6211\u6b63\u5728\u70ba\u6211\u7684\u6295\u8cc7\u7d44\u5408\u9032\u884c\u5e7e\u5bb6\u79d1\u6280\u5de8\u982d\u7684\u6bd4\u8f03\u5206\u6790\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u860b\u679c\u516c\u53f8\u80a1\u7968\u7684\u6bcf\u65e5\u50f9\u683c\u6b77\u53f2\u55ce\uff0c\u4ee3\u865f\u70ba\u300cAAPL\u300d\uff1f\u63a5\u4e0b\u4f86\uff0c\u6211\u60f3\u67e5\u770b\u5fae\u8edf\u516c\u53f8\u6bcf\u9031\u7684\u50f9\u683c\u6b77\u53f2\uff0c\u4ee3\u865f\u70ba\u300cMSFT\u300d\uff0c\u4e26\u78ba\u4fdd\u5305\u542b\u4efb\u4f55\u80a1\u7968\u62c6\u5206\u6216\u80a1\u606f\u7684\u8cc7\u6599\u3002\u4e4b\u5f8c\uff0c\u6211\u9700\u8981\u4e9e\u99ac\u905c\u516c\u53f8\u6bcf\u6708\u7684\u50f9\u683c\u6b77\u53f2\uff0c\u4ee3\u865f\u70ba\u300cAMZN\u300d\u3002\u6700\u5f8c\uff0c\u6211\u9700\u8981\u7279\u65af\u62c9\u516c\u53f8\u4e09\u500b\u6708\u7684\u50f9\u683c\u6b77\u53f2\uff0c\u4ee3\u865f\u70ba\u300cTSLA\u300d\uff0c\u4f46\u9019\u4e00\u6b21\u8acb\u6392\u9664\u4efb\u4f55\u80a1\u7968\u62c6\u5206\u6216\u80a1\u606f\u7684\u8cc7\u8a0a\u3002", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name like AAPL, MSFT.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}, "execution_result_type": ["structural_match", "structural_match", "structural_match", "structural_match"], "ground_truth": ["get_stock_history(stock_name='AAPL', interval='1d', diffandsplits='false')", "get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits='true')", "get_stock_history(stock_name='AMZN', interval='1mo', diffandsplits='false')", "get_stock_history(stock_name='TSLA', interval='3mo', diffandsplits='false')"]}
{"id": "executable_parallel_function_27", "question": "\u6211\u76ee\u524d\u6b63\u5728\u8ffd\u8e64\u5e7e\u652f\u80a1\u7968\uff0c\u9700\u8981\u66f4\u65b0\u6211\u7684\u8a18\u9304\u4ee5\u53cd\u6620\u5b83\u5011\u7684\u6700\u65b0\u50f9\u683c\u3002\u4f60\u80fd\u63d0\u4f9b\u300cGOOG\u300d\u3001\u300cMETA\u300d\u3001\u300cNFLX\u300d\u548c\u300cBABA\u300d\u7684\u6700\u65b0\u4ea4\u6613\u50f9\u683c\u55ce\uff1f\u9019\u4e9b\u5206\u5225\u662fGoogle\u3001Meta Platforms\u3001Netflix\u548cAlibaba Group Holding Limited\u7684\u80a1\u7968\u540d\u7a31\u3002", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_stock_price_by_stock_name(stock_name='GOOG')", "get_stock_price_by_stock_name(stock_name='META')", "get_stock_price_by_stock_name(stock_name='NFLX')", "get_stock_price_by_stock_name(stock_name='BABA')"]}
{"id": "executable_parallel_function_28", "question": "\u6211\u6b63\u5728\u5236\u5b9a\u4e00\u4efd\u65c5\u884c\u884c\u7a0b\uff0c\u5c07\u5e36\u6211\u7a7f\u8d8a\u4e0d\u540c\u7684\u6642\u5340\uff0c\u6211\u9700\u8981\u5728\u5168\u7403\u5404\u5730\u7684\u4e0d\u540c\u57ce\u5e02\u5b89\u6392\u6703\u8b70\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u9019\u4e9b\u7279\u5b9a\u5750\u6a19\u7684\u6642\u5340\u55ce\uff1f\u9996\u5148\u5f9e\u7d93\u5ea677.1025\u548c\u7def\u5ea628.7041\u958b\u59cb\u3002\u63a5\u8457\uff0c\u6211\u9084\u9700\u8981\u53e6\u4e00\u7d44\u5750\u6a19\u7684\u6642\u5340\uff1a\u7d93\u5ea6-73.935242\u548c\u7def\u5ea640.730610\u3002\u4e00\u65e6\u6211\u5011\u6709\u4e86\u9019\u4e9b\uff0c\u8b93\u6211\u5011\u4e5f\u627e\u51fa\u6089\u5c3c\u7684\u6642\u5340\uff0c\u5176\u7d93\u5ea6\u70ba151.2093\uff0c\u7def\u5ea6\u70ba33.8688\uff0c\u7136\u5f8c\u662f\u6771\u4eac\uff0c\u5176\u5750\u6a19\u70ba\u7d93\u5ea6139.6917\u548c\u7def\u5ea635.6895\u3002", "function": {"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_time_zone_by_coord(long='77.1025', lat='28.7041')", "get_time_zone_by_coord(long='-73.935242', lat='40.730610')", "get_time_zone_by_coord(long='151.2093', lat='33.8688')", "get_time_zone_by_coord(long='139.6917', lat='35.6895')"]}
{"id": "executable_parallel_function_29", "question": "\u6211\u6b63\u5728\u8a08\u5283\u4e00\u7cfb\u5217\u7684\u5546\u52d9\u65c5\u884c\u5230\u4e0d\u540c\u7684\u570b\u969b\u57ce\u5e02\uff0c\u9700\u8981\u70ba\u6211\u5c07\u9047\u5230\u7684\u5929\u6c23\u689d\u4ef6\u505a\u597d\u6e96\u5099\u3002\u9996\u5148\uff0c\u6211\u5c07\u524d\u5f80\u6d1b\u6749\u78ef\uff0c\u4f60\u80fd\u63d0\u4f9b\u7576\u5730\u7684\u6700\u65b0\u5929\u6c23\u60c5\u6cc1\u55ce\uff1f\u8a72\u5730\u7684\u7d93\u5ea6\u662f34.0522\uff0c\u7def\u5ea6\u662f-118.2437\u3002\u4e00\u65e6\u6211\u5f97\u5230\u9019\u4e9b\u4fe1\u606f\uff0c\u6211\u9084\u60f3\u77e5\u9053\u502b\u6566\u7684\u5929\u6c23\u60c5\u6cc1\uff0c\u8a72\u5730\u7684\u7d93\u5ea6\u662f51.5074\uff0c\u7def\u5ea6\u662f-0.1278\uff0c\u63a5\u8457\u662f\u958b\u666e\u6566\u7684\u5929\u6c23\u60c5\u6cc1\uff0c\u8a72\u5730\u7684\u7d93\u5ea6\u662f-33.9249\uff0c\u7def\u5ea6\u662f18.4241\uff0c\u6700\u5f8c\u662f\u5df4\u9ece\u7684\u5929\u6c23\u60c5\u6cc1\uff0c\u8a72\u5730\u7684\u7d93\u5ea6\u662f48.8566\uff0c\u7def\u5ea6\u662f2.3522\u3002", "function": {"name": "get_weather_data", "description": "Fetches weather data from the Open-Meteo API for the given latitude and longitude.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The latitude and longitude of the location."}}, "required": ["coordinates"]}}, "execution_result_type": ["structural_match", "structural_match", "structural_match", "structural_match"], "ground_truth": ["get_weather_data(coordinates=[34.0522, -118.2437])", "get_weather_data(coordinates=[51.5074, -0.1278])", "get_weather_data(coordinates=[-33.9249, 18.4241])", "get_weather_data(coordinates=[48.8566, 2.3522])"]}
{"id": "executable_parallel_function_30", "question": "\u6211\u6b63\u5728\u5c0d\u6211\u5011\u7684\u7db2\u7d61\u6d41\u91cf\u9032\u884c\u5206\u6790\uff0c\u6211\u9700\u8981\u78ba\u5b9a\u5e7e\u500b\u5728\u65e5\u8a8c\u4e2d\u51fa\u73fe\u7684IP\u5730\u5740\u7684\u90f5\u905e\u5340\u865f\u3002\u4f60\u80fd\u5148\u627e\u51fa'192.168.1.1'\u7684\u90f5\u905e\u5340\u865f\u55ce\uff1f\u5b8c\u6210\u5f8c\uff0c\u6211\u9084\u9700\u8981'172.16.254.1'\u3001'10.0.0.1'\u548c'203.0.113.0'\u7684\u90f5\u905e\u5340\u865f\u3002\u9019\u5c07\u6709\u52a9\u65bc\u7406\u89e3\u6d41\u91cf\u7684\u6f5b\u5728\u4f86\u6e90\u3002", "function": {"name": "get_zipcode_by_ip_address", "description": "Finds the zipcode of an IP address.", "parameters": {"type": "dict", "properties": {"ip_address": {"type": "string", "description": "The IP address to find the location of."}}, "required": ["ip_address"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_zipcode_by_ip_address(ip_address='192.168.1.1')", "get_zipcode_by_ip_address(ip_address='172.16.254.1')", "get_zipcode_by_ip_address(ip_address='10.0.0.1')", "get_zipcode_by_ip_address(ip_address='203.0.113.0')"]}
{"id": "executable_parallel_function_31", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u6d89\u53ca\u5927\u91cf\u77e9\u9663\u8a08\u7b97\u7684\u9805\u76ee\uff0c\u6211\u9700\u8981\u5c07\u5e7e\u5c0d\u77e9\u9663\u76f8\u4e58\u4ee5\u5206\u6790\u6578\u64da\u3002\u6211\u6709\u56db\u7d44\u4e0d\u540c\u7684\u77e9\u9663\u9700\u8981\u76f8\u4e58\u3002\n\n\u9996\u5148\uff0c\u6211\u9700\u8981\u5c07\u9019\u5169\u500b\u77e9\u9663\u76f8\u4e58\uff1a\n1. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  \u548c [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\n\u63a5\u4e0b\u4f86\uff0c\u6211\u9084\u6709\u53e6\u4e00\u5c0d\u9700\u8981\u76f8\u4e58\u7684\u77e9\u9663\uff1a\n2. [[19, 20], [21, 22]]\n  \u548c [[23, 24], [25, 26]]\n\n\u7b2c\u4e09\u7d44\u77e9\u9663\u662f\uff1a\n3. [[27, 28, 29, 30], [31, 32, 33, 34]]\n  \u548c [[35, 36, 37, 38], [39, 40, 41, 42]]\n\n\u6700\u5f8c\uff0c\u6211\u9700\u8981\u8a08\u7b97\u7684\u6700\u5f8c\u4e00\u7d44\u662f\uff1a\n4. [[43, 44], [45, 46]]\n  \u548c [[47, 48], [49, 50]]\n\n\u4f60\u80fd\u5e6b\u6211\u9032\u884c\u9019\u4e9b\u77e9\u9663\u4e58\u6cd5\u55ce\uff1f", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "dict", "properties": {"matA": {"type": "array", "description": "The first matrix.", "items": {"type": "integer"}}, "matB": {"type": "array", "description": "The second matrix.", "items": {"type": "integer"}}}, "required": ["matA", "matB"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["mat_mul(matA=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB=[[10, 11, 12], [13, 14, 15], [16, 17, 18]])", "mat_mul(matA=[[19, 20], [21, 22]], matB=[[23, 24], [25, 26]])", "mat_mul(matA=[[27, 28, 29, 30], [31, 32, 33, 34]], matB=[[35, 36, 37, 38], [39, 40, 41, 42]])", "mat_mul(matA=[[43, 44], [45, 46]], matB=[[47, 48], [49, 50]])"]}
{"id": "executable_parallel_function_32", "question": "\u7576\u7136\uff0c\u8b93\u6211\u5011\u5148\u627e\u51fa5\u7684\u968e\u4e58\u662f\u591a\u5c11\u3002\u4e00\u65e6\u6211\u5011\u77e5\u9053\u4e86\u90a3\u500b\u6578\u5b57\uff0c\u6211\u5011\u5c31\u6703\u7e7c\u7e8c\u8a08\u7b977\u7684\u968e\u4e58\u3002\u5728\u6211\u5011\u5f04\u6e05\u695a\u9019\u5169\u500b\u6578\u5b57\u4e4b\u5f8c\uff0c\u6211\u5011\u53ef\u4ee5\u7e7c\u7e8c\u8a08\u7b9710\u548c12\u7684\u968e\u4e58\u3002\u4f60\u80fd\u6309\u7167\u9806\u5e8f\u63d0\u4f9b\u9019\u56db\u500b\u6578\u5b57\u7684\u968e\u4e58\u7d50\u679c\u55ce\uff1f", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["math_factorial(n=5)", "math_factorial(n=7)", "math_factorial(n=10)", "math_factorial(n=12)"]}
{"id": "executable_parallel_function_33", "question": "\u6211\u9700\u8981\u8a08\u7b97\u4e00\u7d44\u6578\u5c0d\u7684\u6700\u5927\u516c\u56e0\u6578\uff0c\u70ba\u4e86\u6578\u5b78\u4f5c\u696d\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u9019\u4e9b\u6578\u5c0d\u7684\u6700\u5927\u516c\u56e0\u6578\u55ce\uff1a45\u548c60\uff0c81\u548c27\uff0c144\u548c96\uff0c\u9084\u6709100\u548c80\uff1f\u6211\u60f3\u4e00\u6b65\u4e00\u6b65\u5730\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\u3002", "function": {"name": "math_gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["math_gcd(a=45, b=60)", "math_gcd(a=81, b=27)", "math_gcd(a=144, b=96)", "math_gcd(a=100, b=80)"]}
{"id": "executable_parallel_function_34", "question": "\u6211\u9700\u8981\u8a08\u7b97\u4e00\u500b\u5c0f\u578b\u7a0b\u5f0f\u9805\u76ee\u4e2d\u4e00\u7d44\u6578\u5c0d\u7684\u6700\u5c0f\u516c\u500d\u6578\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u4ee5\u4e0b\u6578\u5c0d\u7684\u6700\u5c0f\u516c\u500d\u6578\u55ce\uff1a35\u548c45\u300172\u548c108\u3001120\u548c180\uff0c\u9084\u6709200\u548c300\uff1f\u9019\u4e9b\u8a08\u7b97\u5c07\u5e6b\u52a9\u6211\u512a\u5316\u8207\u4efb\u52d9\u6392\u7a0b\u76f8\u95dc\u7684\u7a0b\u5f0f\u78bc\u3002", "function": {"name": "math_lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first number. This should be the larger number."}, "b": {"type": "integer", "description": "The second number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["math_lcm(a=45, b=35)", "math_lcm(a=72, b=108)", "math_lcm(a=120, b=180)", "math_lcm(a=200, b=300)"]}
{"id": "executable_parallel_function_35", "question": "\u6211\u6b63\u5728\u8a55\u4f30\u5e7e\u7a2e\u62b5\u62bc\u8cb8\u6b3e\u9078\u64c7\uff0c\u9700\u8981\u8a08\u7b97\u4e0d\u540c\u8cb8\u6b3e\u65b9\u6848\u7684\u6bcf\u6708\u4ed8\u6b3e\u91d1\u984d\u3002\u9019\u662f\u6211\u9700\u8981\u7684\uff1a\n\n\u9996\u5148\uff0c\u5c0d\u65bc\u4e00\u7b46350,000\u7f8e\u5143\u7684\u8cb8\u6b3e\uff0c\u5229\u7387\u70ba3.5%\uff0c\u5206\u6563\u572830\u5e74\u5167\u3002\n\u63a5\u4e0b\u4f86\uff0c\u4e00\u7b46500,000\u7f8e\u5143\u7684\u8cb8\u6b3e\uff0c\u5229\u7387\u70ba4%\uff0c\u4f46\u9019\u6b21\u662f\u572820\u5e74\u5167\u3002\n\u7136\u5f8c\uff0c\u4e00\u7b46750,000\u7f8e\u5143\u7684\u8cb8\u6b3e\uff0c\u5229\u7387\u70ba2.5%\uff0c\u671f\u9650\u70ba15\u5e74\u3002\n\u6700\u5f8c\uff0c\u6211\u6b63\u5728\u8003\u616e\u4e00\u7b461,000,000\u7f8e\u5143\u7684\u8cb8\u6b3e\uff0c\u5229\u7387\u70ba3%\uff0c\u572810\u5e74\u5167\u9084\u6e05\u3002\n\n\u4f60\u80fd\u63d0\u4f9b\u9019\u4e9b\u8cb8\u6b3e\u7684\u6bcf\u6708\u4ed8\u6b3e\u91d1\u984d\u55ce\uff1f", "function": {"name": "mortgage_calculator", "description": "Calculates the monthly mortgage payment.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount of the loan."}, "interest_rate": {"type": "float", "description": "The interest rate of the loan, ranging from 0 to 1."}, "loan_period": {"type": "integer", "description": "The period of the loan, in years."}}, "required": ["loan_amount", "interest_rate", "loan_period"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["mortgage_calculator(loan_amount=350000, interest_rate=0.035, loan_period=30)", "mortgage_calculator(loan_amount=500000, interest_rate=0.04, loan_period=20)", "mortgage_calculator(loan_amount=750000, interest_rate=0.025, loan_period=15)", "mortgage_calculator(loan_amount=1000000, interest_rate=0.03, loan_period=10)"]}
{"id": "executable_parallel_function_36", "question": "\u6211\u9700\u8981\u89e3\u6c7a\u5e7e\u500b\u4e8c\u6b21\u65b9\u7a0b\u5f0f\uff0c\u4ee5\u5b8c\u6210\u6578\u5b78\u4f5c\u696d\u3002\u4f60\u80fd\u8a08\u7b97\u9019\u4e9b\u4fc2\u6578\u7d44\u7684\u6839\u55ce\uff1a\u9996\u5148\u662f3\u30017\u548c2\uff1b\u7136\u5f8c\u662f5\u300112\u548c4\uff1b\u63a5\u8457\u662f8\u300116\u548c6\uff1b\u6700\u5f8c\u662f10\u300120\u548c8\uff1f\u6211\u60f3\u8981\u7406\u89e3\u6839\u8207\u4fc2\u6578\u4e4b\u9593\u7684\u95dc\u4fc2\u6a21\u5f0f\u3002", "function": {"name": "quadratic_roots", "description": "Calculates the roots of a quadratic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The first coefficient."}, "b": {"type": "integer", "description": "The second coefficient."}, "c": {"type": "integer", "description": "The third coefficient."}}, "required": ["a", "b", "c"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["quadratic_roots(a=3, b=7, c=2)", "quadratic_roots(a=5, b=12, c=4)", "quadratic_roots(a=8, b=16, c=6)", "quadratic_roots(a=10, b=20, c=8)"]}
{"id": "executable_parallel_function_37", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u623f\u5730\u7522\u9805\u76ee\uff0c\u9700\u8981\u6211\u5206\u6790\u4e0d\u540c\u57ce\u5e02\u7684\u5404\u7a2e\u7269\u696d\u3002\u6211\u6709\u4e00\u500b\u90f5\u653f\u7de8\u78bc\u5217\u8868\uff0c\u4f46\u9700\u8981\u5c07\u5b83\u5011\u8207\u76f8\u61c9\u7684\u57ce\u5e02\u5339\u914d\uff0c\u4ee5\u4fbf\u9032\u884c\u5e02\u5834\u5206\u6790\u3002\u60a8\u80fd\u5e6b\u6211\u627e\u5230\u4ee5\u4e0b\u90f5\u653f\u7de8\u78bc\u7684\u57ce\u5e02\u55ce\uff1a'90210'\uff0c'10001'\uff0c'60601'\u548c'94102'\uff1f\u9019\u4e9b\u4fe1\u606f\u5c0d\u6211\u4e0b\u6b21\u8207\u6295\u8cc7\u8005\u7684\u6703\u8b70\u81f3\u95dc\u91cd\u8981\u3002", "function": {"name": "retrieve_city_based_on_zipcode", "description": "Finds the city of a zipcode.", "parameters": {"type": "dict", "properties": {"zipcode": {"type": "string", "description": "The zipcode of the city."}}, "required": ["zipcode"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["retrieve_city_based_on_zipcode(zipcode='90210')", "retrieve_city_based_on_zipcode(zipcode='10001')", "retrieve_city_based_on_zipcode(zipcode='60601')", "retrieve_city_based_on_zipcode(zipcode='94102')"]}
{"id": "executable_parallel_function_38", "question": "\u6211\u6b63\u5728\u8a08\u5283\u4e00\u500b\u570b\u969b\u6703\u8b70\uff0c\u9700\u8981\u5728\u5b89\u6392\u6642\u9593\u6642\u8003\u616e\u516c\u5171\u5047\u671f\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u8a622018\u5e74\u7f8e\u570b\u7684\u5047\u671f\u6e05\u55ae\u55ce\uff1f\u6211\u4e5f\u9700\u8981\u540c\u6a23\u7684\u8cc7\u8a0a\uff0c\u5206\u5225\u662f2020\u5e74\u5fb7\u570b\u30012019\u5e74\u897f\u73ed\u7259\u548c2021\u5e74\u82f1\u570b\u7684\u5047\u671f\u3002\u9019\u4e9b\u65e5\u671f\u7684\u6e96\u78ba\u6027\u975e\u5e38\u91cd\u8981\uff0c\u4ee5\u907f\u514d\u8207\u570b\u5b9a\u5047\u65e5\u767c\u751f\u885d\u7a81\u3002", "function": {"name": "retrieve_holiday_by_year", "description": "Finds the holidays of a year.", "parameters": {"type": "dict", "properties": {"year": {"type": "string", "description": "The year of the holidays."}, "country": {"type": "string", "description": "The country of the holidays. Possible options: US, AT, DE, ES, FR, GB, IT, NL, PL, RO, SK, UA."}}, "required": ["year", "country"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["retrieve_holiday_by_year(year='2018', country='US')", "retrieve_holiday_by_year(year='2020', country='DE')", "retrieve_holiday_by_year(year='2019', country='ES')", "retrieve_holiday_by_year(year='2021', country='GB')"]}
{"id": "executable_parallel_function_39", "question": "\u8acb\u5e6b\u6211\u5c0d\u5217\u8868[5, 2, 9, 1, 7]\u9032\u884c\u6392\u5e8f\u3002\u7136\u5f8c\uff0c\u6211\u60f3\u8b93\u4f60\u518d\u62ff\u53e6\u4e00\u500b\u5217\u8868[3, 8, 6, 4]\uff0c\u4f46\u662f\u6309\u76f8\u53cd\u7684\u9806\u5e8f\u9032\u884c\u6392\u5e8f\u3002\u5b8c\u6210\u5f8c\uff0c\u4f60\u80fd\u5426\u4e5f\u6309\u6b63\u5e38\u7684\u65b9\u5f0f\u5c0d[10, 20, 30, 40, 50]\u9032\u884c\u6392\u5e8f\uff1f\u6700\u5f8c\uff0c\u5c0d\u65bc\u5217\u8868[100, 200, 300, 400, 500]\uff0c\u6211\u9700\u8981\u6309\u5f9e\u9ad8\u5230\u4f4e\u7684\u9806\u5e8f\u9032\u884c\u6392\u5e8f\u3002", "function": {"name": "sort_array", "description": "Sorts an array of numbers.", "parameters": {"type": "dict", "properties": {"array": {"type": "array", "items": {"type": "integer"}, "description": "The array of numbers."}, "reverse": {"type": "boolean", "description": "Whether to sort the array in reverse order, i.e., descending order. Default is False", "default": false}}, "required": ["array"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["sort_array(array=[5, 2, 9, 1, 7])", "sort_array(array=[3, 8, 6, 4], reverse=True)", "sort_array(array=[10, 20, 30, 40, 50])", "sort_array(array=[100, 200, 300, 400, 500], reverse=True)"]}
{"id": "executable_parallel_function_40", "question": "\u6211\u9700\u8981\u9032\u884c\u4e00\u7cfb\u5217\u7684\u4e8c\u9032\u5236\u6578\u5b57\u76f8\u52a0\u3002\u4f60\u53ef\u4ee5\u5148\u5f9e0011\u548c1100\u76f8\u52a0\u958b\u59cb\u55ce\uff1f\u5b8c\u6210\u5f8c\uff0c\u6211\u9084\u9700\u89811010\u548c0101\u7684\u548c\uff0c\u7136\u5f8c\u518d\u52a0\u4e0a1111\u548c0000\u3002\u6700\u5f8c\uff0c\u8b93\u6211\u5011\u628a0001\u548c1110\u76f8\u52a0\u3002\u8acb\u544a\u8a34\u6211\u6bcf\u5c0d\u6578\u5b57\u7684\u7d50\u679c\u3002", "function": {"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["add_binary_numbers(a='0011', b='1100')", "add_binary_numbers(a='1010', b='0101')", "add_binary_numbers(a='1111', b='0000')", "add_binary_numbers(a='0001', b='1110')"]}
{"id": "executable_parallel_function_41", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u9805\u76ee\uff0c\u8a72\u9805\u76ee\u6d89\u53ca\u6839\u64da\u904e\u53bb\u7684\u6578\u64da\u9810\u6e2c\u672a\u4f86\u7684\u8da8\u52e2\u3002\u6211\u6709\u56db\u7d44\u9ede\uff0c\u9700\u8981\u4f7f\u7528\u7dda\u6027\u56de\u6b78\u6a21\u578b\u8a08\u7b97\u9810\u6e2c\u503c\u3002\u5c0d\u65bc\u7b2c\u4e00\u7d44\uff0cx\u5750\u6a19\u70ba[1\uff0c2\uff0c3]\uff0c\u76f8\u61c9\u7684y\u5750\u6a19\u70ba[4\uff0c5\uff0c6]\uff0c\u6211\u9700\u8981\u77e5\u9053\u5728x=10\u6642\u7684\u4f30\u8a08y\u503c\u3002\u5c0d\u65bc\u7b2c\u4e8c\u7d44\uff0cx\u70ba[2\uff0c4\uff0c6]\uff0cy\u70ba[8\uff0c10\uff0c12]\uff0c\u7576x=15\u6642\u7684y\u503c\u662f\u591a\u5c11\uff1f\u540c\u6a23\u5730\uff0c\u5c0d\u65bcx\u503c\u70ba[3\uff0c6\uff0c9]\uff0cy\u503c\u70ba[12\uff0c15\uff0c18]\u7684\u6578\u64da\uff0c\u6211\u60f3\u627e\u5230x=20\u6642\u7684y\u503c\u3002\u6700\u5f8c\uff0c\u5c0d\u65bc\u6700\u5f8c\u4e00\u7d44\uff0cx\u5750\u6a19\u70ba[4\uff0c8\uff0c12]\uff0cy\u5750\u6a19\u70ba[16\uff0c20\uff0c24]\uff0c\u6211\u60f3\u8a08\u7b97x=25\u6642\u7684y\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u904b\u884c\u9019\u4e9b\u9810\u6e2c\u55ce\uff1f", "function": {"name": "linear_regression", "description": "Finds the linear regression of a set of points and evaluates it at a given point.", "parameters": {"type": "dict", "properties": {"x": {"type": "array", "description": "The x coordinates of the points.", "items": {"type": "integer"}}, "y": {"type": "array", "description": "The y coordinates of the points.", "items": {"type": "integer"}}, "point": {"type": "integer", "description": "The point to calculate the linear regression at."}}, "required": ["x", "y", "point"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["linear_regression(x=[1,2,3],y=[4,5,6],point=10)", "linear_regression(x=[2,4,6],y=[8,10,12],point=15)", "linear_regression(x=[3,6,9],y=[12,15,18],point=20)", "linear_regression(x=[4,8,12],y=[16,20,24],point=25)"]}
{"id": "executable_parallel_function_42", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u6d89\u53ca\u5206\u6790\u5e7e\u4f55\u5716\u6848\u7684\u9805\u76ee\uff0c\u6211\u9700\u8981\u627e\u51fa\u5728\u4e0d\u540c\u5ea7\u6a19\u96c6\u5408\u4e2d\uff0c\u4e00\u689d\u76f4\u7dda\u4e0a\u6700\u591a\u53ef\u4ee5\u6709\u591a\u5c11\u500b\u9ede\u3002\u4f60\u80fd\u5e6b\u6211\u89e3\u6c7a\u9019\u500b\u554f\u984c\u55ce\uff1f\n\n\u9996\u5148\uff0c\u5c0d\u65bc\u9ede\u96c6\u5408[[1,1],[2,2],[3,4],[5,5]]\uff0c\u6709\u591a\u5c11\u500b\u9ede\u5728\u540c\u4e00\u689d\u76f4\u7dda\u4e0a\uff1f\n\n\u63a5\u4e0b\u4f86\uff0c\u5c0d\u65bc[[1,2],[3,2],[5,2],[4,2]]\uff0c\u4e00\u689d\u76f4\u7dda\u4e0a\u6700\u591a\u53ef\u4ee5\u6709\u591a\u5c11\u500b\u9ede\uff1f\n\n\u7136\u5f8c\uff0c\u5c0d\u65bc\u5ea7\u6a19\u96c6\u5408[[0,0],[1,1],[0,1],[1,0]]\uff0c\u4f60\u80fd\u78ba\u5b9a\u6700\u591a\u53ef\u4ee5\u6709\u591a\u5c11\u500b\u5171\u7dda\u9ede\u55ce\uff1f\n\n\u6700\u5f8c\uff0c\u5c0d\u65bc\u5ea7\u6a19[[1,1],[3,2],[5,3],[7,4]]\uff0c\u6211\u9700\u8981\u76f8\u540c\u7684\u8a08\u7b97\u3002\n\n\u8acb\u63d0\u4f9b\u6bcf\u7d44\u5ea7\u6a19\u96c6\u5408\u7684\u6700\u5927\u5171\u7dda\u9ede\u6578\u3002", "function": {"name": "maxPoints", "description": "Finds the maximum number of points on a line.", "parameters": {"type": "dict", "properties": {"points": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}, "description": "A point represented by a 2 element list [x, y]."}, "description": "The list of points. Points are 2 element lists."}}, "required": ["points"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["maxPoints(points=[[1,1],[2,2],[3,4],[5,5]])", "maxPoints(points=[[1,2],[3,2],[5,2],[4,2]])", "maxPoints(points=[[0,0],[1,1],[0,1],[1,0]])", "maxPoints(points=[[1,1],[3,2],[5,3],[7,4]])"]}
{"id": "executable_parallel_function_43", "question": "\u6211\u6b63\u5728\u8003\u616e\u4e00\u4e9b\u6295\u8cc7\u65b9\u6848\uff0c\u5e0c\u671b\u4e86\u89e3\u6211\u7684\u8cc7\u672c\u5728\u4e0d\u540c\u6642\u9593\u6846\u67b6\u548c\u4e0d\u540c\u689d\u4ef6\u4e0b\u7684\u6f5b\u5728\u589e\u9577\u3002\u9996\u5148\uff0c\u8b93\u6211\u5011\u4f86\u770b\u4e00\u4e0b\u521d\u59cb\u6295\u8cc7\u70ba$1,000,000\uff0c\u6bcf\u5e74\u589e\u52a0$1,000\u7684\u60c5\u6cc1\u3002\u6211\u8a08\u5283\u4fdd\u6301\u9019\u500b\u6295\u8cc73\u5e74\uff0c\u9810\u671f\u6bcf\u5e74\u56de\u5831\u7387\u70ba10%\u3002\u7136\u800c\uff0c\u6211\u77e5\u9053\u901a\u8ca8\u81a8\u8139\u53ef\u80fd\u6703\u5f71\u97ff\u6211\u7684\u6295\u8cc7\u5be6\u969b\u50f9\u503c\uff0c\u6211\u4f30\u8a08\u7b2c\u4e00\u5e74\u70ba1%\uff0c\u63a5\u4e0b\u4f86\u5169\u5e74\u70ba4%\u3002\u4f60\u80fd\u8a08\u7b97\u4e00\u4e0b\u9019\u500b\u6295\u8cc7\u5728\u671f\u9650\u7d50\u675f\u6642\u7684\u5be6\u969b\u50f9\u503c\u55ce\uff1f\n\n\u63a5\u4e0b\u4f86\uff0c\u6211\u6709\u7b2c\u4e8c\u500b\u65b9\u6848\uff0c\u6211\u5f9e$500,000\u958b\u59cb\uff0c\u6bcf\u5e74\u589e\u52a0$500\u3002\u9019\u6b21\uff0c\u6295\u8cc7\u671f\u9650\u70ba5\u5e74\uff0c\u6bcf\u5e74\u56de\u5831\u7387\u70ba7%\uff0c\u6211\u7684\u901a\u8ca8\u81a8\u8139\u4f30\u8a08\u5206\u5225\u70ba2%\u30013%\u30012%\u30013%\uff0c\u7136\u5f8c\u6bcf\u5e74\u90fd\u662f2%\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u6295\u8cc7\u50f9\u503c\u6703\u662f\u591a\u5c11\uff1f\n\n\u63a5\u4e0b\u4f86\uff0c\u8b93\u6211\u5011\u8003\u616e\u4e00\u500b\u8f03\u5c0f\u7684\u521d\u59cb\u91d1\u984d\u70ba$250,000\uff0c\u6bcf\u5e74\u589e\u52a0$2,000\u7684\u60c5\u6cc1\u3002\u6211\u5e0c\u671b\u4fdd\u6301\u9019\u500b\u6295\u8cc77\u5e74\uff0c\u6bcf\u5e74\u5e0c\u671b\u67095%\u7684\u56de\u5831\u3002\u901a\u8ca8\u81a8\u8139\u9810\u8a08\u6bcf\u5e74\u4ea4\u66ff\u70ba1%\u548c2%\u3002\u6211\u4e5f\u9700\u8981\u77e5\u9053\u9019\u500b\u6295\u8cc7\u7684\u8abf\u6574\u5f8c\u7684\u50f9\u503c\u3002\n\n\u6700\u5f8c\uff0c\u6211\u6709\u4e00\u500b\u66f4\u9577\u671f\u7684\u8a08\u5283\uff0c\u6211\u5f9e$800,000\u958b\u59cb\uff0c\u6bcf\u5e74\u589e\u52a0$1,500\uff0c\u6301\u7e8c10\u5e74\u3002\u6211\u5e0c\u671b\u9019\u500b\u6295\u8cc7\u6bcf\u5e74\u80fd\u67098%\u7684\u56de\u5831\u3002\u901a\u8ca8\u81a8\u8139\u9810\u8a08\u6bcf\u9694\u4e00\u5e74\u4ea4\u66ff\u70ba1%\u548c2%\u3002\u8003\u616e\u901a\u8ca8\u81a8\u8139\u8abf\u6574\u5f8c\uff0c\u9019\u500b\u6295\u8cc7\u7684\u6700\u7d42\u50f9\u503c\u6703\u662f\u591a\u5c11\uff1f\n\n\u5c0d\u65bc\u6240\u6709\u65b9\u6848\uff0c\u8acb\u8abf\u6574\u6700\u7d42\u503c\u4ee5\u8003\u616e\u901a\u8ca8\u81a8\u8139\u3002", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "float", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.1, inflation_rate=[0.01, 0.04, 0.04])", "calculate_investment_value(initial_investment=500000, annual_contribution=500, years=5, annual_return=0.07, inflation_rate=[0.02, 0.03, 0.02, 0.03, 0.02])", "calculate_investment_value(initial_investment=250000, annual_contribution=2000, years=7, annual_return=0.05, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01])", "calculate_investment_value(initial_investment=800000, annual_contribution=1500, years=10, annual_return=0.08, inflation_rate=[0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02, 0.01, 0.02])"]}
{"id": "executable_parallel_function_44", "question": "\u6211\u6b63\u5728\u5236\u5b9a\u4e00\u500b\u65b0\u7684\u5065\u8eab\u8a08\u5283\uff0c\u9700\u8981\u6839\u64da\u5e7e\u4f4d\u4e0d\u540c\u7684\u5ba2\u6236\u6a94\u6848\u4f86\u91cf\u8eab\u5b9a\u5236\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u4ed6\u5011\u6bcf\u5929\u7684\u71df\u990a\u9700\u6c42\u55ce\uff1f\u4ee5\u4e0b\u662f\u8a73\u7d30\u4fe1\u606f\uff1a\n\n1. \u4e00\u4f4d25\u6b72\u7684\u7537\u6027\uff0c\u8eab\u9ad8180\u5398\u7c73\uff0c\u9ad4\u91cd75\u516c\u65a4\uff0c\u904b\u52d5\u91cf\u4e2d\u7b49\uff08\u7b49\u7d1a3\uff09\uff0c\u5e0c\u671b\u589e\u91cd\u3002\n2. \u4e00\u4f4d30\u6b72\u7684\u5973\u6027\uff0c\u8eab\u9ad8165\u5398\u7c73\uff0c\u9ad4\u91cd65\u516c\u65a4\uff0c\u6d3b\u52d5\u91cf\u8f15\u5fae\uff08\u7b49\u7d1a2\uff09\uff0c\u76ee\u6a19\u662f\u4fdd\u6301\u73fe\u6709\u9ad4\u91cd\u3002\n3. \u4e00\u4f4d40\u6b72\u7684\u7537\u6027\uff0c\u8eab\u9ad8175\u5398\u7c73\uff0c\u9ad4\u91cd85\u516c\u65a4\uff0c\u6d3b\u52d5\u91cf\u975e\u5e38\u5927\uff08\u7b49\u7d1a5\uff09\uff0c\u76ee\u6a19\u662f\u6e1b\u80a5\u3002\n4. \u6700\u5f8c\uff0c\u4e00\u4f4d55\u6b72\u7684\u5973\u6027\uff0c\u8eab\u9ad8160\u5398\u7c73\uff0c\u9ad4\u91cd70\u516c\u65a4\uff0c\u6d3b\u52d5\u91cf\u4e0d\u5927\uff08\u7b49\u7d1a1\uff09\uff0c\u540c\u6a23\u5e0c\u671b\u6e1b\u80a5\u3002\n\n\u4f60\u80fd\u70ba\u6bcf\u4f4d\u5ba2\u6236\u63d0\u4f9b\u71df\u990a\u9700\u6c42\u55ce\uff1f", "function": {"name": "calculate_nutritional_needs", "description": "Calculates the nutritional needs of a person based on their weight, height, age, gender, activity level, and goal.", "parameters": {"type": "dict", "properties": {"weight": {"type": "float", "description": "The weight of the person in kilograms."}, "height": {"type": "float", "description": "The height of the person in centimeters."}, "age": {"type": "float", "description": "The age of the person in years."}, "gender": {"type": "string", "description": "The gender of the person. Possible options [male, female, other]."}, "activity_level": {"type": "float", "description": "The activity level of the person. Possible options [1,2,3,4,5]."}, "goal": {"type": "string", "description": "The goal of the person. Possible options [lose, gain, maintain]."}}, "required": ["weight", "height", "age", "gender", "activity_level", "goal"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_nutritional_needs(weight=75, height=180, age=25, gender='male', activity_level=3, goal='gain')", "calculate_nutritional_needs(weight=65, height=165, age=30, gender='female', activity_level=2, goal='maintain')", "calculate_nutritional_needs(weight=85, height=175, age=40, gender='male', activity_level=5, goal='lose')", "calculate_nutritional_needs(weight=70, height=160, age=55, gender='female', activity_level=1, goal='lose')"]}
{"id": "executable_parallel_function_45", "question": "\u6211\u8a08\u5283\u5728\u9019\u500b\u9031\u672b\u8209\u8fa6\u4e00\u500b\u5c0f\u805a\u6703\uff0c\u6211\u60f3\u70ba\u6211\u7684\u5ba2\u4eba\u8a02\u8cfc\u4e00\u4e9b\u98df\u7269\u3002\u6211\u60f3\u5148\u5f9e10\u500b\u6bcf\u500b$5\u7684\u6f22\u5821\u958b\u59cb\u3002\u63a5\u8457\uff0c\u6211\u60f3\u518d\u52a0\u4e0a7\u500b\u51b0\u6dc7\u6dcb\uff0c\u6bcf\u500b$2\u3002\u7136\u5f8c\uff0c\u6211\u60f3\u5728\u8a02\u55ae\u4e2d\u52a0\u51653\u500b\u6bcf\u500b$8\u7684\u6bd4\u85a9\u3002\u6700\u5f8c\uff0c\u70ba\u4e86\u5b8c\u7f8e\u6536\u5c3e\uff0c\u6211\u60f3\u898112\u500b\u6bcf\u500b$1\u7684\u751c\u751c\u5708\u3002\u80fd\u5426\u7528\u4f60\u5011\u7684\u8a02\u8cfc\u7cfb\u7d71\u8a08\u7b97\u9019\u4e9b\u7269\u54c1\u7684\u7e3d\u8cbb\u7528\uff1f", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["order_food(item=['burger'], quantity=[10], price=[5])", "order_food(item=['ice cream'], quantity=[7], price=[2])", "order_food(item=['pizza'], quantity=[3], price=[8])", "order_food(item=['donut'], quantity=[12], price=[1])"]}
{"id": "executable_parallel_function_46", "question": "\u6211\u5011\u6b63\u5728\u8a08\u5283\u4e00\u9813\u665a\u9910\uff0c\u6c7a\u5b9a\u8a02\u8cfc\u4e00\u5927\u5806\u98df\u7269\u3002\u6211\u5011\u60f3\u8981101\u500b\u6bcf\u500b0.1\u7f8e\u5143\u7684\u9903\u5b50\uff0c20\u500b\u6bcf\u500b10\u7f8e\u5143\u7684\u98ef\u7897\uff0c50\u500b\u6bcf\u500b0.5\u7f8e\u5143\u7684\u6625\u6372\uff0c\u4ee5\u53ca10\u7897\u6bcf\u78973\u7f8e\u5143\u7684\u9eb5\u689d\u6e6f\u3002\u6211\u9700\u8981\u77e5\u9053\u6211\u5011\u7684\u9910\u9ede\u7e3d\u5171\u591a\u5c11\u9322\u3002\u4f60\u80fd\u5e6b\u6211\u7b97\u4e00\u4e0b\u55ce\uff1f", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["order_food(item=['dumplings'], quantity=[101], price=[0.1])", "order_food(item=['rice bowl'], quantity=[20], price=[10])", "order_food(item=['spring rolls'], quantity=[50], price=[0.5])", "order_food(item=['noodle soup'], quantity=[10], price=[3])"]}
{"id": "executable_parallel_function_47", "question": "\u4eca\u665a\u6211\u8981\u8209\u8fa6\u4e00\u5834\u5854\u502b\u63d0\u8afe\u96fb\u5f71\u99ac\u62c9\u677e\uff0c\u60f3\u8981\u78ba\u4fdd\u6211\u5c0d\u9019\u4e9b\u96fb\u5f71\u7684\u4e8b\u5be6\u90fd\u6709\u6240\u4e86\u89e3\uff0c\u4ee5\u4fbf\u5728\u548c\u670b\u53cb\u5011\u4e00\u8d77\u73a9\u554f\u7b54\u904a\u6232\u6642\u80fd\u5920\u8868\u73fe\u51fa\u8272\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u4e00\u4e0b\u9019\u4e9b\u96fb\u5f71\u7684\u5c0e\u6f14\u55ce\uff1f\u5b83\u5011\u5206\u5225\u662f\u300a\u4f4e\u4fd7\u5c0f\u8aaa\u300b\u3001\u300a\u60e1\u72ac\u5144\u5f1f\u300b\u3001\u300a\u8ffd\u6bba\u6bd4\u723e\u300b\u548c\u300a\u88ab\u89e3\u653e\u7684\u59dc\u6208\u300b\u3002\u6211\u9700\u8981\u9019\u4e9b\u8cc7\u8a0a\u4f86\u7d66\u6211\u7684\u670b\u53cb\u5011\u7559\u4e0b\u6df1\u523b\u7684\u5370\u8c61\u3002", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_movie_director(movie_name='Pulp Fiction')", "get_movie_director(movie_name='Reservoir Dogs')", "get_movie_director(movie_name='Kill Bill')", "get_movie_director(movie_name='Django Unchained')"]}
{"id": "executable_parallel_function_48", "question": "\u6211\u6700\u8fd1\u4e00\u76f4\u5728\u8ffd\u770b\u7d93\u5178\u96fb\u5f71\uff0c\u6211\u5df2\u7d93\u6e96\u5099\u597d\u5e7e\u90e8\u6a19\u8a8c\u6027\u7684\u96fb\u5f71\u4f86\u770b\u4e0b\u4e00\u6b21\u7684\u96fb\u5f71\u4e4b\u591c\u3002\u4e0d\u904e\uff0c\u6211\u7684\u8868\u5f1f\u6703\u7559\u5bbf\uff0c\u6211\u60f3\u78ba\u4fdd\u9019\u4e9b\u96fb\u5f71\u9069\u5408\u6211\u5011\u4e00\u8d77\u770b\u3002\u4f60\u53ef\u4ee5\u5e6b\u6211\u67e5\u4e00\u4e0b\u300a\u4f4e\u4fd7\u5c0f\u8aaa\u300b\u3001\u300a\u6559\u7236\u300b\u3001\u300a\u8f9b\u5fb7\u52d2\u7684\u540d\u55ae\u300b\u548c\u300a\u9ed1\u6697\u9a0e\u58eb\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_movie_rating(movie_name='Pulp Fiction')", "get_movie_rating(movie_name='The Godfather')", "get_movie_rating(movie_name=\"Schindler's List\")", "get_movie_rating(movie_name='The Dark Knight')"]}
{"id": "executable_parallel_function_49", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u9805\u76ee\uff0c\u9700\u8981\u6839\u64da\u5b83\u5011\u7684\u89d2\u9ede\u8a08\u7b97\u5404\u7a2e\u5730\u584a\u7684\u9762\u7a4d\u3002\u5c0d\u65bc\u6211\u7684\u7b2c\u4e00\u584a\u5730\uff0c\u89d2\u843d\u4f4d\u65bc[1,2]\uff0c[3,4]\uff0c[1,4]\u548c[3,7]\u7684\u9ede\u3002\u5c0d\u65bc\u7b2c\u4e8c\u584a\u5730\uff0c\u89d2\u843d\u4f4d\u65bc[5,5]\uff0c[6,7]\u548c[7,5]\u3002\u7b2c\u4e09\u584a\u5730\u7684\u89d2\u843d\u4f4d\u65bc[2,1]\uff0c[4,2]\uff0c[3,4]\u548c[1,3]\uff0c\u6700\u5f8c\u4e00\u584a\u5730\u7684\u89d2\u843d\u4f4d\u65bc[-1,0]\uff0c[2,3]\uff0c[0,4]\u548c[-2,2]\uff0c\u5b83\u7684\u5f62\u72c0\u6709\u4e9b\u4e0d\u898f\u5247\u3002\u4f60\u80fd\u63d0\u4f9b\u9019\u56db\u584a\u5730\u7684\u9762\u7a4d\u8a08\u7b97\u55ce\uff1f", "function": {"name": "polygon_area", "description": "Calculate the area of a polygon given its vertices using the shoelace formula.", "parameters": {"type": "dict", "properties": {"vertices": {"type": "array", "items": {"type": "array", "items": {"type": "float"}, "description": "A single vertex represented by a 2 element list [x, y]."}, "description": "The vertices of the polygon, where each vertex is a 2 element list [x, y]."}}, "required": ["vertices"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["polygon_area(vertices=[[1,2],[3,4],[1,4],[3,7]])", "polygon_area(vertices=[[5,5],[6,7],[7,5]])", "polygon_area(vertices=[[2,1],[4,2],[3,4],[1,3]])", "polygon_area(vertices=[[-1,0],[2,3],[0,4],[-2,2]])"]}