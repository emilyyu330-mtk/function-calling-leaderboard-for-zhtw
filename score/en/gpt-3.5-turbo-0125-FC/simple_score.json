{"accuracy": 0.8775, "correct_count": 351, "total_count": 400}
{"id": 1, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_0", "question": "Find the area of a triangle with a base of 10 units and height of 5 units.", "function": {"name": "calculate_triangle_area", "description": "Calculate the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle."}, "unit": {"type": "string", "description": "The unit of measure (defaults to 'units' if not specified)"}}, "required": ["base", "height"]}}}, "model_result_raw": [{"calculate_triangle_area": "{\"base\": 10, \"height\": 5}"}, {"calculate_triangle_area": "{\"base\": 10, \"height\": 5, \"unit\": \"units\"}"}], "model_result_decoded": [{"calculate_triangle_area": {"base": 10, "height": 5}}, {"calculate_triangle_area": {"base": 10, "height": 5, "unit": "units"}}], "possible_answer": {"calculate_triangle_area": {"base": [10], "height": [5], "unit": ["units", ""]}}}
{"id": 3, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_2", "question": "Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5.", "function": {"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "dict", "properties": {"x": {"type": "integer", "description": "The x-coordinate value."}, "y": {"type": "integer", "description": "The y-coordinate value."}, "z": {"type": "integer", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}}, "model_result_raw": [{"math_hypot": "{\"x\": 4, \"y\": 5}"}, {"math_hypot": "{\"x\": 4, \"y\": 5, \"z\": 0}"}], "model_result_decoded": [{"math_hypot": {"x": 4, "y": 5}}, {"math_hypot": {"x": 4, "y": 5, "z": 0}}], "possible_answer": {"math.hypot": {"x": [4], "y": [5], "z": ["", 0]}}}
{"id": 6, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_5", "question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": [{"solve_quadratic": "{\"a\": 3, \"b\": -11, \"c\": -4}"}, {"solve_quadratic": "{\"a\": 3, \"b\": -11, \"c\": -4, \"root_type\": \"real\"}"}], "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}, {"solve_quadratic": {"a": 3, "b": -11, "c": -4, "root_type": "real"}}], "possible_answer": {"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["", "real"]}}}
{"id": 7, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_6", "question": "What are the roots of the quadratic equation where a=2, b=5 and c=3 ?", "function": {"name": "solve_quadratic", "description": "Find the roots of a quadratic equation. Returns both roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x\u00b2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": [{"solve_quadratic": "{\"a\": 2, \"b\": 5, \"c\": 3}"}, {"solve_quadratic": "{\"a\": 2, \"b\": 5, \"c\": 3}"}], "model_result_decoded": [{"solve_quadratic": {"a": 2, "b": 5, "c": 3}}, {"solve_quadratic": {"a": 2, "b": 5, "c": 3}}], "possible_answer": {"solve_quadratic": {"a": [2], "b": [5], "c": [3]}}}
{"id": 9, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_8", "question": "What's the area of a circle with a radius of 10?", "function": {"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to 'meters')."}}, "required": ["radius"]}}}, "model_result_raw": [{"geometry_area_circle": "{\"radius\": 10}"}, {"geometry_area_circle": "{\"radius\": 10, \"units\": \"meters\"}"}], "model_result_decoded": [{"geometry_area_circle": {"radius": 10}}, {"geometry_area_circle": {"radius": 10, "units": "meters"}}], "possible_answer": {"geometry.area_circle": {"radius": [10], "units": ["meters", "\u7c73", "\u516c\u5c3a", ""]}}}
{"id": 14, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"function\":\"x**2\",\"interval\":[1,3],\"method\":\"trapezoidal\"}"}], "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal", "\u68af\u5f62"]}}}
{"id": 20, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_19", "question": "Calculate the greatest common divisor of two numbers: 40 and 50", "function": {"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}}, "model_result_raw": [{"math_gcd": "{\"num1\": 40, \"num2\": 50}"}, {"math_gcd": "{\"num1\": 50, \"num2\": 40}"}], "model_result_decoded": [{"math_gcd": {"num1": 40, "num2": 50}}, {"math_gcd": {"num1": 50, "num2": 40}}], "possible_answer": {"math.gcd": {"num1": [40], "num2": [50]}}}
{"id": 21, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_20", "question": "Find the highest common factor of 36 and 24.", "function": {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}}, "model_result_raw": [{"math_hcf": "{\"number1\": 36, \"number2\": 24}"}, {"math_hcf": "{\"number1\": 24, \"number2\": 36}"}], "model_result_decoded": [{"math_hcf": {"number1": 36, "number2": 24}}, {"math_hcf": {"number1": 24, "number2": 36}}], "possible_answer": {"math.hcf": {"number1": [36], "number2": [24]}}}
{"id": 22, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_21", "question": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.", "function": {"name": "number_theory.gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}}, "model_result_raw": [{"number_theory_gcd": "{\"number1\": 36, \"number2\": 48}"}, {"number_theory_gcd": "{\"number1\": 48, \"number2\": 36}"}], "model_result_decoded": [{"number_theory_gcd": {"number1": 36, "number2": 48}}, {"number_theory_gcd": {"number1": 48, "number2": 36}}], "possible_answer": {"number_theory.gcd": {"number1": [36], "number2": [48]}}}
{"id": 23, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_22", "question": "Calculate the greatest common divisor of two given numbers, for example 12 and 15.", "function": {"name": "math.gcd", "description": "Calculate the greatest common divisor (gcd) of the two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}}, "model_result_raw": [{"math_gcd": "{\"num1\": 12, \"num2\": 15}"}, {"math_gcd": "{\"num1\": 15, \"num2\": 12}"}], "model_result_decoded": [{"math_gcd": {"num1": 12, "num2": 15}}, {"math_gcd": {"num1": 15, "num2": 12}}], "possible_answer": {"math.gcd": {"num1": [12], "num2": [15]}}}
{"id": 27, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_26", "question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "integer", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}}, "model_result_raw": [{"calculate_velocity": "{\"distance\": 50, \"duration\": 2}"}, {"calculate_velocity": "{\"distance\": 50, \"duration\": 2, \"unit\": \"m/s\"}"}], "model_result_decoded": [{"calculate_velocity": {"distance": 50, "duration": 2}}, {"calculate_velocity": {"distance": 50, "duration": 2, "unit": "m/s"}}], "possible_answer": {"calculate_velocity": {"distance": [50], "duration": [2], "unit": ["", "km/h", "\u516c\u91cc/\u5c0f\u6642"]}}}
{"id": 37, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'mi'. Expected one of ['km', '', '\u516c\u91cc']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_36", "question": "Find the shortest driving distance between New York City and Washington D.C.", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}}, "model_result_raw": [{"get_shortest_driving_distance": "{\"origin\":\"New York City\",\"destination\":\"Washington D.C.\",\"unit\":\"mi\"}"}], "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York City", "destination": "Washington D.C.", "unit": "mi"}}], "possible_answer": {"get_shortest_driving_distance": {"origin": ["New York City", "\u7d10\u7d04\u5e02"], "destination": ["Washington D.C.", "\u83ef\u76db\u9813\u7279\u5340"], "unit": ["km", "", "\u516c\u91cc"]}}}
{"id": 38, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_37", "question": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey.", "function": {"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": [{"route_estimate_time": "{\"start_location\": \"San Francisco\", \"end_location\": \"Los Angeles\", \"stops\": [\"Santa Barbara\", \"Monterey\"]}"}, {"route_estimate_time": "{\"start_location\": \"San Francisco\", \"end_location\": \"Los Angeles\", \"stops\": [\"Monterey\"]}"}, {"route_estimate_time": "{\"start_location\": \"San Francisco\", \"end_location\": \"Los Angeles\", \"stops\": [\"Santa Barbara\"]}"}], "model_result_decoded": [{"route_estimate_time": {"start_location": "San Francisco", "end_location": "Los Angeles", "stops": ["Santa Barbara", "Monterey"]}}, {"route_estimate_time": {"start_location": "San Francisco", "end_location": "Los Angeles", "stops": ["Monterey"]}}, {"route_estimate_time": {"start_location": "San Francisco", "end_location": "Los Angeles", "stops": ["Santa Barbara"]}}], "possible_answer": {"route.estimate_time": {"start_location": ["San Francisco", "\u820a\u91d1\u5c71"], "end_location": ["Los Angeles", "\u6d1b\u6749\u78ef"], "stops": [["Santa Barbara", "Monterey"], ["Monterey", "Santa Barbara"], ["\u8056\u5854\u82ad\u82ad\u62c9", "\u8499\u7279\u96f7"], ["\u8499\u7279\u96f7", "\u8056\u5854\u82ad\u82ad\u62c9"]]}}}
{"id": 39, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_38", "question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": {"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}}, "model_result_raw": [{"calculate_electrostatic_potential": "{\"charge1\": 1e-09, \"charge2\": 2e-09, \"distance\": 0.05}"}, {"calculate_electrostatic_potential": "{\"charge1\": 1e-09, \"charge2\": 2e-09, \"distance\": 0.05, \"constant\": 8990000000.0}"}], "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 2e-09, "distance": 0.05}}, {"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 2e-09, "distance": 0.05, "constant": 8990000000.0}}], "possible_answer": {"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}}
{"id": 46, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_45", "question": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.", "function": {"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}}, "model_result_raw": [{"thermo_calculate_energy": "{\"mass\": 100, \"phase_transition\": \"vaporization\", \"substance\": \"water\"}"}, {"thermo_calculate_energy": "{\"mass\": 100, \"phase_transition\": \"melting\", \"substance\": \"ice\"}"}], "model_result_decoded": [{"thermo_calculate_energy": {"mass": 100, "phase_transition": "vaporization", "substance": "water"}}, {"thermo_calculate_energy": {"mass": 100, "phase_transition": "melting", "substance": "ice"}}], "possible_answer": {"thermo.calculate_energy": {"mass": [100], "phase_transition": ["vaporization", "\u84b8\u767c"], "substance": ["water", "", "\u6c34"]}}}
{"id": 52, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'isothermal': False. Expected one of ['', True]."], "error_type": "value_error:others", "prompt": {"id": "simple_51", "question": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.", "function": {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "integer", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "integer", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "integer", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}}, "model_result_raw": [{"calculate_entropy_change": "{\"initial_temp\":300,\"final_temp\":400,\"heat_capacity\":5,\"isothermal\":false}"}], "model_result_decoded": [{"calculate_entropy_change": {"initial_temp": 300, "final_temp": 400, "heat_capacity": 5, "isothermal": false}}], "possible_answer": {"calculate_entropy_change": {"initial_temp": [300], "final_temp": [400], "heat_capacity": [5], "isothermal": ["", true]}}}
{"id": 56, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human', '\u4eba', '\u4eba\u985e']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": [{"biology_get_cell_info": "{\"cell_type\":\"human cell\",\"detailed\":true}"}], "model_result_decoded": [{"biology_get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human", "\u4eba", "\u4eba\u985e"], "detailed": [true]}}}
{"id": 68, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_67", "question": "Identify a small green bird in forest.", "function": {"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "dict", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird. Default is 'small'"}}, "required": ["color", "habitat"]}}}, "model_result_raw": [{"identify_bird": "{\"color\": \"green\", \"habitat\": \"forest\", \"size\": \"small\"}"}, {"identify_bird": "{\"color\": \"green\", \"habitat\": \"forest\", \"size\": \"small\"}"}], "model_result_decoded": [{"identify_bird": {"color": "green", "habitat": "forest", "size": "small"}}, {"identify_bird": {"color": "green", "habitat": "forest", "size": "small"}}], "possible_answer": {"identify_bird": {"color": ["green", "\u7da0\u8272", "\u7da0"], "habitat": ["forest", "\u68ee\u6797"], "size": ["small", "\u5c0f"]}}}
{"id": 78, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Los Angeles'. Expected one of ['Los Angeles, CA', '\u52a0\u5dde\u6d1b\u6749\u78ef', '\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_77", "question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": [{"restaurant_find_nearby": "{\"location\":\"Los Angeles\",\"dietary_preference\":[\"Vegan\"]}"}], "model_result_decoded": [{"restaurant_find_nearby": {"location": "Los Angeles", "dietary_preference": ["Vegan"]}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef"], "dietary_preference": [["Vegan", "\u7d20", "\u7d20\u98df"]]}}}
{"id": 83, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"list\":[5,3,4,1,2],\"order\":\"ascending\"}"}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending", "\u5347\u5e8f", "\u905e\u589e"]}}}
{"id": 92, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_91", "question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": [{"get_restaurant": "{\"cuisine\": \"Sushi\", \"location\": \"Boston\", \"condition\": \"Opens on Sundays\"}"}, {"get_restaurant": "{\"cuisine\": \"Sushi\", \"location\": \"Boston\", \"condition\": \"Highest Rated\"}"}], "model_result_decoded": [{"get_restaurant": {"cuisine": "Sushi", "location": "Boston", "condition": "Opens on Sundays"}}, {"get_restaurant": {"cuisine": "Sushi", "location": "Boston", "condition": "Highest Rated"}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi", "\u58fd\u53f8"], "location": ["Boston", "\u6ce2\u58eb\u9813"], "condition": ["open on Sundays", "opens on Sundays", "\u661f\u671f\u5929\u71df\u696d", "\u661f\u671f\u65e5\u71df\u696d", "\u9031\u65e5\u71df\u696d"]}}}
{"id": 104, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": [{"mathematics_calculate_area_under_curve": "{\"polynomial\":[3,2,-4],\"limits\":[-1,2]}"}], "model_result_decoded": [{"mathematics_calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_122", "question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": [{"chi_squared_test": "{\"table\":[10,20,30,40]}"}], "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 145, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_144", "question": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "function": {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}}, "model_result_raw": [{"market_performance_get_data": "{\"indexes\": [\"S&P 500\"], \"days\": 5}"}, {"market_performance_get_data": "{\"indexes\": [\"Dow Jones\"], \"days\": 5}"}], "model_result_decoded": [{"market_performance_get_data": {"indexes": ["S&P 500"], "days": 5}}, {"market_performance_get_data": {"indexes": ["Dow Jones"], "days": 5}}], "possible_answer": {"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}}
{"id": 148, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_147", "question": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "function": {"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}}, "model_result_raw": [{"get_stock_prices": "{\"companies\": [\"Microsoft\"], \"duration\": \"2 weeks\"}"}, {"get_stock_prices": "{\"companies\": [\"Google\"], \"duration\": \"2 weeks\"}"}], "model_result_decoded": [{"get_stock_prices": {"companies": ["Microsoft"], "duration": "2 weeks"}}, {"get_stock_prices": {"companies": ["Google"], "duration": "2 weeks"}}], "possible_answer": {"get_stock_prices": {"companies": [["Microsoft", "Google"], ["\u5fae\u8edf", "\u8c37\u6b4c"]], "duration": ["2 weeks", "\u5169\u9031", "\u5169\u661f\u671f"]}}}
{"id": 150, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_149", "question": "What's the current stock price of Apple and Microsoft?", "function": {"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}}, "model_result_raw": [{"get_stock_price": "{\"company_names\": [\"Apple\"]}"}, {"get_stock_price": "{\"company_names\": [\"Microsoft\"]}"}], "model_result_decoded": [{"get_stock_price": {"company_names": ["Apple"]}}, {"get_stock_price": {"company_names": ["Microsoft"]}}], "possible_answer": {"get_stock_price": {"company_names": [["Apple", "Microsoft"], [["Apple"], ["Microsoft"]], ["AAPL", "MSFT"], ["\u860b\u679c", "\u5fae\u8edf"], [["\u860b\u679c"], ["\u5fae\u8edf"]]]}}}
{"id": 152, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": [{"highest_grossing_banks": "{\"country\":\"United States\",\"year\":2020}"}], "model_result_decoded": [{"highest_grossing_banks": {"country": "United States", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S.", "\u7f8e\u570b"], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'San Diego County'. Expected one of ['San Diego', '\u8056\u5730\u7259\u54e5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_156", "question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": [{"crime_record_get_record": "{\"case_number\":\"CA123456\",\"county\":\"San Diego County\",\"details\":true}"}], "model_result_decoded": [{"crime_record_get_record": {"case_number": "CA123456", "county": "San Diego County", "details": true}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "\u8056\u5730\u7259\u54e5"], "details": [true]}}}
{"id": 167, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL', '\u829d\u52a0\u54e5', '\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_166", "question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": [{"lawyer_find_nearby": "{\"city\":\"Chicago\",\"specialty\":[\"Divorce\"],\"fee\":400}"}], "model_result_decoded": [{"lawyer_find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL", "\u829d\u52a0\u54e5", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5"], "specialty": [["Divorce", "\u96e2\u5a5a"]], "fee": [400]}}}
{"id": 184, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County', '\u8056\u5854\u514b\u62c9\u62c9', '\u8056\u5854\u514b\u62c9\u62c9\u7e23']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": [{"lawsuit_search": "{\"entity\":\"Apple\",\"county\":\"Santa Clara\",\"state\":\"California\"}"}], "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple", "\u860b\u679c"], "county": ["Santa Clara County", "\u8056\u5854\u514b\u62c9\u62c9", "\u8056\u5854\u514b\u62c9\u62c9\u7e23"], "state": ["California", "", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 191, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_190", "question": "What's the elevation and area of Yellowstone National Park?", "function": {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}}, "model_result_raw": [{"park_information": "{\"park_name\": \"Yellowstone National Park\", \"information\": [\"Elevation\"]}"}, {"park_information": "{\"park_name\": \"Yellowstone National Park\", \"information\": [\"Area\"]}"}], "model_result_decoded": [{"park_information": {"park_name": "Yellowstone National Park", "information": ["Elevation"]}}, {"park_information": {"park_name": "Yellowstone National Park", "information": ["Area"]}}], "possible_answer": {"park_information": {"park_name": ["Yellowstone", "Yellowstone National Park", "\u9ec3\u77f3\u570b\u5bb6\u516c\u5712", "\u9ec3\u77f3"], "information": [["Elevation", "Area"], ["Area", "Elevation"], ["\u6d77\u62d4", "\u9762\u7a4d"], ["\u9762\u7a4d", "\u6d77\u62d4"]]}}}
{"id": 194, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'plant_types': ['Annual']. Expected one of [['Annual', '\u4e00\u5e74\u751f']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_193", "question": "Find the best local nurseries in Toronto with a good variety of annual plants.", "function": {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}}, "model_result_raw": [{"local_nursery_find": "{\"location\":\"Toronto\",\"plant_types\":[\"Annual\"]}"}], "model_result_decoded": [{"local_nursery_find": {"location": "Toronto", "plant_types": ["Annual"]}}], "possible_answer": {"local_nursery.find": {"location": ["Toronto", "\u591a\u502b\u591a"], "plant_types": [["Annual", "\u4e00\u5e74\u751f"]]}}}
{"id": 200, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_199", "question": "Find air quality index in San Jose for next three days.", "function": {"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}}, "model_result_raw": [{"environmental_data_air_quality_index": "{\"location\": \"San Jose\", \"days\": 1}"}, {"environmental_data_air_quality_index": "{\"location\": \"San Jose\", \"days\": 2}"}, {"environmental_data_air_quality_index": "{\"location\": \"San Jose\", \"days\": 3}"}], "model_result_decoded": [{"environmental_data_air_quality_index": {"location": "San Jose", "days": 1}}, {"environmental_data_air_quality_index": {"location": "San Jose", "days": 2}}, {"environmental_data_air_quality_index": {"location": "San Jose", "days": 3}}], "possible_answer": {"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'", "\u8056\u8377\u897f", "'\u8056\u8377\u897f'"], "days": [3]}}}
{"id": 221, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_220", "question": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "function": {"name": "calculate_neuronal_activity", "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.", "parameters": {"type": "dict", "properties": {"input_synaptic_rate": {"type": "integer", "description": "The synaptic input rate, usually represented as number of inputs per second."}, "weight": {"type": "float", "description": "The weight of the input, denoting its influence on the neuron's state. Default is 1.0."}, "decay_rate": {"type": "float", "description": "The rate at which the neuron's potential decays in the absence of inputs."}}, "required": ["input_synaptic_rate", "decay_rate"]}}}, "model_result_raw": [{"calculate_neuronal_activity": "{\"input_synaptic_rate\": 200, \"weight\": 0.5, \"decay_rate\": 0.1}"}, {"calculate_neuronal_activity": "{\"input_synaptic_rate\": 200, \"weight\": 1.0, \"decay_rate\": 0.1}"}], "model_result_decoded": [{"calculate_neuronal_activity": {"input_synaptic_rate": 200, "weight": 0.5, "decay_rate": 0.1}}, {"calculate_neuronal_activity": {"input_synaptic_rate": 200, "weight": 1.0, "decay_rate": 0.1}}], "possible_answer": {"calculate_neuronal_activity": {"input_synaptic_rate": [200], "weight": [0.5], "decay_rate": [0.1]}}}
{"id": 228, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_227", "question": "Get me strength and weakness traits for ENFJ personality type.", "function": {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths']."}}, "required": ["type"]}}}, "model_result_raw": [{"get_personality_traits": "{\"type\": \"ENFJ\", \"traits\": [\"strengths\"]}"}, {"get_personality_traits": "{\"type\": \"ENFJ\", \"traits\": [\"weaknesses\"]}"}], "model_result_decoded": [{"get_personality_traits": {"type": "ENFJ", "traits": ["strengths"]}}, {"get_personality_traits": {"type": "ENFJ", "traits": ["weaknesses"]}}], "possible_answer": {"get_personality_traits": {"type": ["ENFJ"], "traits": [["strengths", "weaknesses"], ["\u5f37\u9805", "\u5f31\u9805"], ["\u9577\u8655", "\u77ed\u8655"]]}}}
{"id": 268, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"location\":\"New York City, NY\",\"art_form\":\"sculpture\",\"month\":\"upcoming\",\"user_ratings\":\"high\"}"}], "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY", "\u7d10\u7d04\u5e02", "\u7d10\u7d04"], "art_form": ["sculpture", "modern sculpture", "\u96d5\u5851", "\u73fe\u4ee3\u96d5\u5851", "\u96d5\u50cf", "\u73fe\u4ee3\u96d5\u50cf"], "month": [""], "user_ratings": ["high", "\u9ad8", "\u6700\u9ad8"]}}}
{"id": 272, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_271", "question": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "function": {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}}, "model_result_raw": [{"analyze_structure": "{\"building_id\": \"B1004\", \"floors\": [2, 3, 4], \"mode\": \"dynamic\"}"}, {"analyze_structure": "{\"building_id\": \"B1004\", \"floors\": [2, 3, 4], \"mode\": \"static\"}"}], "model_result_decoded": [{"analyze_structure": {"building_id": "B1004", "floors": [2, 3, 4], "mode": "dynamic"}}, {"analyze_structure": {"building_id": "B1004", "floors": [2, 3, 4], "mode": "static"}}], "possible_answer": {"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic", "\u52d5\u614b"]}}}
{"id": 273, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_272", "question": "Calculate the area and circumference of a circle with a radius of 5 units.", "function": {"name": "calculate_circle_dimensions", "description": "Calculate the area and circumference of a circle based on the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}}, "model_result_raw": [{"calculate_circle_dimensions": "{\"radius\": 5}"}, {"calculate_circle_dimensions": "{\"radius\": 5}"}], "model_result_decoded": [{"calculate_circle_dimensions": {"radius": 5}}, {"calculate_circle_dimensions": {"radius": 5}}], "possible_answer": {"calculate_circle_dimensions": {"radius": [5]}}}
{"id": 301, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_300", "question": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm.", "function": {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "integer", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "integer", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}}, "model_result_raw": [{"music_calculate_note_duration": "{\"first_note_frequency\": 440, \"second_note_frequency\": 880}"}, {"music_calculate_note_duration": "{\"first_note_frequency\": 440, \"second_note_frequency\": 880, \"tempo\": 120}"}], "model_result_decoded": [{"music_calculate_note_duration": {"first_note_frequency": 440, "second_note_frequency": 880}}, {"music_calculate_note_duration": {"first_note_frequency": 440, "second_note_frequency": 880, "tempo": 120}}], "possible_answer": {"music.calculate_note_duration": {"first_note_frequency": [440], "second_note_frequency": [880], "tempo": ["", 120]}}}
{"id": 306, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_305", "question": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}}, "model_result_raw": [{"sports_stats_get_performance": "{\"player_name\": \"Messi\", \"tournament\": \"La Liga\", \"season\": \"2020-2021\", \"performance_indicator\": [\"Goals Scored\"]}"}, {"sports_stats_get_performance": "{\"player_name\": \"Messi\", \"tournament\": \"La Liga\", \"season\": \"2020-2021\", \"performance_indicator\": [\"Assists Made\"]}"}], "model_result_decoded": [{"sports_stats_get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["Goals Scored"]}}, {"sports_stats_get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["Assists Made"]}}], "possible_answer": {"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi", "\u6885\u897f", "\u840a\u7d0d\u723e\u00b7\u6885\u897f", "\u840a\u7d0d\u723e\u6885\u897f"], "tournament": ["La Liga", "\u897f\u73ed\u7259\u8db3\u7403\u7532\u7d1a\u806f\u8cfd", "\u897f\u7532\u806f\u8cfd"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"], ["\u9032\u7403", "\u52a9\u653b"]]}}}
{"id": 335, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_334", "question": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "function": {"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}}, "model_result_raw": [{"blackjack_check_winner": "{\"player_cards\": [\"A\", \"10\"], \"dealer_cards\": [\"10\", \"9\"], \"ace_value\": 1}"}, {"blackjack_check_winner": "{\"player_cards\": [\"A\", \"10\"], \"dealer_cards\": [\"10\", \"9\"], \"ace_value\": 1}"}], "model_result_decoded": [{"blackjack_check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["10", "9"], "ace_value": 1}}, {"blackjack_check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["10", "9"], "ace_value": 1}}], "possible_answer": {"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}}
{"id": 338, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'cards'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_337", "question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": [{"poker_game_winner": "{\"players\":[\"Alex\",\"Sam\",\"Robert\",\"Steve\"],\"type\":\"Texas Holdem\"}"}], "model_result_decoded": [{"poker_game_winner": {"players": ["Alex", "Sam", "Robert", "Steve"], "type": "Texas Holdem"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}, {"Alex": [["\u9ed1\u6843A", "\u9ed1\u6843K"]], "Sam": [["\u65b9\u584a2", "\u6885\u82b13"]], "Robert": [["\u7d05\u5fc3Q", "\u7d05\u5fc310"]], "Steve": [["\u9ed1\u68434", "\u9ed1\u68435"]]}], "type": ["Texas Holdem", "", "\u5fb7\u5dde\u64b2\u514b"]}}}
{"id": 340, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_339", "question": "What is the probability of getting a full house in poker?", "function": {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}}, "model_result_raw": [{"poker_probability_full_house": "{\"deck_size\": 52, \"hand_size\": 5}"}, {"poker_probability_full_house": "{\"deck_size\": 52, \"hand_size\": 5}"}], "model_result_decoded": [{"poker_probability_full_house": {"deck_size": 52, "hand_size": 5}}, {"poker_probability_full_house": {"deck_size": 52, "hand_size": 5}}], "possible_answer": {"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}}
{"id": 362, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_361", "question": "Find Italian restaurants near New York city that serves gluten-free options.", "function": {"name": "restaurant_finder", "description": "Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "City where you are looking for the restaurant."}, "cuisine": {"type": "string", "description": "Type of cuisine you are interested in."}, "diet": {"type": "string", "description": "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'."}}, "required": ["city", "cuisine"]}}}, "model_result_raw": [{"restaurant_finder": "{\"city\": \"New York\", \"cuisine\": \"Italian\", \"diet\": \"Gluten-free\"}"}, {"restaurant_finder": "{\"city\": \"New York\", \"cuisine\": \"Italian\", \"diet\": \"Gluten-free\"}"}], "model_result_decoded": [{"restaurant_finder": {"city": "New York", "cuisine": "Italian", "diet": "Gluten-free"}}, {"restaurant_finder": {"city": "New York", "cuisine": "Italian", "diet": "Gluten-free"}}], "possible_answer": {"restaurant_finder": {"city": ["New York City", "New York City, NY", "NYC", "New York", "\u7d10\u7d04\u5e02", "\u7d10\u7d04"], "cuisine": ["Italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "diet": ["Gluten-free", "\u7121\u9ea9\u8cea"]}}}
{"id": 365, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_364", "question": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?", "function": {"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}}, "model_result_raw": [{"find_restaurant": "{\"location\": \"Brooklyn\", \"type\": \"Italian\", \"diet_option\": \"Gluten-free\"}"}, {"find_restaurant": "{\"location\": \"Brooklyn\", \"type\": \"Italian\", \"diet_option\": \"Gluten-free\"}"}], "model_result_decoded": [{"find_restaurant": {"location": "Brooklyn", "type": "Italian", "diet_option": "Gluten-free"}}, {"find_restaurant": {"location": "Brooklyn", "type": "Italian", "diet_option": "Gluten-free"}}], "possible_answer": {"find_restaurant": {"location": ["Brooklyn", "Brooklyn, NY", "\u5e03\u9c81\u514b\u6797", "\u7d10\u7d04\u5e03\u9c81\u514b\u6797"], "type": ["Italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "diet_option": ["Gluten-free", "\u7121\u9ea9\u8cea"]}}}
{"id": 374, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'pack_size'. Expected outer type array with inner type <class 'int'>. Parameter value: [None, None, 12]."], "error_type": "type_error:nested", "prompt": {"id": "simple_373", "question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": [{"walmart_purchase": "{\"loc\":\"San Jose\",\"product_list\":[\"apples\",\"rice\",\"bottled water\"],\"pack_size\":[null,null,12]}"}], "model_result_decoded": [{"walmart_purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [null, null, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA", "\u8056\u8377\u897f", "\u52a0\u5dde\u8056\u8377\u897f", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u8056\u8377\u897f"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"], ["\u860b\u679c", "\u7c73", "\u6c34"], ["\u860b\u679c", "\u7c73", "\u74f6\u88dd\u6c34"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'egg']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs'], ['\u5357\u74dc', '\u96de\u86cb'], ['\u5357\u74dc', '\u86cb']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart_check_price": "{\"items\":[\"pumpkin\",\"egg\"],\"quantities\":[3,24]}"}], "model_result_decoded": [{"walmart_check_price": {"items": ["pumpkin", "egg"], "quantities": [3, 24]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"], ["\u5357\u74dc", "\u96de\u86cb"], ["\u5357\u74dc", "\u86cb"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"]}}}
{"id": 383, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022', '2022\u5e7412\u670810\u65e5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": [{"book_hotel": "{\"hotel_name\":\"Hilton Hotel\",\"location\":\"Chicago\",\"room_type\":\"single\",\"start_date\":\"10th December 2022\",\"nights\":2}"}], "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton", "\u5e0c\u723e\u9813\u9152\u5e97", "\u5e0c\u723e\u9813"], "location": ["Chicago", "\u829d\u52a0\u54e5"], "room_type": ["single", "\u55ae\u4eba"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022", "2022\u5e7412\u670810\u65e5"], "nights": [2]}}}